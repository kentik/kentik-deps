// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kentik/chf-alert/pkg/ktds (interfaces: AlarmDataSource,AlertDataSource,ActivatorDataSource,BatchingAlarmDataSource,MitigateDataSource,ThresholdDataSource,DataSource)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	appproto "github.com/kentik/chf-alert/pkg/alert/appproto"
	conductor "github.com/kentik/chf-alert/pkg/eggs/conductor"
	state "github.com/kentik/chf-alert/pkg/eggs/state"
	flowspec "github.com/kentik/chf-alert/pkg/flowspec"
	kt "github.com/kentik/chf-alert/pkg/kt"
	ktds "github.com/kentik/chf-alert/pkg/ktds"
)

// MockAlarmDataSource is a mock of AlarmDataSource interface
type MockAlarmDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockAlarmDataSourceMockRecorder
}

// MockAlarmDataSourceMockRecorder is the mock recorder for MockAlarmDataSource
type MockAlarmDataSourceMockRecorder struct {
	mock *MockAlarmDataSource
}

// NewMockAlarmDataSource creates a new mock instance
func NewMockAlarmDataSource(ctrl *gomock.Controller) *MockAlarmDataSource {
	mock := &MockAlarmDataSource{ctrl: ctrl}
	mock.recorder = &MockAlarmDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlarmDataSource) EXPECT() *MockAlarmDataSourceMockRecorder {
	return m.recorder
}

// AckAlarmCurrent mocks base method
func (m *MockAlarmDataSource) AckAlarmCurrent(arg0 context.Context, arg1 *kt.AlarmEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckAlarmCurrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckAlarmCurrent indicates an expected call of AckAlarmCurrent
func (mr *MockAlarmDataSourceMockRecorder) AckAlarmCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckAlarmCurrent", reflect.TypeOf((*MockAlarmDataSource)(nil).AckAlarmCurrent), arg0, arg1)
}

// AckAlarmHistory mocks base method
func (m *MockAlarmDataSource) AckAlarmHistory(arg0 context.Context, arg1 *kt.AlarmEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckAlarmHistory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckAlarmHistory indicates an expected call of AckAlarmHistory
func (mr *MockAlarmDataSourceMockRecorder) AckAlarmHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckAlarmHistory", reflect.TypeOf((*MockAlarmDataSource)(nil).AckAlarmHistory), arg0, arg1)
}

// AssociateAlarmWithMitigation mocks base method
func (m *MockAlarmDataSource) AssociateAlarmWithMitigation(arg0 kt.Cid, arg1 kt.AlarmID, arg2 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAlarmWithMitigation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateAlarmWithMitigation indicates an expected call of AssociateAlarmWithMitigation
func (mr *MockAlarmDataSourceMockRecorder) AssociateAlarmWithMitigation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAlarmWithMitigation", reflect.TypeOf((*MockAlarmDataSource)(nil).AssociateAlarmWithMitigation), arg0, arg1, arg2)
}

// Close mocks base method
func (m *MockAlarmDataSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockAlarmDataSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAlarmDataSource)(nil).Close))
}

// FetchCompanyInsights mocks base method
func (m *MockAlarmDataSource) FetchCompanyInsights(arg0 *kt.FetchCompanyInsightsFilter) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCompanyInsights", arg0)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCompanyInsights indicates an expected call of FetchCompanyInsights
func (mr *MockAlarmDataSourceMockRecorder) FetchCompanyInsights(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCompanyInsights", reflect.TypeOf((*MockAlarmDataSource)(nil).FetchCompanyInsights), arg0)
}

// FindAlarms mocks base method
func (m *MockAlarmDataSource) FindAlarms(arg0 context.Context, arg1 *kt.GetAlarmsFilter) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAlarms", arg0, arg1)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAlarms indicates an expected call of FindAlarms
func (mr *MockAlarmDataSourceMockRecorder) FindAlarms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAlarms", reflect.TypeOf((*MockAlarmDataSource)(nil).FindAlarms), arg0, arg1)
}

// FindAlarmsRelatedByKey mocks base method
func (m *MockAlarmDataSource) FindAlarmsRelatedByKey(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID, arg3, arg4 string) ([]kt.AlarmID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAlarmsRelatedByKey", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]kt.AlarmID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAlarmsRelatedByKey indicates an expected call of FindAlarmsRelatedByKey
func (mr *MockAlarmDataSourceMockRecorder) FindAlarmsRelatedByKey(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAlarmsRelatedByKey", reflect.TypeOf((*MockAlarmDataSource)(nil).FindAlarmsRelatedByKey), arg0, arg1, arg2, arg3, arg4)
}

// FindAssociatedPolicies mocks base method
func (m *MockAlarmDataSource) FindAssociatedPolicies(arg0 context.Context, arg1 kt.Cid, arg2 []kt.AlarmID) ([]kt.PolicyID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAssociatedPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].([]kt.PolicyID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAssociatedPolicies indicates an expected call of FindAssociatedPolicies
func (mr *MockAlarmDataSourceMockRecorder) FindAssociatedPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAssociatedPolicies", reflect.TypeOf((*MockAlarmDataSource)(nil).FindAssociatedPolicies), arg0, arg1, arg2)
}

// GetAlarm mocks base method
func (m *MockAlarmDataSource) GetAlarm(arg0 context.Context, arg1 kt.Cid, arg2 kt.AlarmID) (*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarm", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarm indicates an expected call of GetAlarm
func (mr *MockAlarmDataSourceMockRecorder) GetAlarm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarm", reflect.TypeOf((*MockAlarmDataSource)(nil).GetAlarm), arg0, arg1, arg2)
}

// GetAlarmFromCurrent mocks base method
func (m *MockAlarmDataSource) GetAlarmFromCurrent(arg0 context.Context, arg1 kt.Cid, arg2 kt.AlarmID) (*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmFromCurrent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmFromCurrent indicates an expected call of GetAlarmFromCurrent
func (mr *MockAlarmDataSourceMockRecorder) GetAlarmFromCurrent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmFromCurrent", reflect.TypeOf((*MockAlarmDataSource)(nil).GetAlarmFromCurrent), arg0, arg1, arg2)
}

// GetAlarmFromHistory mocks base method
func (m *MockAlarmDataSource) GetAlarmFromHistory(arg0 context.Context, arg1 kt.Cid, arg2 kt.AlarmID) (*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmFromHistory", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmFromHistory indicates an expected call of GetAlarmFromHistory
func (mr *MockAlarmDataSourceMockRecorder) GetAlarmFromHistory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmFromHistory", reflect.TypeOf((*MockAlarmDataSource)(nil).GetAlarmFromHistory), arg0, arg1, arg2)
}

// GetAlarmStateTransitions mocks base method
func (m *MockAlarmDataSource) GetAlarmStateTransitions(arg0 context.Context, arg1 kt.Cid, arg2 kt.AlarmID) ([]*kt.AlarmStateTransition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmStateTransitions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.AlarmStateTransition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmStateTransitions indicates an expected call of GetAlarmStateTransitions
func (mr *MockAlarmDataSourceMockRecorder) GetAlarmStateTransitions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmStateTransitions", reflect.TypeOf((*MockAlarmDataSource)(nil).GetAlarmStateTransitions), arg0, arg1, arg2)
}

// GetAlarmsForMitigationStart mocks base method
func (m *MockAlarmDataSource) GetAlarmsForMitigationStart(arg0 kt.Cid, arg1 kt.PolicyID, arg2 kt.Tid) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmsForMitigationStart", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmsForMitigationStart indicates an expected call of GetAlarmsForMitigationStart
func (mr *MockAlarmDataSourceMockRecorder) GetAlarmsForMitigationStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmsForMitigationStart", reflect.TypeOf((*MockAlarmDataSource)(nil).GetAlarmsForMitigationStart), arg0, arg1, arg2)
}

// GetAlarmsForMitigationStop mocks base method
func (m *MockAlarmDataSource) GetAlarmsForMitigationStop(arg0 kt.Cid, arg1 kt.PolicyID, arg2 kt.Tid) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmsForMitigationStop", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmsForMitigationStop indicates an expected call of GetAlarmsForMitigationStop
func (mr *MockAlarmDataSourceMockRecorder) GetAlarmsForMitigationStop(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmsForMitigationStop", reflect.TypeOf((*MockAlarmDataSource)(nil).GetAlarmsForMitigationStop), arg0, arg1, arg2)
}

// GetAlarmsForThresholds mocks base method
func (m *MockAlarmDataSource) GetAlarmsForThresholds(arg0 context.Context, arg1 kt.Cid, arg2 []kt.PolicyID, arg3 []kt.Tid) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmsForThresholds", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmsForThresholds indicates an expected call of GetAlarmsForThresholds
func (mr *MockAlarmDataSourceMockRecorder) GetAlarmsForThresholds(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmsForThresholds", reflect.TypeOf((*MockAlarmDataSource)(nil).GetAlarmsForThresholds), arg0, arg1, arg2, arg3)
}

// GetAllAlarms mocks base method
func (m *MockAlarmDataSource) GetAllAlarms(arg0 kt.Cid, arg1 kt.PolicyID, arg2 kt.Tid) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlarms", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlarms indicates an expected call of GetAllAlarms
func (mr *MockAlarmDataSourceMockRecorder) GetAllAlarms(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlarms", reflect.TypeOf((*MockAlarmDataSource)(nil).GetAllAlarms), arg0, arg1, arg2)
}

// GetCompanyInsightByID mocks base method
func (m *MockAlarmDataSource) GetCompanyInsightByID(arg0 kt.Cid, arg1 kt.AlarmID, arg2 bool) (*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyInsightByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyInsightByID indicates an expected call of GetCompanyInsightByID
func (mr *MockAlarmDataSourceMockRecorder) GetCompanyInsightByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyInsightByID", reflect.TypeOf((*MockAlarmDataSource)(nil).GetCompanyInsightByID), arg0, arg1, arg2)
}

// GetOccurrencesForKey mocks base method
func (m *MockAlarmDataSource) GetOccurrencesForKey(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID, arg3, arg4 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccurrencesForKey", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccurrencesForKey indicates an expected call of GetOccurrencesForKey
func (mr *MockAlarmDataSourceMockRecorder) GetOccurrencesForKey(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccurrencesForKey", reflect.TypeOf((*MockAlarmDataSource)(nil).GetOccurrencesForKey), arg0, arg1, arg2, arg3, arg4)
}

// GetTotalActiveAlarms mocks base method
func (m *MockAlarmDataSource) GetTotalActiveAlarms() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalActiveAlarms")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalActiveAlarms indicates an expected call of GetTotalActiveAlarms
func (mr *MockAlarmDataSourceMockRecorder) GetTotalActiveAlarms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalActiveAlarms", reflect.TypeOf((*MockAlarmDataSource)(nil).GetTotalActiveAlarms))
}

// GetTotalActiveAlarmsForCompany mocks base method
func (m *MockAlarmDataSource) GetTotalActiveAlarmsForCompany(arg0 kt.Cid) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalActiveAlarmsForCompany", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalActiveAlarmsForCompany indicates an expected call of GetTotalActiveAlarmsForCompany
func (mr *MockAlarmDataSourceMockRecorder) GetTotalActiveAlarmsForCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalActiveAlarmsForCompany", reflect.TypeOf((*MockAlarmDataSource)(nil).GetTotalActiveAlarmsForCompany), arg0)
}

// GetTotalActiveAlarmsIncludingShadow mocks base method
func (m *MockAlarmDataSource) GetTotalActiveAlarmsIncludingShadow() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalActiveAlarmsIncludingShadow")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalActiveAlarmsIncludingShadow indicates an expected call of GetTotalActiveAlarmsIncludingShadow
func (mr *MockAlarmDataSourceMockRecorder) GetTotalActiveAlarmsIncludingShadow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalActiveAlarmsIncludingShadow", reflect.TypeOf((*MockAlarmDataSource)(nil).GetTotalActiveAlarmsIncludingShadow))
}

// GetTotalActiveShadowAlarms mocks base method
func (m *MockAlarmDataSource) GetTotalActiveShadowAlarms() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalActiveShadowAlarms")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalActiveShadowAlarms indicates an expected call of GetTotalActiveShadowAlarms
func (mr *MockAlarmDataSourceMockRecorder) GetTotalActiveShadowAlarms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalActiveShadowAlarms", reflect.TypeOf((*MockAlarmDataSource)(nil).GetTotalActiveShadowAlarms))
}

// MarkMitigationStart mocks base method
func (m *MockAlarmDataSource) MarkMitigationStart(arg0 kt.AlarmID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMitigationStart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMitigationStart indicates an expected call of MarkMitigationStart
func (mr *MockAlarmDataSourceMockRecorder) MarkMitigationStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMitigationStart", reflect.TypeOf((*MockAlarmDataSource)(nil).MarkMitigationStart), arg0)
}

// MarkMitigationStop mocks base method
func (m *MockAlarmDataSource) MarkMitigationStop(arg0 kt.AlarmID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMitigationStop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMitigationStop indicates an expected call of MarkMitigationStop
func (mr *MockAlarmDataSourceMockRecorder) MarkMitigationStop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMitigationStop", reflect.TypeOf((*MockAlarmDataSource)(nil).MarkMitigationStop), arg0)
}

// RemoveAlarmHistoryOldEntries mocks base method
func (m *MockAlarmDataSource) RemoveAlarmHistoryOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAlarmHistoryOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAlarmHistoryOldEntries indicates an expected call of RemoveAlarmHistoryOldEntries
func (mr *MockAlarmDataSourceMockRecorder) RemoveAlarmHistoryOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAlarmHistoryOldEntries", reflect.TypeOf((*MockAlarmDataSource)(nil).RemoveAlarmHistoryOldEntries), arg0, arg1)
}

// RemoveAlarmMatchHistoricalEntries mocks base method
func (m *MockAlarmDataSource) RemoveAlarmMatchHistoricalEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAlarmMatchHistoricalEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAlarmMatchHistoricalEntries indicates an expected call of RemoveAlarmMatchHistoricalEntries
func (mr *MockAlarmDataSourceMockRecorder) RemoveAlarmMatchHistoricalEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAlarmMatchHistoricalEntries", reflect.TypeOf((*MockAlarmDataSource)(nil).RemoveAlarmMatchHistoricalEntries), arg0, arg1)
}

// RemoveBaselineBackfillJobsOldEntries mocks base method
func (m *MockAlarmDataSource) RemoveBaselineBackfillJobsOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBaselineBackfillJobsOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBaselineBackfillJobsOldEntries indicates an expected call of RemoveBaselineBackfillJobsOldEntries
func (mr *MockAlarmDataSourceMockRecorder) RemoveBaselineBackfillJobsOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBaselineBackfillJobsOldEntries", reflect.TypeOf((*MockAlarmDataSource)(nil).RemoveBaselineBackfillJobsOldEntries), arg0, arg1)
}

// RemoveBaselineOldEntries mocks base method
func (m *MockAlarmDataSource) RemoveBaselineOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBaselineOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBaselineOldEntries indicates an expected call of RemoveBaselineOldEntries
func (mr *MockAlarmDataSourceMockRecorder) RemoveBaselineOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBaselineOldEntries", reflect.TypeOf((*MockAlarmDataSource)(nil).RemoveBaselineOldEntries), arg0, arg1)
}

// RemoveClearedAlarmOldEntries mocks base method
func (m *MockAlarmDataSource) RemoveClearedAlarmOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClearedAlarmOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveClearedAlarmOldEntries indicates an expected call of RemoveClearedAlarmOldEntries
func (mr *MockAlarmDataSourceMockRecorder) RemoveClearedAlarmOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClearedAlarmOldEntries", reflect.TypeOf((*MockAlarmDataSource)(nil).RemoveClearedAlarmOldEntries), arg0, arg1)
}

// RemoveMachineLogOldEntries mocks base method
func (m *MockAlarmDataSource) RemoveMachineLogOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMachineLogOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMachineLogOldEntries indicates an expected call of RemoveMachineLogOldEntries
func (mr *MockAlarmDataSourceMockRecorder) RemoveMachineLogOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMachineLogOldEntries", reflect.TypeOf((*MockAlarmDataSource)(nil).RemoveMachineLogOldEntries), arg0, arg1)
}

// RemoveMachinesOldEntries mocks base method
func (m *MockAlarmDataSource) RemoveMachinesOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMachinesOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMachinesOldEntries indicates an expected call of RemoveMachinesOldEntries
func (mr *MockAlarmDataSourceMockRecorder) RemoveMachinesOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMachinesOldEntries", reflect.TypeOf((*MockAlarmDataSource)(nil).RemoveMachinesOldEntries), arg0, arg1)
}

// MockAlertDataSource is a mock of AlertDataSource interface
type MockAlertDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockAlertDataSourceMockRecorder
}

// MockAlertDataSourceMockRecorder is the mock recorder for MockAlertDataSource
type MockAlertDataSourceMockRecorder struct {
	mock *MockAlertDataSource
}

// NewMockAlertDataSource creates a new mock instance
func NewMockAlertDataSource(ctrl *gomock.Controller) *MockAlertDataSource {
	mock := &MockAlertDataSource{ctrl: ctrl}
	mock.recorder = &MockAlertDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlertDataSource) EXPECT() *MockAlertDataSourceMockRecorder {
	return m.recorder
}

// AddSelectedDevicesToPolicies mocks base method
func (m *MockAlertDataSource) AddSelectedDevicesToPolicies(arg0 context.Context, arg1 kt.Cid, arg2 map[kt.PolicyID]*kt.AlertPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSelectedDevicesToPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSelectedDevicesToPolicies indicates an expected call of AddSelectedDevicesToPolicies
func (mr *MockAlertDataSourceMockRecorder) AddSelectedDevicesToPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSelectedDevicesToPolicies", reflect.TypeOf((*MockAlertDataSource)(nil).AddSelectedDevicesToPolicies), arg0, arg1, arg2)
}

// AllPoliciesExist mocks base method
func (m *MockAlertDataSource) AllPoliciesExist(arg0 context.Context, arg1 kt.Cid, arg2 []kt.PolicyID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllPoliciesExist", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllPoliciesExist indicates an expected call of AllPoliciesExist
func (mr *MockAlertDataSourceMockRecorder) AllPoliciesExist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllPoliciesExist", reflect.TypeOf((*MockAlertDataSource)(nil).AllPoliciesExist), arg0, arg1, arg2)
}

// Close mocks base method
func (m *MockAlertDataSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockAlertDataSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAlertDataSource)(nil).Close))
}

// CreatePolicy mocks base method
func (m *MockAlertDataSource) CreatePolicy(arg0 context.Context, arg1 *kt.AlertPolicy) (*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0, arg1)
	ret0, _ := ret[0].(*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy
func (mr *MockAlertDataSourceMockRecorder) CreatePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockAlertDataSource)(nil).CreatePolicy), arg0, arg1)
}

// CreatePolicyTx mocks base method
func (m *MockAlertDataSource) CreatePolicyTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 *kt.AlertPolicy) (*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyTx indicates an expected call of CreatePolicyTx
func (mr *MockAlertDataSourceMockRecorder) CreatePolicyTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyTx", reflect.TypeOf((*MockAlertDataSource)(nil).CreatePolicyTx), arg0, arg1, arg2)
}

// CreateSavedFilter mocks base method
func (m *MockAlertDataSource) CreateSavedFilter(arg0 context.Context, arg1 kt.Cid, arg2 kt.SavedFilterUpdateBundle) (*kt.SavedFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSavedFilter", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.SavedFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSavedFilter indicates an expected call of CreateSavedFilter
func (mr *MockAlertDataSourceMockRecorder) CreateSavedFilter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSavedFilter", reflect.TypeOf((*MockAlertDataSource)(nil).CreateSavedFilter), arg0, arg1, arg2)
}

// DeletePolicy mocks base method
func (m *MockAlertDataSource) DeletePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy
func (mr *MockAlertDataSourceMockRecorder) DeletePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockAlertDataSource)(nil).DeletePolicy), arg0, arg1, arg2)
}

// DeleteSavedFilter mocks base method
func (m *MockAlertDataSource) DeleteSavedFilter(arg0 context.Context, arg1 kt.Cid, arg2 kt.SavedFilterID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSavedFilter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSavedFilter indicates an expected call of DeleteSavedFilter
func (mr *MockAlertDataSourceMockRecorder) DeleteSavedFilter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSavedFilter", reflect.TypeOf((*MockAlertDataSource)(nil).DeleteSavedFilter), arg0, arg1, arg2)
}

// DisablePolicy mocks base method
func (m *MockAlertDataSource) DisablePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisablePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisablePolicy indicates an expected call of DisablePolicy
func (mr *MockAlertDataSourceMockRecorder) DisablePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePolicy", reflect.TypeOf((*MockAlertDataSource)(nil).DisablePolicy), arg0, arg1, arg2)
}

// EnablePolicy mocks base method
func (m *MockAlertDataSource) EnablePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePolicy indicates an expected call of EnablePolicy
func (mr *MockAlertDataSourceMockRecorder) EnablePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePolicy", reflect.TypeOf((*MockAlertDataSource)(nil).EnablePolicy), arg0, arg1, arg2)
}

// FetchSavedFilters mocks base method
func (m *MockAlertDataSource) FetchSavedFilters(arg0 context.Context, arg1 kt.Cid) (map[kt.SavedFilterID]*kt.SavedFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSavedFilters", arg0, arg1)
	ret0, _ := ret[0].(map[kt.SavedFilterID]*kt.SavedFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSavedFilters indicates an expected call of FetchSavedFilters
func (mr *MockAlertDataSourceMockRecorder) FetchSavedFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSavedFilters", reflect.TypeOf((*MockAlertDataSource)(nil).FetchSavedFilters), arg0, arg1)
}

// FetchSavedFiltersFlat mocks base method
func (m *MockAlertDataSource) FetchSavedFiltersFlat(arg0 kt.Cid) (map[kt.PolicyID][]*kt.CompanyFilterBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSavedFiltersFlat", arg0)
	ret0, _ := ret[0].(map[kt.PolicyID][]*kt.CompanyFilterBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSavedFiltersFlat indicates an expected call of FetchSavedFiltersFlat
func (mr *MockAlertDataSourceMockRecorder) FetchSavedFiltersFlat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSavedFiltersFlat", reflect.TypeOf((*MockAlertDataSource)(nil).FetchSavedFiltersFlat), arg0)
}

// FetchUserIDAndHydraForCompany mocks base method
func (m *MockAlertDataSource) FetchUserIDAndHydraForCompany(arg0 context.Context, arg1 kt.Cid) (kt.UserID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserIDAndHydraForCompany", arg0, arg1)
	ret0, _ := ret[0].(kt.UserID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchUserIDAndHydraForCompany indicates an expected call of FetchUserIDAndHydraForCompany
func (mr *MockAlertDataSourceMockRecorder) FetchUserIDAndHydraForCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserIDAndHydraForCompany", reflect.TypeOf((*MockAlertDataSource)(nil).FetchUserIDAndHydraForCompany), arg0, arg1)
}

// FindPolicies mocks base method
func (m *MockAlertDataSource) FindPolicies(arg0 context.Context, arg1 *kt.FindPoliciesFilter) (map[kt.PolicyID]*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPolicies", arg0, arg1)
	ret0, _ := ret[0].(map[kt.PolicyID]*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPolicies indicates an expected call of FindPolicies
func (mr *MockAlertDataSourceMockRecorder) FindPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPolicies", reflect.TypeOf((*MockAlertDataSource)(nil).FindPolicies), arg0, arg1)
}

// FindPoliciesWithCount mocks base method
func (m *MockAlertDataSource) FindPoliciesWithCount(arg0 context.Context, arg1 *kt.FindPoliciesFilter) (map[kt.PolicyID]*kt.AlertPolicy, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPoliciesWithCount", arg0, arg1)
	ret0, _ := ret[0].(map[kt.PolicyID]*kt.AlertPolicy)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPoliciesWithCount indicates an expected call of FindPoliciesWithCount
func (mr *MockAlertDataSourceMockRecorder) FindPoliciesWithCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPoliciesWithCount", reflect.TypeOf((*MockAlertDataSource)(nil).FindPoliciesWithCount), arg0, arg1)
}

// FindSavedFiltersWithCount mocks base method
func (m *MockAlertDataSource) FindSavedFiltersWithCount(arg0 context.Context, arg1 kt.Cid, arg2 *kt.FindSavedFiltersCriteria) ([]*kt.SavedFilter, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSavedFiltersWithCount", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.SavedFilter)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindSavedFiltersWithCount indicates an expected call of FindSavedFiltersWithCount
func (mr *MockAlertDataSourceMockRecorder) FindSavedFiltersWithCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSavedFiltersWithCount", reflect.TypeOf((*MockAlertDataSource)(nil).FindSavedFiltersWithCount), arg0, arg1, arg2)
}

// GetAlertPolicies mocks base method
func (m *MockAlertDataSource) GetAlertPolicies(arg0 *kt.Cid, arg1 *time.Time, arg2 *kt.PolicyID) ([]kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].([]kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertPolicies indicates an expected call of GetAlertPolicies
func (mr *MockAlertDataSourceMockRecorder) GetAlertPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertPolicies", reflect.TypeOf((*MockAlertDataSource)(nil).GetAlertPolicies), arg0, arg1, arg2)
}

// GetAlertPoliciesBulk mocks base method
func (m *MockAlertDataSource) GetAlertPoliciesBulk(arg0 ...kt.Cid) (map[kt.Cid]map[kt.PolicyID]*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlertPoliciesBulk", varargs...)
	ret0, _ := ret[0].(map[kt.Cid]map[kt.PolicyID]*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertPoliciesBulk indicates an expected call of GetAlertPoliciesBulk
func (mr *MockAlertDataSourceMockRecorder) GetAlertPoliciesBulk(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertPoliciesBulk", reflect.TypeOf((*MockAlertDataSource)(nil).GetAlertPoliciesBulk), arg0...)
}

// GetAlertPoliciesDone mocks base method
func (m *MockAlertDataSource) GetAlertPoliciesDone(arg0 kt.Cid, arg1 time.Time, arg2 kt.PolicyID) ([]kt.InactiveAlertPolicy, []kt.InactiveAlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertPoliciesDone", arg0, arg1, arg2)
	ret0, _ := ret[0].([]kt.InactiveAlertPolicy)
	ret1, _ := ret[1].([]kt.InactiveAlertPolicy)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAlertPoliciesDone indicates an expected call of GetAlertPoliciesDone
func (mr *MockAlertDataSourceMockRecorder) GetAlertPoliciesDone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertPoliciesDone", reflect.TypeOf((*MockAlertDataSource)(nil).GetAlertPoliciesDone), arg0, arg1, arg2)
}

// GetAlertPoliciesMap mocks base method
func (m *MockAlertDataSource) GetAlertPoliciesMap(arg0 *kt.Cid, arg1 *kt.PolicyID, arg2 time.Time) (map[kt.PolicyID]*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertPoliciesMap", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.PolicyID]*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertPoliciesMap indicates an expected call of GetAlertPoliciesMap
func (mr *MockAlertDataSourceMockRecorder) GetAlertPoliciesMap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertPoliciesMap", reflect.TypeOf((*MockAlertDataSource)(nil).GetAlertPoliciesMap), arg0, arg1, arg2)
}

// GetLocalCompanies mocks base method
func (m *MockAlertDataSource) GetLocalCompanies(arg0 ktds.GetNodeAddress, arg1 bool, arg2, arg3 map[kt.Cid]bool) ([]kt.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalCompanies", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]kt.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalCompanies indicates an expected call of GetLocalCompanies
func (mr *MockAlertDataSourceMockRecorder) GetLocalCompanies(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalCompanies", reflect.TypeOf((*MockAlertDataSource)(nil).GetLocalCompanies), arg0, arg1, arg2, arg3)
}

// GetOidFromUserId mocks base method
func (m *MockAlertDataSource) GetOidFromUserId(arg0 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOidFromUserId", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOidFromUserId indicates an expected call of GetOidFromUserId
func (mr *MockAlertDataSourceMockRecorder) GetOidFromUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOidFromUserId", reflect.TypeOf((*MockAlertDataSource)(nil).GetOidFromUserId), arg0)
}

// GetPolicy mocks base method
func (m *MockAlertDataSource) GetPolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID) (*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockAlertDataSourceMockRecorder) GetPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockAlertDataSource)(nil).GetPolicy), arg0, arg1, arg2)
}

// GetSavedFilter mocks base method
func (m *MockAlertDataSource) GetSavedFilter(arg0 context.Context, arg1 kt.Cid, arg2 kt.SavedFilterID) (*kt.SavedFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavedFilter", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.SavedFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedFilter indicates an expected call of GetSavedFilter
func (mr *MockAlertDataSourceMockRecorder) GetSavedFilter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedFilter", reflect.TypeOf((*MockAlertDataSource)(nil).GetSavedFilter), arg0, arg1, arg2)
}

// GetSelectedDevicesForCompanyFromStore mocks base method
func (m *MockAlertDataSource) GetSelectedDevicesForCompanyFromStore(arg0 context.Context, arg1 kt.Cid) (map[kt.PolicyID]*kt.DeviceIDSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectedDevicesForCompanyFromStore", arg0, arg1)
	ret0, _ := ret[0].(map[kt.PolicyID]*kt.DeviceIDSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectedDevicesForCompanyFromStore indicates an expected call of GetSelectedDevicesForCompanyFromStore
func (mr *MockAlertDataSourceMockRecorder) GetSelectedDevicesForCompanyFromStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectedDevicesForCompanyFromStore", reflect.TypeOf((*MockAlertDataSource)(nil).GetSelectedDevicesForCompanyFromStore), arg0, arg1)
}

// LoadAppProtocolDimensions mocks base method
func (m *MockAlertDataSource) LoadAppProtocolDimensions(arg0 context.Context) ([]appproto.Tuple, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAppProtocolDimensions", arg0)
	ret0, _ := ret[0].([]appproto.Tuple)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAppProtocolDimensions indicates an expected call of LoadAppProtocolDimensions
func (mr *MockAlertDataSourceMockRecorder) LoadAppProtocolDimensions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAppProtocolDimensions", reflect.TypeOf((*MockAlertDataSource)(nil).LoadAppProtocolDimensions), arg0)
}

// LoadAppProtocolMappings mocks base method
func (m *MockAlertDataSource) LoadAppProtocolMappings(arg0 context.Context) (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAppProtocolMappings", arg0)
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAppProtocolMappings indicates an expected call of LoadAppProtocolMappings
func (mr *MockAlertDataSourceMockRecorder) LoadAppProtocolMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAppProtocolMappings", reflect.TypeOf((*MockAlertDataSource)(nil).LoadAppProtocolMappings), arg0)
}

// LoadAppProtocolMetrics mocks base method
func (m *MockAlertDataSource) LoadAppProtocolMetrics(arg0 context.Context) ([]appproto.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAppProtocolMetrics", arg0)
	ret0, _ := ret[0].([]appproto.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAppProtocolMetrics indicates an expected call of LoadAppProtocolMetrics
func (mr *MockAlertDataSourceMockRecorder) LoadAppProtocolMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAppProtocolMetrics", reflect.TypeOf((*MockAlertDataSource)(nil).LoadAppProtocolMetrics), arg0)
}

// LoadAppProtocolSNMPBundle mocks base method
func (m *MockAlertDataSource) LoadAppProtocolSNMPBundle(arg0 context.Context) (*kt.SNMPBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAppProtocolSNMPBundle", arg0)
	ret0, _ := ret[0].(*kt.SNMPBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAppProtocolSNMPBundle indicates an expected call of LoadAppProtocolSNMPBundle
func (mr *MockAlertDataSourceMockRecorder) LoadAppProtocolSNMPBundle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAppProtocolSNMPBundle", reflect.TypeOf((*MockAlertDataSource)(nil).LoadAppProtocolSNMPBundle), arg0)
}

// LoadNonSTDAppProtocols mocks base method
func (m *MockAlertDataSource) LoadNonSTDAppProtocols(arg0 context.Context) ([]kt.AppProtoID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadNonSTDAppProtocols", arg0)
	ret0, _ := ret[0].([]kt.AppProtoID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadNonSTDAppProtocols indicates an expected call of LoadNonSTDAppProtocols
func (mr *MockAlertDataSourceMockRecorder) LoadNonSTDAppProtocols(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadNonSTDAppProtocols", reflect.TypeOf((*MockAlertDataSource)(nil).LoadNonSTDAppProtocols), arg0)
}

// MarkPolicyBad mocks base method
func (m *MockAlertDataSource) MarkPolicyBad(arg0 kt.PolicyID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkPolicyBad", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkPolicyBad indicates an expected call of MarkPolicyBad
func (mr *MockAlertDataSourceMockRecorder) MarkPolicyBad(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPolicyBad", reflect.TypeOf((*MockAlertDataSource)(nil).MarkPolicyBad), arg0)
}

// MutePolicy mocks base method
func (m *MockAlertDataSource) MutePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MutePolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MutePolicy indicates an expected call of MutePolicy
func (mr *MockAlertDataSourceMockRecorder) MutePolicy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutePolicy", reflect.TypeOf((*MockAlertDataSource)(nil).MutePolicy), arg0, arg1, arg2, arg3)
}

// NewChwwwTransaction mocks base method
func (m *MockAlertDataSource) NewChwwwTransaction() (kt.ChwwwTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChwwwTransaction")
	ret0, _ := ret[0].(kt.ChwwwTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewChwwwTransaction indicates an expected call of NewChwwwTransaction
func (mr *MockAlertDataSourceMockRecorder) NewChwwwTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChwwwTransaction", reflect.TypeOf((*MockAlertDataSource)(nil).NewChwwwTransaction))
}

// UnmutePolicy mocks base method
func (m *MockAlertDataSource) UnmutePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmutePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmutePolicy indicates an expected call of UnmutePolicy
func (mr *MockAlertDataSourceMockRecorder) UnmutePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmutePolicy", reflect.TypeOf((*MockAlertDataSource)(nil).UnmutePolicy), arg0, arg1, arg2)
}

// UpdatePolicy mocks base method
func (m *MockAlertDataSource) UpdatePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID, arg3 kt.UserID, arg4 kt.PolicyUpdateBundle) (*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy
func (mr *MockAlertDataSourceMockRecorder) UpdatePolicy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockAlertDataSource)(nil).UpdatePolicy), arg0, arg1, arg2, arg3, arg4)
}

// UpdatePolicyTx mocks base method
func (m *MockAlertDataSource) UpdatePolicyTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.PolicyID, arg4 kt.UserID, arg5 kt.PolicyUpdateBundle) (*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicyTx", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicyTx indicates an expected call of UpdatePolicyTx
func (mr *MockAlertDataSourceMockRecorder) UpdatePolicyTx(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyTx", reflect.TypeOf((*MockAlertDataSource)(nil).UpdatePolicyTx), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateSavedFilter mocks base method
func (m *MockAlertDataSource) UpdateSavedFilter(arg0 context.Context, arg1 kt.Cid, arg2 kt.SavedFilterID, arg3 kt.SavedFilterUpdateBundle) (*kt.SavedFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSavedFilter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*kt.SavedFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSavedFilter indicates an expected call of UpdateSavedFilter
func (mr *MockAlertDataSourceMockRecorder) UpdateSavedFilter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSavedFilter", reflect.TypeOf((*MockAlertDataSource)(nil).UpdateSavedFilter), arg0, arg1, arg2, arg3)
}

// MockActivatorDataSource is a mock of ActivatorDataSource interface
type MockActivatorDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockActivatorDataSourceMockRecorder
}

// MockActivatorDataSourceMockRecorder is the mock recorder for MockActivatorDataSource
type MockActivatorDataSourceMockRecorder struct {
	mock *MockActivatorDataSource
}

// NewMockActivatorDataSource creates a new mock instance
func NewMockActivatorDataSource(ctrl *gomock.Controller) *MockActivatorDataSource {
	mock := &MockActivatorDataSource{ctrl: ctrl}
	mock.recorder = &MockActivatorDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActivatorDataSource) EXPECT() *MockActivatorDataSourceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockActivatorDataSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockActivatorDataSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockActivatorDataSource)(nil).Close))
}

// CreateThreshold mocks base method
func (m *MockActivatorDataSource) CreateThreshold(arg0 context.Context, arg1 *kt.Threshold) (*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThreshold", arg0, arg1)
	ret0, _ := ret[0].(*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThreshold indicates an expected call of CreateThreshold
func (mr *MockActivatorDataSourceMockRecorder) CreateThreshold(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThreshold", reflect.TypeOf((*MockActivatorDataSource)(nil).CreateThreshold), arg0, arg1)
}

// CreateThresholdTx mocks base method
func (m *MockActivatorDataSource) CreateThresholdTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 *kt.Threshold) (*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThresholdTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThresholdTx indicates an expected call of CreateThresholdTx
func (mr *MockActivatorDataSourceMockRecorder) CreateThresholdTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThresholdTx", reflect.TypeOf((*MockActivatorDataSource)(nil).CreateThresholdTx), arg0, arg1, arg2)
}

// DownloadBaseline mocks base method
func (m *MockActivatorDataSource) DownloadBaseline(arg0 kt.Cid, arg1 kt.PolicyID, arg2 time.Time) ([]*kt.BaselineValue, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBaseline", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.BaselineValue)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadBaseline indicates an expected call of DownloadBaseline
func (mr *MockActivatorDataSourceMockRecorder) DownloadBaseline(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBaseline", reflect.TypeOf((*MockActivatorDataSource)(nil).DownloadBaseline), arg0, arg1, arg2)
}

// FetchBackfillCompletionTimes mocks base method
func (m *MockActivatorDataSource) FetchBackfillCompletionTimes(arg0 kt.Cid, arg1 time.Time) (map[kt.PolicyID]time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBackfillCompletionTimes", arg0, arg1)
	ret0, _ := ret[0].(map[kt.PolicyID]time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBackfillCompletionTimes indicates an expected call of FetchBackfillCompletionTimes
func (mr *MockActivatorDataSourceMockRecorder) FetchBackfillCompletionTimes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBackfillCompletionTimes", reflect.TypeOf((*MockActivatorDataSource)(nil).FetchBackfillCompletionTimes), arg0, arg1)
}

// FetchMariaDBTableInfos mocks base method
func (m *MockActivatorDataSource) FetchMariaDBTableInfos() (map[string]kt.TableInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMariaDBTableInfos")
	ret0, _ := ret[0].(map[string]kt.TableInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMariaDBTableInfos indicates an expected call of FetchMariaDBTableInfos
func (mr *MockActivatorDataSourceMockRecorder) FetchMariaDBTableInfos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMariaDBTableInfos", reflect.TypeOf((*MockActivatorDataSource)(nil).FetchMariaDBTableInfos))
}

// FetchMariaDBTableOldestRowAges mocks base method
func (m *MockActivatorDataSource) FetchMariaDBTableOldestRowAges() (map[string]time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMariaDBTableOldestRowAges")
	ret0, _ := ret[0].(map[string]time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMariaDBTableOldestRowAges indicates an expected call of FetchMariaDBTableOldestRowAges
func (mr *MockActivatorDataSourceMockRecorder) FetchMariaDBTableOldestRowAges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMariaDBTableOldestRowAges", reflect.TypeOf((*MockActivatorDataSource)(nil).FetchMariaDBTableOldestRowAges))
}

// GetBaselineTableInfo mocks base method
func (m *MockActivatorDataSource) GetBaselineTableInfo() (kt.TableInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaselineTableInfo")
	ret0, _ := ret[0].(kt.TableInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaselineTableInfo indicates an expected call of GetBaselineTableInfo
func (mr *MockActivatorDataSourceMockRecorder) GetBaselineTableInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaselineTableInfo", reflect.TypeOf((*MockActivatorDataSource)(nil).GetBaselineTableInfo))
}

// GetBaselineTableRows mocks base method
func (m *MockActivatorDataSource) GetBaselineTableRows(arg0 kt.Cid, arg1 kt.PolicyID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaselineTableRows", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaselineTableRows indicates an expected call of GetBaselineTableRows
func (mr *MockActivatorDataSourceMockRecorder) GetBaselineTableRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaselineTableRows", reflect.TypeOf((*MockActivatorDataSource)(nil).GetBaselineTableRows), arg0, arg1)
}

// GetBaselineTableRowsByCompany mocks base method
func (m *MockActivatorDataSource) GetBaselineTableRowsByCompany() ([]kt.CidWithCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaselineTableRowsByCompany")
	ret0, _ := ret[0].([]kt.CidWithCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaselineTableRowsByCompany indicates an expected call of GetBaselineTableRowsByCompany
func (mr *MockActivatorDataSourceMockRecorder) GetBaselineTableRowsByCompany() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaselineTableRowsByCompany", reflect.TypeOf((*MockActivatorDataSource)(nil).GetBaselineTableRowsByCompany))
}

// GetDebugKeys mocks base method
func (m *MockActivatorDataSource) GetDebugKeys(arg0 kt.Cid, arg1 *kt.PolicyID, arg2 *kt.Tid) ([]kt.AlertingDebugKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebugKeys", arg0, arg1, arg2)
	ret0, _ := ret[0].([]kt.AlertingDebugKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebugKeys indicates an expected call of GetDebugKeys
func (mr *MockActivatorDataSourceMockRecorder) GetDebugKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebugKeys", reflect.TypeOf((*MockActivatorDataSource)(nil).GetDebugKeys), arg0, arg1, arg2)
}

// GetThresholdsForPolicies mocks base method
func (m *MockActivatorDataSource) GetThresholdsForPolicies(arg0 context.Context, arg1 kt.Cid, arg2 []kt.PolicyID) (map[kt.PolicyID][]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThresholdsForPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.PolicyID][]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThresholdsForPolicies indicates an expected call of GetThresholdsForPolicies
func (mr *MockActivatorDataSourceMockRecorder) GetThresholdsForPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThresholdsForPolicies", reflect.TypeOf((*MockActivatorDataSource)(nil).GetThresholdsForPolicies), arg0, arg1, arg2)
}

// GetThresholdsWithArchived mocks base method
func (m *MockActivatorDataSource) GetThresholdsWithArchived(arg0 context.Context, arg1 kt.Cid, arg2 []kt.Tid) (map[kt.Tid]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThresholdsWithArchived", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.Tid]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThresholdsWithArchived indicates an expected call of GetThresholdsWithArchived
func (mr *MockActivatorDataSourceMockRecorder) GetThresholdsWithArchived(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThresholdsWithArchived", reflect.TypeOf((*MockActivatorDataSource)(nil).GetThresholdsWithArchived), arg0, arg1, arg2)
}

// LoadAllActiveThresholdsForCompany mocks base method
func (m *MockActivatorDataSource) LoadAllActiveThresholdsForCompany(arg0 kt.Cid) (map[kt.Tid]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllActiveThresholdsForCompany", arg0)
	ret0, _ := ret[0].(map[kt.Tid]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllActiveThresholdsForCompany indicates an expected call of LoadAllActiveThresholdsForCompany
func (mr *MockActivatorDataSourceMockRecorder) LoadAllActiveThresholdsForCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllActiveThresholdsForCompany", reflect.TypeOf((*MockActivatorDataSource)(nil).LoadAllActiveThresholdsForCompany), arg0)
}

// LoadCachedActivationTimes mocks base method
func (m *MockActivatorDataSource) LoadCachedActivationTimes(arg0 kt.Cid, arg1 kt.PolicyID, arg2 time.Time) (map[kt.Tid]map[string][]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCachedActivationTimes", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.Tid]map[string][]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCachedActivationTimes indicates an expected call of LoadCachedActivationTimes
func (mr *MockActivatorDataSourceMockRecorder) LoadCachedActivationTimes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCachedActivationTimes", reflect.TypeOf((*MockActivatorDataSource)(nil).LoadCachedActivationTimes), arg0, arg1, arg2)
}

// LoadCompanyThreshold mocks base method
func (m *MockActivatorDataSource) LoadCompanyThreshold(arg0 kt.Cid, arg1 *time.Time, arg2 kt.PolicyID, arg3 string) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCompanyThreshold", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCompanyThreshold indicates an expected call of LoadCompanyThreshold
func (mr *MockActivatorDataSourceMockRecorder) LoadCompanyThreshold(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCompanyThreshold", reflect.TypeOf((*MockActivatorDataSource)(nil).LoadCompanyThreshold), arg0, arg1, arg2, arg3)
}

// LoadThresholdsBulk mocks base method
func (m *MockActivatorDataSource) LoadThresholdsBulk(arg0 context.Context, arg1 kt.Cid, arg2 []kt.ThresholdStatus, arg3 []kt.PolicyID) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadThresholdsBulk", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadThresholdsBulk indicates an expected call of LoadThresholdsBulk
func (mr *MockActivatorDataSourceMockRecorder) LoadThresholdsBulk(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadThresholdsBulk", reflect.TypeOf((*MockActivatorDataSource)(nil).LoadThresholdsBulk), arg0, arg1, arg2, arg3)
}

// TestBaseline mocks base method
func (m *MockActivatorDataSource) TestBaseline(arg0 string, arg1 kt.Cid, arg2 kt.PolicyID, arg3 time.Time) ([]*kt.BaselineValue, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestBaseline", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*kt.BaselineValue)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TestBaseline indicates an expected call of TestBaseline
func (mr *MockActivatorDataSourceMockRecorder) TestBaseline(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestBaseline", reflect.TypeOf((*MockActivatorDataSource)(nil).TestBaseline), arg0, arg1, arg2, arg3)
}

// UpdateThresholds mocks base method
func (m *MockActivatorDataSource) UpdateThresholds(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID, arg3, arg4 []*kt.Threshold) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThresholds", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThresholds indicates an expected call of UpdateThresholds
func (mr *MockActivatorDataSourceMockRecorder) UpdateThresholds(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThresholds", reflect.TypeOf((*MockActivatorDataSource)(nil).UpdateThresholds), arg0, arg1, arg2, arg3, arg4)
}

// UpdateThresholdsTx mocks base method
func (m *MockActivatorDataSource) UpdateThresholdsTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.PolicyID, arg4, arg5 []*kt.Threshold) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThresholdsTx", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThresholdsTx indicates an expected call of UpdateThresholdsTx
func (mr *MockActivatorDataSourceMockRecorder) UpdateThresholdsTx(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThresholdsTx", reflect.TypeOf((*MockActivatorDataSource)(nil).UpdateThresholdsTx), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UploadBaseline mocks base method
func (m *MockActivatorDataSource) UploadBaseline(arg0 kt.PolicyID, arg1 kt.Cid, arg2, arg3 time.Time, arg4, arg5, arg6 string, arg7, arg8 float64, arg9 int64, arg10, arg11, arg12, arg13, arg14 float64, arg15 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBaseline", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBaseline indicates an expected call of UploadBaseline
func (mr *MockActivatorDataSourceMockRecorder) UploadBaseline(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBaseline", reflect.TypeOf((*MockActivatorDataSource)(nil).UploadBaseline), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
}

// MockBatchingAlarmDataSource is a mock of BatchingAlarmDataSource interface
type MockBatchingAlarmDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockBatchingAlarmDataSourceMockRecorder
}

// MockBatchingAlarmDataSourceMockRecorder is the mock recorder for MockBatchingAlarmDataSource
type MockBatchingAlarmDataSourceMockRecorder struct {
	mock *MockBatchingAlarmDataSource
}

// NewMockBatchingAlarmDataSource creates a new mock instance
func NewMockBatchingAlarmDataSource(ctrl *gomock.Controller) *MockBatchingAlarmDataSource {
	mock := &MockBatchingAlarmDataSource{ctrl: ctrl}
	mock.recorder = &MockBatchingAlarmDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatchingAlarmDataSource) EXPECT() *MockBatchingAlarmDataSourceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockBatchingAlarmDataSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockBatchingAlarmDataSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBatchingAlarmDataSource)(nil).Close))
}

// GetAlarmEventsEscalating mocks base method
func (m *MockBatchingAlarmDataSource) GetAlarmEventsEscalating(arg0 kt.Cid, arg1 kt.PolicyID) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmEventsEscalating", arg0, arg1)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmEventsEscalating indicates an expected call of GetAlarmEventsEscalating
func (mr *MockBatchingAlarmDataSourceMockRecorder) GetAlarmEventsEscalating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmEventsEscalating", reflect.TypeOf((*MockBatchingAlarmDataSource)(nil).GetAlarmEventsEscalating), arg0, arg1)
}

// GetAlarmEventsStarting mocks base method
func (m *MockBatchingAlarmDataSource) GetAlarmEventsStarting(arg0 kt.Cid, arg1 kt.PolicyID) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmEventsStarting", arg0, arg1)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmEventsStarting indicates an expected call of GetAlarmEventsStarting
func (mr *MockBatchingAlarmDataSourceMockRecorder) GetAlarmEventsStarting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmEventsStarting", reflect.TypeOf((*MockBatchingAlarmDataSource)(nil).GetAlarmEventsStarting), arg0, arg1)
}

// GetAlarmEventsStopping mocks base method
func (m *MockBatchingAlarmDataSource) GetAlarmEventsStopping(arg0 kt.Cid, arg1 kt.PolicyID) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmEventsStopping", arg0, arg1)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmEventsStopping indicates an expected call of GetAlarmEventsStopping
func (mr *MockBatchingAlarmDataSourceMockRecorder) GetAlarmEventsStopping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmEventsStopping", reflect.TypeOf((*MockBatchingAlarmDataSource)(nil).GetAlarmEventsStopping), arg0, arg1)
}

// GetAlarmsSmallForPolicy mocks base method
func (m *MockBatchingAlarmDataSource) GetAlarmsSmallForPolicy(arg0 kt.Cid, arg1 kt.PolicyID) ([]kt.AlertAlarmSmall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmsSmallForPolicy", arg0, arg1)
	ret0, _ := ret[0].([]kt.AlertAlarmSmall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmsSmallForPolicy indicates an expected call of GetAlarmsSmallForPolicy
func (mr *MockBatchingAlarmDataSourceMockRecorder) GetAlarmsSmallForPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmsSmallForPolicy", reflect.TypeOf((*MockBatchingAlarmDataSource)(nil).GetAlarmsSmallForPolicy), arg0, arg1)
}

// InsertAlertMatchHistoryRows mocks base method
func (m *MockBatchingAlarmDataSource) InsertAlertMatchHistoryRows(arg0 []kt.AlertMatchHistoryRow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAlertMatchHistoryRows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAlertMatchHistoryRows indicates an expected call of InsertAlertMatchHistoryRows
func (mr *MockBatchingAlarmDataSourceMockRecorder) InsertAlertMatchHistoryRows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAlertMatchHistoryRows", reflect.TypeOf((*MockBatchingAlarmDataSource)(nil).InsertAlertMatchHistoryRows), arg0)
}

// RunAlarmStatementsBatch mocks base method
func (m *MockBatchingAlarmDataSource) RunAlarmStatementsBatch(arg0 []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAlarmStatementsBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunAlarmStatementsBatch indicates an expected call of RunAlarmStatementsBatch
func (mr *MockBatchingAlarmDataSourceMockRecorder) RunAlarmStatementsBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAlarmStatementsBatch", reflect.TypeOf((*MockBatchingAlarmDataSource)(nil).RunAlarmStatementsBatch), arg0)
}

// UpdateAlarmsNotifyEnd mocks base method
func (m *MockBatchingAlarmDataSource) UpdateAlarmsNotifyEnd(arg0 time.Time, arg1 kt.Cid, arg2 kt.PolicyID, arg3 ...kt.AlarmID) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAlarmsNotifyEnd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlarmsNotifyEnd indicates an expected call of UpdateAlarmsNotifyEnd
func (mr *MockBatchingAlarmDataSourceMockRecorder) UpdateAlarmsNotifyEnd(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlarmsNotifyEnd", reflect.TypeOf((*MockBatchingAlarmDataSource)(nil).UpdateAlarmsNotifyEnd), varargs...)
}

// UpdateAlarmsNotifyStart mocks base method
func (m *MockBatchingAlarmDataSource) UpdateAlarmsNotifyStart(arg0 time.Time, arg1 kt.Cid, arg2 kt.PolicyID, arg3 ...kt.AlarmID) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAlarmsNotifyStart", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlarmsNotifyStart indicates an expected call of UpdateAlarmsNotifyStart
func (mr *MockBatchingAlarmDataSourceMockRecorder) UpdateAlarmsNotifyStart(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlarmsNotifyStart", reflect.TypeOf((*MockBatchingAlarmDataSource)(nil).UpdateAlarmsNotifyStart), varargs...)
}

// MockMitigateDataSource is a mock of MitigateDataSource interface
type MockMitigateDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockMitigateDataSourceMockRecorder
}

// MockMitigateDataSourceMockRecorder is the mock recorder for MockMitigateDataSource
type MockMitigateDataSourceMockRecorder struct {
	mock *MockMitigateDataSource
}

// NewMockMitigateDataSource creates a new mock instance
func NewMockMitigateDataSource(ctrl *gomock.Controller) *MockMitigateDataSource {
	mock := &MockMitigateDataSource{ctrl: ctrl}
	mock.recorder = &MockMitigateDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMitigateDataSource) EXPECT() *MockMitigateDataSourceMockRecorder {
	return m.recorder
}

// AssociateMethodsWithPlatformTx mocks base method
func (m *MockMitigateDataSource) AssociateMethodsWithPlatformTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.MitigationPlatformID, arg4 []kt.MitigationMethodID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMethodsWithPlatformTx", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateMethodsWithPlatformTx indicates an expected call of AssociateMethodsWithPlatformTx
func (mr *MockMitigateDataSourceMockRecorder) AssociateMethodsWithPlatformTx(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMethodsWithPlatformTx", reflect.TypeOf((*MockMitigateDataSource)(nil).AssociateMethodsWithPlatformTx), arg0, arg1, arg2, arg3, arg4)
}

// Close mocks base method
func (m *MockMitigateDataSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockMitigateDataSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMitigateDataSource)(nil).Close))
}

// CreateMethodTx mocks base method
func (m *MockMitigateDataSource) CreateMethodTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.MethodUpdateBundle) (*kt.MitigationMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMethodTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*kt.MitigationMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMethodTx indicates an expected call of CreateMethodTx
func (mr *MockMitigateDataSourceMockRecorder) CreateMethodTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMethodTx", reflect.TypeOf((*MockMitigateDataSource)(nil).CreateMethodTx), arg0, arg1, arg2, arg3)
}

// CreatePlatformTx mocks base method
func (m *MockMitigateDataSource) CreatePlatformTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.PlatformUpdateBundle) (*kt.MitigationPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatformTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*kt.MitigationPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlatformTx indicates an expected call of CreatePlatformTx
func (mr *MockMitigateDataSourceMockRecorder) CreatePlatformTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatformTx", reflect.TypeOf((*MockMitigateDataSource)(nil).CreatePlatformTx), arg0, arg1, arg2, arg3)
}

// CreateThresholdMitigations mocks base method
func (m *MockMitigateDataSource) CreateThresholdMitigations(arg0 context.Context, arg1 kt.Cid, arg2 []*kt.ThresholdMitigationShort) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThresholdMitigations", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateThresholdMitigations indicates an expected call of CreateThresholdMitigations
func (mr *MockMitigateDataSourceMockRecorder) CreateThresholdMitigations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThresholdMitigations", reflect.TypeOf((*MockMitigateDataSource)(nil).CreateThresholdMitigations), arg0, arg1, arg2)
}

// CreateThresholdMitigationsTx mocks base method
func (m *MockMitigateDataSource) CreateThresholdMitigationsTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 []*kt.ThresholdMitigationShort) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThresholdMitigationsTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateThresholdMitigationsTx indicates an expected call of CreateThresholdMitigationsTx
func (mr *MockMitigateDataSourceMockRecorder) CreateThresholdMitigationsTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThresholdMitigationsTx", reflect.TypeOf((*MockMitigateDataSource)(nil).CreateThresholdMitigationsTx), arg0, arg1, arg2, arg3)
}

// DeleteMethod mocks base method
func (m *MockMitigateDataSource) DeleteMethod(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationMethodID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMethod", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMethod indicates an expected call of DeleteMethod
func (mr *MockMitigateDataSourceMockRecorder) DeleteMethod(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMethod", reflect.TypeOf((*MockMitigateDataSource)(nil).DeleteMethod), arg0, arg1, arg2)
}

// DeletePlatform mocks base method
func (m *MockMitigateDataSource) DeletePlatform(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationPlatformID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlatform", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlatform indicates an expected call of DeletePlatform
func (mr *MockMitigateDataSourceMockRecorder) DeletePlatform(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlatform", reflect.TypeOf((*MockMitigateDataSource)(nil).DeletePlatform), arg0, arg1, arg2)
}

// FindMethodsWithCount mocks base method
func (m *MockMitigateDataSource) FindMethodsWithCount(arg0 context.Context, arg1 *kt.FindMitigationMethodsFilter) ([]*kt.MitigationMethodWithNotifChans, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMethodsWithCount", arg0, arg1)
	ret0, _ := ret[0].([]*kt.MitigationMethodWithNotifChans)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindMethodsWithCount indicates an expected call of FindMethodsWithCount
func (mr *MockMitigateDataSourceMockRecorder) FindMethodsWithCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMethodsWithCount", reflect.TypeOf((*MockMitigateDataSource)(nil).FindMethodsWithCount), arg0, arg1)
}

// FindMitigationsWithCount mocks base method
func (m *MockMitigateDataSource) FindMitigationsWithCount(arg0 context.Context, arg1 *kt.FindMitigationsFilter) ([]*kt.MitigationRepr, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMitigationsWithCount", arg0, arg1)
	ret0, _ := ret[0].([]*kt.MitigationRepr)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindMitigationsWithCount indicates an expected call of FindMitigationsWithCount
func (mr *MockMitigateDataSourceMockRecorder) FindMitigationsWithCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMitigationsWithCount", reflect.TypeOf((*MockMitigateDataSource)(nil).FindMitigationsWithCount), arg0, arg1)
}

// FindPlatformsWithCount mocks base method
func (m *MockMitigateDataSource) FindPlatformsWithCount(arg0 context.Context, arg1 *kt.FindMitigationPlatformsFilter) ([]*kt.MitigationPlatform, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlatformsWithCount", arg0, arg1)
	ret0, _ := ret[0].([]*kt.MitigationPlatform)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPlatformsWithCount indicates an expected call of FindPlatformsWithCount
func (mr *MockMitigateDataSourceMockRecorder) FindPlatformsWithCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlatformsWithCount", reflect.TypeOf((*MockMitigateDataSource)(nil).FindPlatformsWithCount), arg0, arg1)
}

// GetAllMethods mocks base method
func (m *MockMitigateDataSource) GetAllMethods(arg0 kt.Cid) ([]*kt.MitigationMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMethods", arg0)
	ret0, _ := ret[0].([]*kt.MitigationMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMethods indicates an expected call of GetAllMethods
func (mr *MockMitigateDataSourceMockRecorder) GetAllMethods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMethods", reflect.TypeOf((*MockMitigateDataSource)(nil).GetAllMethods), arg0)
}

// GetAllPlatforms mocks base method
func (m *MockMitigateDataSource) GetAllPlatforms(arg0 kt.Cid) ([]*kt.MitigationPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlatforms", arg0)
	ret0, _ := ret[0].([]*kt.MitigationPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPlatforms indicates an expected call of GetAllPlatforms
func (mr *MockMitigateDataSourceMockRecorder) GetAllPlatforms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlatforms", reflect.TypeOf((*MockMitigateDataSource)(nil).GetAllPlatforms), arg0)
}

// GetAssociatedMethods mocks base method
func (m *MockMitigateDataSource) GetAssociatedMethods(arg0 context.Context, arg1 kt.Cid, arg2 []kt.MitigationPlatformID) (map[kt.MitigationPlatformID][]kt.MitigationMethodID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssociatedMethods", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.MitigationPlatformID][]kt.MitigationMethodID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssociatedMethods indicates an expected call of GetAssociatedMethods
func (mr *MockMitigateDataSourceMockRecorder) GetAssociatedMethods(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssociatedMethods", reflect.TypeOf((*MockMitigateDataSource)(nil).GetAssociatedMethods), arg0, arg1, arg2)
}

// GetCompaniesWithActiveMitigations mocks base method
func (m *MockMitigateDataSource) GetCompaniesWithActiveMitigations(arg0 context.Context) ([]kt.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompaniesWithActiveMitigations", arg0)
	ret0, _ := ret[0].([]kt.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompaniesWithActiveMitigations indicates an expected call of GetCompaniesWithActiveMitigations
func (mr *MockMitigateDataSourceMockRecorder) GetCompaniesWithActiveMitigations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompaniesWithActiveMitigations", reflect.TypeOf((*MockMitigateDataSource)(nil).GetCompaniesWithActiveMitigations), arg0)
}

// GetCurrentFlowspecCalls mocks base method
func (m *MockMitigateDataSource) GetCurrentFlowspecCalls(arg0 kt.Cid) ([]*flowspec.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentFlowspecCalls", arg0)
	ret0, _ := ret[0].([]*flowspec.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentFlowspecCalls indicates an expected call of GetCurrentFlowspecCalls
func (mr *MockMitigateDataSourceMockRecorder) GetCurrentFlowspecCalls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentFlowspecCalls", reflect.TypeOf((*MockMitigateDataSource)(nil).GetCurrentFlowspecCalls), arg0)
}

// GetCurrentRTBHCalls mocks base method
func (m *MockMitigateDataSource) GetCurrentRTBHCalls(arg0 kt.Cid) ([]*kt.RTBHCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRTBHCalls", arg0)
	ret0, _ := ret[0].([]*kt.RTBHCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentRTBHCalls indicates an expected call of GetCurrentRTBHCalls
func (mr *MockMitigateDataSourceMockRecorder) GetCurrentRTBHCalls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRTBHCalls", reflect.TypeOf((*MockMitigateDataSource)(nil).GetCurrentRTBHCalls), arg0)
}

// GetDevicesAndBGPAddrs mocks base method
func (m *MockMitigateDataSource) GetDevicesAndBGPAddrs(arg0 kt.Cid) (map[kt.DeviceID]kt.DeviceProxyBGPPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesAndBGPAddrs", arg0)
	ret0, _ := ret[0].(map[kt.DeviceID]kt.DeviceProxyBGPPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicesAndBGPAddrs indicates an expected call of GetDevicesAndBGPAddrs
func (mr *MockMitigateDataSourceMockRecorder) GetDevicesAndBGPAddrs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesAndBGPAddrs", reflect.TypeOf((*MockMitigateDataSource)(nil).GetDevicesAndBGPAddrs), arg0)
}

// GetMethod mocks base method
func (m *MockMitigateDataSource) GetMethod(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationMethodID) (*kt.MitigationMethodWithNotifChans, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMethod", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.MitigationMethodWithNotifChans)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethod indicates an expected call of GetMethod
func (mr *MockMitigateDataSourceMockRecorder) GetMethod(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethod", reflect.TypeOf((*MockMitigateDataSource)(nil).GetMethod), arg0, arg1, arg2)
}

// GetMitigation mocks base method
func (m *MockMitigateDataSource) GetMitigation(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationID) (*kt.MitigationRepr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.MitigationRepr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigation indicates an expected call of GetMitigation
func (mr *MockMitigateDataSourceMockRecorder) GetMitigation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigation", reflect.TypeOf((*MockMitigateDataSource)(nil).GetMitigation), arg0, arg1, arg2)
}

// GetMitigationBulk mocks base method
func (m *MockMitigateDataSource) GetMitigationBulk(arg0 context.Context, arg1 kt.Cid, arg2 []kt.MitigationID) (map[kt.MitigationID]*kt.MitigationRepr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationBulk", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.MitigationID]*kt.MitigationRepr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationBulk indicates an expected call of GetMitigationBulk
func (mr *MockMitigateDataSourceMockRecorder) GetMitigationBulk(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationBulk", reflect.TypeOf((*MockMitigateDataSource)(nil).GetMitigationBulk), arg0, arg1, arg2)
}

// GetMitigationHistoryV2 mocks base method
func (m *MockMitigateDataSource) GetMitigationHistoryV2(arg0 kt.Cid, arg1 *kt.MitigationHistoryRequest) ([]kt.MitigationHistoryEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationHistoryV2", arg0, arg1)
	ret0, _ := ret[0].([]kt.MitigationHistoryEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationHistoryV2 indicates an expected call of GetMitigationHistoryV2
func (mr *MockMitigateDataSourceMockRecorder) GetMitigationHistoryV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationHistoryV2", reflect.TypeOf((*MockMitigateDataSource)(nil).GetMitigationHistoryV2), arg0, arg1)
}

// GetMitigationHistoryV2Count mocks base method
func (m *MockMitigateDataSource) GetMitigationHistoryV2Count(arg0 kt.Cid, arg1 *kt.MitigationHistoryRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationHistoryV2Count", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationHistoryV2Count indicates an expected call of GetMitigationHistoryV2Count
func (mr *MockMitigateDataSourceMockRecorder) GetMitigationHistoryV2Count(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationHistoryV2Count", reflect.TypeOf((*MockMitigateDataSource)(nil).GetMitigationHistoryV2Count), arg0, arg1)
}

// GetMitigationHistoryV2EndWaitCount mocks base method
func (m *MockMitigateDataSource) GetMitigationHistoryV2EndWaitCount(arg0 kt.Cid, arg1 *kt.MitigationHistoryRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationHistoryV2EndWaitCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationHistoryV2EndWaitCount indicates an expected call of GetMitigationHistoryV2EndWaitCount
func (mr *MockMitigateDataSourceMockRecorder) GetMitigationHistoryV2EndWaitCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationHistoryV2EndWaitCount", reflect.TypeOf((*MockMitigateDataSource)(nil).GetMitigationHistoryV2EndWaitCount), arg0, arg1)
}

// GetMitigationMethods mocks base method
func (m *MockMitigateDataSource) GetMitigationMethods(arg0 context.Context, arg1 kt.Cid, arg2 []kt.MitigationMethodID) (map[kt.MitigationMethodID]*kt.MitigationMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationMethods", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.MitigationMethodID]*kt.MitigationMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationMethods indicates an expected call of GetMitigationMethods
func (mr *MockMitigateDataSourceMockRecorder) GetMitigationMethods(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationMethods", reflect.TypeOf((*MockMitigateDataSource)(nil).GetMitigationMethods), arg0, arg1, arg2)
}

// GetMitigationPlatforms mocks base method
func (m *MockMitigateDataSource) GetMitigationPlatforms(arg0 context.Context, arg1 kt.Cid, arg2 []kt.MitigationPlatformID) (map[kt.MitigationPlatformID]*kt.MitigationPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationPlatforms", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.MitigationPlatformID]*kt.MitigationPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationPlatforms indicates an expected call of GetMitigationPlatforms
func (mr *MockMitigateDataSourceMockRecorder) GetMitigationPlatforms(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationPlatforms", reflect.TypeOf((*MockMitigateDataSource)(nil).GetMitigationPlatforms), arg0, arg1, arg2)
}

// GetNextMitigationID mocks base method
func (m *MockMitigateDataSource) GetNextMitigationID(arg0 kt.Cid) (kt.MitigationID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextMitigationID", arg0)
	ret0, _ := ret[0].(kt.MitigationID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextMitigationID indicates an expected call of GetNextMitigationID
func (mr *MockMitigateDataSourceMockRecorder) GetNextMitigationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextMitigationID", reflect.TypeOf((*MockMitigateDataSource)(nil).GetNextMitigationID), arg0)
}

// GetPlatform mocks base method
func (m *MockMitigateDataSource) GetPlatform(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationPlatformID) (*kt.MitigationPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatform", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.MitigationPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatform indicates an expected call of GetPlatform
func (mr *MockMitigateDataSourceMockRecorder) GetPlatform(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatform", reflect.TypeOf((*MockMitigateDataSource)(nil).GetPlatform), arg0, arg1, arg2)
}

// GetPlatformMethodPairsBulk mocks base method
func (m *MockMitigateDataSource) GetPlatformMethodPairsBulk(arg0 context.Context, arg1 kt.Cid, arg2 []kt.MitigationPlatformID, arg3 []kt.MitigationMethodID) (map[kt.PlatMethodIDTuple]*kt.MitigationPlatformMethodPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformMethodPairsBulk", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[kt.PlatMethodIDTuple]*kt.MitigationPlatformMethodPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformMethodPairsBulk indicates an expected call of GetPlatformMethodPairsBulk
func (mr *MockMitigateDataSourceMockRecorder) GetPlatformMethodPairsBulk(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformMethodPairsBulk", reflect.TypeOf((*MockMitigateDataSource)(nil).GetPlatformMethodPairsBulk), arg0, arg1, arg2, arg3)
}

// GetStateMachineStore mocks base method
func (m *MockMitigateDataSource) GetStateMachineStore(arg0 kt.Cid) state.MachineStoreAndEventListener {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateMachineStore", arg0)
	ret0, _ := ret[0].(state.MachineStoreAndEventListener)
	return ret0
}

// GetStateMachineStore indicates an expected call of GetStateMachineStore
func (mr *MockMitigateDataSourceMockRecorder) GetStateMachineStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateMachineStore", reflect.TypeOf((*MockMitigateDataSource)(nil).GetStateMachineStore), arg0)
}

// GetThresholdMitigations mocks base method
func (m *MockMitigateDataSource) GetThresholdMitigations(arg0 context.Context, arg1 kt.Cid, arg2 []kt.Tid) (map[kt.Tid][]*kt.ThresholdMitigationWithIDs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThresholdMitigations", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.Tid][]*kt.ThresholdMitigationWithIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThresholdMitigations indicates an expected call of GetThresholdMitigations
func (mr *MockMitigateDataSourceMockRecorder) GetThresholdMitigations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThresholdMitigations", reflect.TypeOf((*MockMitigateDataSource)(nil).GetThresholdMitigations), arg0, arg1, arg2)
}

// GetTotalMitigations mocks base method
func (m *MockMitigateDataSource) GetTotalMitigations() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalMitigations")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalMitigations indicates an expected call of GetTotalMitigations
func (mr *MockMitigateDataSourceMockRecorder) GetTotalMitigations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalMitigations", reflect.TypeOf((*MockMitigateDataSource)(nil).GetTotalMitigations))
}

// Load mocks base method
func (m *MockMitigateDataSource) Load(arg0 kt.Cid, arg1 kt.Tid) ([]*kt.ThresholdMitigation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].([]*kt.ThresholdMitigation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockMitigateDataSourceMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockMitigateDataSource)(nil).Load), arg0, arg1)
}

// LoadBulk mocks base method
func (m *MockMitigateDataSource) LoadBulk(arg0 kt.Cid, arg1 []kt.Tid) ([]*kt.ThresholdMitigation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBulk", arg0, arg1)
	ret0, _ := ret[0].([]*kt.ThresholdMitigation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadBulk indicates an expected call of LoadBulk
func (mr *MockMitigateDataSourceMockRecorder) LoadBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBulk", reflect.TypeOf((*MockMitigateDataSource)(nil).LoadBulk), arg0, arg1)
}

// MarkFlowspecAnnounceForDevices mocks base method
func (m *MockMitigateDataSource) MarkFlowspecAnnounceForDevices(arg0 kt.Cid, arg1 *kt.DeviceIDSet, arg2 string, arg3 []byte, arg4 kt.MitigationPlatformID, arg5 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFlowspecAnnounceForDevices", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFlowspecAnnounceForDevices indicates an expected call of MarkFlowspecAnnounceForDevices
func (mr *MockMitigateDataSourceMockRecorder) MarkFlowspecAnnounceForDevices(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFlowspecAnnounceForDevices", reflect.TypeOf((*MockMitigateDataSource)(nil).MarkFlowspecAnnounceForDevices), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MarkFlowspecWithdrawForDevices mocks base method
func (m *MockMitigateDataSource) MarkFlowspecWithdrawForDevices(arg0 kt.Cid, arg1 *kt.DeviceIDSet, arg2 string, arg3 []byte, arg4 kt.MitigationPlatformID, arg5 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFlowspecWithdrawForDevices", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFlowspecWithdrawForDevices indicates an expected call of MarkFlowspecWithdrawForDevices
func (mr *MockMitigateDataSourceMockRecorder) MarkFlowspecWithdrawForDevices(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFlowspecWithdrawForDevices", reflect.TypeOf((*MockMitigateDataSource)(nil).MarkFlowspecWithdrawForDevices), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MarkRTBHAnnounceForDevices mocks base method
func (m *MockMitigateDataSource) MarkRTBHAnnounceForDevices(arg0 kt.Cid, arg1 *kt.DeviceIDSet, arg2 string, arg3 []byte, arg4 kt.MitigationPlatformID, arg5 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRTBHAnnounceForDevices", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRTBHAnnounceForDevices indicates an expected call of MarkRTBHAnnounceForDevices
func (mr *MockMitigateDataSourceMockRecorder) MarkRTBHAnnounceForDevices(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRTBHAnnounceForDevices", reflect.TypeOf((*MockMitigateDataSource)(nil).MarkRTBHAnnounceForDevices), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MarkRTBHWithdrawForDevices mocks base method
func (m *MockMitigateDataSource) MarkRTBHWithdrawForDevices(arg0 kt.Cid, arg1 *kt.DeviceIDSet, arg2 string, arg3 []byte, arg4 kt.MitigationPlatformID, arg5 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRTBHWithdrawForDevices", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRTBHWithdrawForDevices indicates an expected call of MarkRTBHWithdrawForDevices
func (mr *MockMitigateDataSourceMockRecorder) MarkRTBHWithdrawForDevices(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRTBHWithdrawForDevices", reflect.TypeOf((*MockMitigateDataSource)(nil).MarkRTBHWithdrawForDevices), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SetNextMitigationID mocks base method
func (m *MockMitigateDataSource) SetNextMitigationID(arg0 kt.Cid, arg1 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNextMitigationID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNextMitigationID indicates an expected call of SetNextMitigationID
func (mr *MockMitigateDataSourceMockRecorder) SetNextMitigationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextMitigationID", reflect.TypeOf((*MockMitigateDataSource)(nil).SetNextMitigationID), arg0, arg1)
}

// UpdateMethodTx mocks base method
func (m *MockMitigateDataSource) UpdateMethodTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.MitigationMethodID, arg4 kt.MethodUpdateBundle) (*kt.MitigationMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMethodTx", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*kt.MitigationMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMethodTx indicates an expected call of UpdateMethodTx
func (mr *MockMitigateDataSourceMockRecorder) UpdateMethodTx(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMethodTx", reflect.TypeOf((*MockMitigateDataSource)(nil).UpdateMethodTx), arg0, arg1, arg2, arg3, arg4)
}

// UpdateNotificationChannelsToMethodAssociationTx mocks base method
func (m *MockMitigateDataSource) UpdateNotificationChannelsToMethodAssociationTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.MitigationMethodID, arg4 []uint64, arg5 kt.NotifChannelsWrapped) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationChannelsToMethodAssociationTx", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationChannelsToMethodAssociationTx indicates an expected call of UpdateNotificationChannelsToMethodAssociationTx
func (mr *MockMitigateDataSourceMockRecorder) UpdateNotificationChannelsToMethodAssociationTx(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationChannelsToMethodAssociationTx", reflect.TypeOf((*MockMitigateDataSource)(nil).UpdateNotificationChannelsToMethodAssociationTx), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdatePlatformTx mocks base method
func (m *MockMitigateDataSource) UpdatePlatformTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.MitigationPlatformID, arg4 kt.PlatformUpdateBundle) (*kt.MitigationPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlatformTx", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*kt.MitigationPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlatformTx indicates an expected call of UpdatePlatformTx
func (mr *MockMitigateDataSourceMockRecorder) UpdatePlatformTx(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlatformTx", reflect.TypeOf((*MockMitigateDataSource)(nil).UpdatePlatformTx), arg0, arg1, arg2, arg3, arg4)
}

// ValidateNotificationChannels mocks base method
func (m *MockMitigateDataSource) ValidateNotificationChannels(arg0 context.Context, arg1 kt.Cid, arg2 []uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNotificationChannels", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateNotificationChannels indicates an expected call of ValidateNotificationChannels
func (mr *MockMitigateDataSourceMockRecorder) ValidateNotificationChannels(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNotificationChannels", reflect.TypeOf((*MockMitigateDataSource)(nil).ValidateNotificationChannels), arg0, arg1, arg2)
}

// ValidatePlatformMethodPair mocks base method
func (m *MockMitigateDataSource) ValidatePlatformMethodPair(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationPlatformID, arg3 kt.MitigationMethodID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePlatformMethodPair", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePlatformMethodPair indicates an expected call of ValidatePlatformMethodPair
func (mr *MockMitigateDataSourceMockRecorder) ValidatePlatformMethodPair(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePlatformMethodPair", reflect.TypeOf((*MockMitigateDataSource)(nil).ValidatePlatformMethodPair), arg0, arg1, arg2, arg3)
}

// MockThresholdDataSource is a mock of ThresholdDataSource interface
type MockThresholdDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockThresholdDataSourceMockRecorder
}

// MockThresholdDataSourceMockRecorder is the mock recorder for MockThresholdDataSource
type MockThresholdDataSourceMockRecorder struct {
	mock *MockThresholdDataSource
}

// NewMockThresholdDataSource creates a new mock instance
func NewMockThresholdDataSource(ctrl *gomock.Controller) *MockThresholdDataSource {
	mock := &MockThresholdDataSource{ctrl: ctrl}
	mock.recorder = &MockThresholdDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockThresholdDataSource) EXPECT() *MockThresholdDataSourceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockThresholdDataSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockThresholdDataSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockThresholdDataSource)(nil).Close))
}

// CreateThreshold mocks base method
func (m *MockThresholdDataSource) CreateThreshold(arg0 context.Context, arg1 *kt.Threshold) (*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThreshold", arg0, arg1)
	ret0, _ := ret[0].(*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThreshold indicates an expected call of CreateThreshold
func (mr *MockThresholdDataSourceMockRecorder) CreateThreshold(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThreshold", reflect.TypeOf((*MockThresholdDataSource)(nil).CreateThreshold), arg0, arg1)
}

// CreateThresholdTx mocks base method
func (m *MockThresholdDataSource) CreateThresholdTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 *kt.Threshold) (*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThresholdTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThresholdTx indicates an expected call of CreateThresholdTx
func (mr *MockThresholdDataSourceMockRecorder) CreateThresholdTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThresholdTx", reflect.TypeOf((*MockThresholdDataSource)(nil).CreateThresholdTx), arg0, arg1, arg2)
}

// GetThresholdsForPolicies mocks base method
func (m *MockThresholdDataSource) GetThresholdsForPolicies(arg0 context.Context, arg1 kt.Cid, arg2 []kt.PolicyID) (map[kt.PolicyID][]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThresholdsForPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.PolicyID][]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThresholdsForPolicies indicates an expected call of GetThresholdsForPolicies
func (mr *MockThresholdDataSourceMockRecorder) GetThresholdsForPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThresholdsForPolicies", reflect.TypeOf((*MockThresholdDataSource)(nil).GetThresholdsForPolicies), arg0, arg1, arg2)
}

// GetThresholdsWithArchived mocks base method
func (m *MockThresholdDataSource) GetThresholdsWithArchived(arg0 context.Context, arg1 kt.Cid, arg2 []kt.Tid) (map[kt.Tid]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThresholdsWithArchived", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.Tid]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThresholdsWithArchived indicates an expected call of GetThresholdsWithArchived
func (mr *MockThresholdDataSourceMockRecorder) GetThresholdsWithArchived(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThresholdsWithArchived", reflect.TypeOf((*MockThresholdDataSource)(nil).GetThresholdsWithArchived), arg0, arg1, arg2)
}

// LoadAllActiveThresholdsForCompany mocks base method
func (m *MockThresholdDataSource) LoadAllActiveThresholdsForCompany(arg0 kt.Cid) (map[kt.Tid]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllActiveThresholdsForCompany", arg0)
	ret0, _ := ret[0].(map[kt.Tid]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllActiveThresholdsForCompany indicates an expected call of LoadAllActiveThresholdsForCompany
func (mr *MockThresholdDataSourceMockRecorder) LoadAllActiveThresholdsForCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllActiveThresholdsForCompany", reflect.TypeOf((*MockThresholdDataSource)(nil).LoadAllActiveThresholdsForCompany), arg0)
}

// LoadCompanyThreshold mocks base method
func (m *MockThresholdDataSource) LoadCompanyThreshold(arg0 kt.Cid, arg1 *time.Time, arg2 kt.PolicyID, arg3 string) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCompanyThreshold", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCompanyThreshold indicates an expected call of LoadCompanyThreshold
func (mr *MockThresholdDataSourceMockRecorder) LoadCompanyThreshold(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCompanyThreshold", reflect.TypeOf((*MockThresholdDataSource)(nil).LoadCompanyThreshold), arg0, arg1, arg2, arg3)
}

// LoadThresholdsBulk mocks base method
func (m *MockThresholdDataSource) LoadThresholdsBulk(arg0 context.Context, arg1 kt.Cid, arg2 []kt.ThresholdStatus, arg3 []kt.PolicyID) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadThresholdsBulk", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadThresholdsBulk indicates an expected call of LoadThresholdsBulk
func (mr *MockThresholdDataSourceMockRecorder) LoadThresholdsBulk(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadThresholdsBulk", reflect.TypeOf((*MockThresholdDataSource)(nil).LoadThresholdsBulk), arg0, arg1, arg2, arg3)
}

// UpdateThresholds mocks base method
func (m *MockThresholdDataSource) UpdateThresholds(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID, arg3, arg4 []*kt.Threshold) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThresholds", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThresholds indicates an expected call of UpdateThresholds
func (mr *MockThresholdDataSourceMockRecorder) UpdateThresholds(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThresholds", reflect.TypeOf((*MockThresholdDataSource)(nil).UpdateThresholds), arg0, arg1, arg2, arg3, arg4)
}

// UpdateThresholdsTx mocks base method
func (m *MockThresholdDataSource) UpdateThresholdsTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.PolicyID, arg4, arg5 []*kt.Threshold) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThresholdsTx", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThresholdsTx indicates an expected call of UpdateThresholdsTx
func (mr *MockThresholdDataSourceMockRecorder) UpdateThresholdsTx(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThresholdsTx", reflect.TypeOf((*MockThresholdDataSource)(nil).UpdateThresholdsTx), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockDataSource is a mock of DataSource interface
type MockDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceMockRecorder
}

// MockDataSourceMockRecorder is the mock recorder for MockDataSource
type MockDataSourceMockRecorder struct {
	mock *MockDataSource
}

// NewMockDataSource creates a new mock instance
func NewMockDataSource(ctrl *gomock.Controller) *MockDataSource {
	mock := &MockDataSource{ctrl: ctrl}
	mock.recorder = &MockDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataSource) EXPECT() *MockDataSourceMockRecorder {
	return m.recorder
}

// AckAlarmCurrent mocks base method
func (m *MockDataSource) AckAlarmCurrent(arg0 context.Context, arg1 *kt.AlarmEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckAlarmCurrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckAlarmCurrent indicates an expected call of AckAlarmCurrent
func (mr *MockDataSourceMockRecorder) AckAlarmCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckAlarmCurrent", reflect.TypeOf((*MockDataSource)(nil).AckAlarmCurrent), arg0, arg1)
}

// AckAlarmHistory mocks base method
func (m *MockDataSource) AckAlarmHistory(arg0 context.Context, arg1 *kt.AlarmEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckAlarmHistory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckAlarmHistory indicates an expected call of AckAlarmHistory
func (mr *MockDataSourceMockRecorder) AckAlarmHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckAlarmHistory", reflect.TypeOf((*MockDataSource)(nil).AckAlarmHistory), arg0, arg1)
}

// AddSelectedDevicesToPolicies mocks base method
func (m *MockDataSource) AddSelectedDevicesToPolicies(arg0 context.Context, arg1 kt.Cid, arg2 map[kt.PolicyID]*kt.AlertPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSelectedDevicesToPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSelectedDevicesToPolicies indicates an expected call of AddSelectedDevicesToPolicies
func (mr *MockDataSourceMockRecorder) AddSelectedDevicesToPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSelectedDevicesToPolicies", reflect.TypeOf((*MockDataSource)(nil).AddSelectedDevicesToPolicies), arg0, arg1, arg2)
}

// AllPoliciesExist mocks base method
func (m *MockDataSource) AllPoliciesExist(arg0 context.Context, arg1 kt.Cid, arg2 []kt.PolicyID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllPoliciesExist", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllPoliciesExist indicates an expected call of AllPoliciesExist
func (mr *MockDataSourceMockRecorder) AllPoliciesExist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllPoliciesExist", reflect.TypeOf((*MockDataSource)(nil).AllPoliciesExist), arg0, arg1, arg2)
}

// AppendHostPoolEntry mocks base method
func (m *MockDataSource) AppendHostPoolEntry(arg0 *conductor.HostPoolEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendHostPoolEntry", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendHostPoolEntry indicates an expected call of AppendHostPoolEntry
func (mr *MockDataSourceMockRecorder) AppendHostPoolEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendHostPoolEntry", reflect.TypeOf((*MockDataSource)(nil).AppendHostPoolEntry), arg0)
}

// AppendPipelines mocks base method
func (m *MockDataSource) AppendPipelines(arg0 []*conductor.PipelineRow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendPipelines", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendPipelines indicates an expected call of AppendPipelines
func (mr *MockDataSourceMockRecorder) AppendPipelines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendPipelines", reflect.TypeOf((*MockDataSource)(nil).AppendPipelines), arg0)
}

// AppendServices mocks base method
func (m *MockDataSource) AppendServices(arg0 []*conductor.ClusterServiceRow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendServices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendServices indicates an expected call of AppendServices
func (mr *MockDataSourceMockRecorder) AppendServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendServices", reflect.TypeOf((*MockDataSource)(nil).AppendServices), arg0)
}

// AssociateAlarmWithMitigation mocks base method
func (m *MockDataSource) AssociateAlarmWithMitigation(arg0 kt.Cid, arg1 kt.AlarmID, arg2 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAlarmWithMitigation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateAlarmWithMitigation indicates an expected call of AssociateAlarmWithMitigation
func (mr *MockDataSourceMockRecorder) AssociateAlarmWithMitigation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAlarmWithMitigation", reflect.TypeOf((*MockDataSource)(nil).AssociateAlarmWithMitigation), arg0, arg1, arg2)
}

// AssociateMethodsWithPlatformTx mocks base method
func (m *MockDataSource) AssociateMethodsWithPlatformTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.MitigationPlatformID, arg4 []kt.MitigationMethodID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMethodsWithPlatformTx", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateMethodsWithPlatformTx indicates an expected call of AssociateMethodsWithPlatformTx
func (mr *MockDataSourceMockRecorder) AssociateMethodsWithPlatformTx(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMethodsWithPlatformTx", reflect.TypeOf((*MockDataSource)(nil).AssociateMethodsWithPlatformTx), arg0, arg1, arg2, arg3, arg4)
}

// Close mocks base method
func (m *MockDataSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDataSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataSource)(nil).Close))
}

// CreateMethodTx mocks base method
func (m *MockDataSource) CreateMethodTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.MethodUpdateBundle) (*kt.MitigationMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMethodTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*kt.MitigationMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMethodTx indicates an expected call of CreateMethodTx
func (mr *MockDataSourceMockRecorder) CreateMethodTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMethodTx", reflect.TypeOf((*MockDataSource)(nil).CreateMethodTx), arg0, arg1, arg2, arg3)
}

// CreatePlatformTx mocks base method
func (m *MockDataSource) CreatePlatformTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.PlatformUpdateBundle) (*kt.MitigationPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatformTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*kt.MitigationPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlatformTx indicates an expected call of CreatePlatformTx
func (mr *MockDataSourceMockRecorder) CreatePlatformTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatformTx", reflect.TypeOf((*MockDataSource)(nil).CreatePlatformTx), arg0, arg1, arg2, arg3)
}

// CreatePolicy mocks base method
func (m *MockDataSource) CreatePolicy(arg0 context.Context, arg1 *kt.AlertPolicy) (*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0, arg1)
	ret0, _ := ret[0].(*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy
func (mr *MockDataSourceMockRecorder) CreatePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockDataSource)(nil).CreatePolicy), arg0, arg1)
}

// CreatePolicyTx mocks base method
func (m *MockDataSource) CreatePolicyTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 *kt.AlertPolicy) (*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicyTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyTx indicates an expected call of CreatePolicyTx
func (mr *MockDataSourceMockRecorder) CreatePolicyTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyTx", reflect.TypeOf((*MockDataSource)(nil).CreatePolicyTx), arg0, arg1, arg2)
}

// CreateSavedFilter mocks base method
func (m *MockDataSource) CreateSavedFilter(arg0 context.Context, arg1 kt.Cid, arg2 kt.SavedFilterUpdateBundle) (*kt.SavedFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSavedFilter", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.SavedFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSavedFilter indicates an expected call of CreateSavedFilter
func (mr *MockDataSourceMockRecorder) CreateSavedFilter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSavedFilter", reflect.TypeOf((*MockDataSource)(nil).CreateSavedFilter), arg0, arg1, arg2)
}

// CreateThreshold mocks base method
func (m *MockDataSource) CreateThreshold(arg0 context.Context, arg1 *kt.Threshold) (*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThreshold", arg0, arg1)
	ret0, _ := ret[0].(*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThreshold indicates an expected call of CreateThreshold
func (mr *MockDataSourceMockRecorder) CreateThreshold(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThreshold", reflect.TypeOf((*MockDataSource)(nil).CreateThreshold), arg0, arg1)
}

// CreateThresholdMitigations mocks base method
func (m *MockDataSource) CreateThresholdMitigations(arg0 context.Context, arg1 kt.Cid, arg2 []*kt.ThresholdMitigationShort) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThresholdMitigations", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateThresholdMitigations indicates an expected call of CreateThresholdMitigations
func (mr *MockDataSourceMockRecorder) CreateThresholdMitigations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThresholdMitigations", reflect.TypeOf((*MockDataSource)(nil).CreateThresholdMitigations), arg0, arg1, arg2)
}

// CreateThresholdMitigationsTx mocks base method
func (m *MockDataSource) CreateThresholdMitigationsTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 []*kt.ThresholdMitigationShort) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThresholdMitigationsTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateThresholdMitigationsTx indicates an expected call of CreateThresholdMitigationsTx
func (mr *MockDataSourceMockRecorder) CreateThresholdMitigationsTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThresholdMitigationsTx", reflect.TypeOf((*MockDataSource)(nil).CreateThresholdMitigationsTx), arg0, arg1, arg2, arg3)
}

// CreateThresholdTx mocks base method
func (m *MockDataSource) CreateThresholdTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 *kt.Threshold) (*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThresholdTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThresholdTx indicates an expected call of CreateThresholdTx
func (mr *MockDataSourceMockRecorder) CreateThresholdTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThresholdTx", reflect.TypeOf((*MockDataSource)(nil).CreateThresholdTx), arg0, arg1, arg2)
}

// DeleteMethod mocks base method
func (m *MockDataSource) DeleteMethod(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationMethodID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMethod", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMethod indicates an expected call of DeleteMethod
func (mr *MockDataSourceMockRecorder) DeleteMethod(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMethod", reflect.TypeOf((*MockDataSource)(nil).DeleteMethod), arg0, arg1, arg2)
}

// DeletePlatform mocks base method
func (m *MockDataSource) DeletePlatform(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationPlatformID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlatform", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlatform indicates an expected call of DeletePlatform
func (mr *MockDataSourceMockRecorder) DeletePlatform(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlatform", reflect.TypeOf((*MockDataSource)(nil).DeletePlatform), arg0, arg1, arg2)
}

// DeletePolicy mocks base method
func (m *MockDataSource) DeletePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy
func (mr *MockDataSourceMockRecorder) DeletePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockDataSource)(nil).DeletePolicy), arg0, arg1, arg2)
}

// DeleteSavedFilter mocks base method
func (m *MockDataSource) DeleteSavedFilter(arg0 context.Context, arg1 kt.Cid, arg2 kt.SavedFilterID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSavedFilter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSavedFilter indicates an expected call of DeleteSavedFilter
func (mr *MockDataSourceMockRecorder) DeleteSavedFilter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSavedFilter", reflect.TypeOf((*MockDataSource)(nil).DeleteSavedFilter), arg0, arg1, arg2)
}

// DevicesFromInterfaces mocks base method
func (m *MockDataSource) DevicesFromInterfaces(arg0 kt.Cid, arg1 []*kt.Interface) (kt.Devices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DevicesFromInterfaces", arg0, arg1)
	ret0, _ := ret[0].(kt.Devices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DevicesFromInterfaces indicates an expected call of DevicesFromInterfaces
func (mr *MockDataSourceMockRecorder) DevicesFromInterfaces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DevicesFromInterfaces", reflect.TypeOf((*MockDataSource)(nil).DevicesFromInterfaces), arg0, arg1)
}

// DisablePolicy mocks base method
func (m *MockDataSource) DisablePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisablePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisablePolicy indicates an expected call of DisablePolicy
func (mr *MockDataSourceMockRecorder) DisablePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePolicy", reflect.TypeOf((*MockDataSource)(nil).DisablePolicy), arg0, arg1, arg2)
}

// DownloadBaseline mocks base method
func (m *MockDataSource) DownloadBaseline(arg0 kt.Cid, arg1 kt.PolicyID, arg2 time.Time) ([]*kt.BaselineValue, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBaseline", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.BaselineValue)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadBaseline indicates an expected call of DownloadBaseline
func (mr *MockDataSourceMockRecorder) DownloadBaseline(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBaseline", reflect.TypeOf((*MockDataSource)(nil).DownloadBaseline), arg0, arg1, arg2)
}

// EnablePolicy mocks base method
func (m *MockDataSource) EnablePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePolicy indicates an expected call of EnablePolicy
func (mr *MockDataSourceMockRecorder) EnablePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePolicy", reflect.TypeOf((*MockDataSource)(nil).EnablePolicy), arg0, arg1, arg2)
}

// FetchASNs mocks base method
func (m *MockDataSource) FetchASNs(arg0 context.Context, arg1 []int64) (map[int64]kt.ASN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchASNs", arg0, arg1)
	ret0, _ := ret[0].(map[int64]kt.ASN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchASNs indicates an expected call of FetchASNs
func (mr *MockDataSourceMockRecorder) FetchASNs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchASNs", reflect.TypeOf((*MockDataSource)(nil).FetchASNs), arg0, arg1)
}

// FetchAllActiveCompanies mocks base method
func (m *MockDataSource) FetchAllActiveCompanies() ([]kt.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllActiveCompanies")
	ret0, _ := ret[0].([]kt.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllActiveCompanies indicates an expected call of FetchAllActiveCompanies
func (mr *MockDataSourceMockRecorder) FetchAllActiveCompanies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllActiveCompanies", reflect.TypeOf((*MockDataSource)(nil).FetchAllActiveCompanies))
}

// FetchAllServices mocks base method
func (m *MockDataSource) FetchAllServices() (uint64, []*conductor.ClusterServiceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllServices")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].([]*conductor.ClusterServiceRow)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchAllServices indicates an expected call of FetchAllServices
func (mr *MockDataSourceMockRecorder) FetchAllServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllServices", reflect.TypeOf((*MockDataSource)(nil).FetchAllServices))
}

// FetchBackfillCompletionTimes mocks base method
func (m *MockDataSource) FetchBackfillCompletionTimes(arg0 kt.Cid, arg1 time.Time) (map[kt.PolicyID]time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBackfillCompletionTimes", arg0, arg1)
	ret0, _ := ret[0].(map[kt.PolicyID]time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBackfillCompletionTimes indicates an expected call of FetchBackfillCompletionTimes
func (mr *MockDataSourceMockRecorder) FetchBackfillCompletionTimes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBackfillCompletionTimes", reflect.TypeOf((*MockDataSource)(nil).FetchBackfillCompletionTimes), arg0, arg1)
}

// FetchCompanyInsights mocks base method
func (m *MockDataSource) FetchCompanyInsights(arg0 *kt.FetchCompanyInsightsFilter) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCompanyInsights", arg0)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCompanyInsights indicates an expected call of FetchCompanyInsights
func (mr *MockDataSourceMockRecorder) FetchCompanyInsights(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCompanyInsights", reflect.TypeOf((*MockDataSource)(nil).FetchCompanyInsights), arg0)
}

// FetchDeviceAlertRows mocks base method
func (m *MockDataSource) FetchDeviceAlertRows(arg0 []kt.Cid) ([]*conductor.DeviceAlertRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDeviceAlertRows", arg0)
	ret0, _ := ret[0].([]*conductor.DeviceAlertRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDeviceAlertRows indicates an expected call of FetchDeviceAlertRows
func (mr *MockDataSourceMockRecorder) FetchDeviceAlertRows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDeviceAlertRows", reflect.TypeOf((*MockDataSource)(nil).FetchDeviceAlertRows), arg0)
}

// FetchDeviceShortDetails mocks base method
func (m *MockDataSource) FetchDeviceShortDetails(arg0 context.Context, arg1 *kt.DeviceIDSet) (map[kt.DeviceID]kt.DeviceShortDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDeviceShortDetails", arg0, arg1)
	ret0, _ := ret[0].(map[kt.DeviceID]kt.DeviceShortDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDeviceShortDetails indicates an expected call of FetchDeviceShortDetails
func (mr *MockDataSourceMockRecorder) FetchDeviceShortDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDeviceShortDetails", reflect.TypeOf((*MockDataSource)(nil).FetchDeviceShortDetails), arg0, arg1)
}

// FetchInterfacesByDeviceID mocks base method
func (m *MockDataSource) FetchInterfacesByDeviceID(arg0 context.Context, arg1 *kt.DeviceIDSet) (map[string]kt.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInterfacesByDeviceID", arg0, arg1)
	ret0, _ := ret[0].(map[string]kt.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInterfacesByDeviceID indicates an expected call of FetchInterfacesByDeviceID
func (mr *MockDataSourceMockRecorder) FetchInterfacesByDeviceID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInterfacesByDeviceID", reflect.TypeOf((*MockDataSource)(nil).FetchInterfacesByDeviceID), arg0, arg1)
}

// FetchInterfacesByDeviceIDSNMPID mocks base method
func (m *MockDataSource) FetchInterfacesByDeviceIDSNMPID(arg0 context.Context, arg1 kt.Cid, arg2 []kt.DeviceIDSNMPIDPair) (map[kt.DeviceIDSNMPIDPair]kt.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInterfacesByDeviceIDSNMPID", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.DeviceIDSNMPIDPair]kt.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInterfacesByDeviceIDSNMPID indicates an expected call of FetchInterfacesByDeviceIDSNMPID
func (mr *MockDataSourceMockRecorder) FetchInterfacesByDeviceIDSNMPID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInterfacesByDeviceIDSNMPID", reflect.TypeOf((*MockDataSource)(nil).FetchInterfacesByDeviceIDSNMPID), arg0, arg1, arg2)
}

// FetchMariaDBTableInfos mocks base method
func (m *MockDataSource) FetchMariaDBTableInfos() (map[string]kt.TableInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMariaDBTableInfos")
	ret0, _ := ret[0].(map[string]kt.TableInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMariaDBTableInfos indicates an expected call of FetchMariaDBTableInfos
func (mr *MockDataSourceMockRecorder) FetchMariaDBTableInfos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMariaDBTableInfos", reflect.TypeOf((*MockDataSource)(nil).FetchMariaDBTableInfos))
}

// FetchMariaDBTableOldestRowAges mocks base method
func (m *MockDataSource) FetchMariaDBTableOldestRowAges() (map[string]time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMariaDBTableOldestRowAges")
	ret0, _ := ret[0].(map[string]time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMariaDBTableOldestRowAges indicates an expected call of FetchMariaDBTableOldestRowAges
func (mr *MockDataSourceMockRecorder) FetchMariaDBTableOldestRowAges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMariaDBTableOldestRowAges", reflect.TypeOf((*MockDataSource)(nil).FetchMariaDBTableOldestRowAges))
}

// FetchPipelines mocks base method
func (m *MockDataSource) FetchPipelines() (uint64, []*conductor.PipelineRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPipelines")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].([]*conductor.PipelineRow)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchPipelines indicates an expected call of FetchPipelines
func (mr *MockDataSourceMockRecorder) FetchPipelines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPipelines", reflect.TypeOf((*MockDataSource)(nil).FetchPipelines))
}

// FetchSavedFilters mocks base method
func (m *MockDataSource) FetchSavedFilters(arg0 context.Context, arg1 kt.Cid) (map[kt.SavedFilterID]*kt.SavedFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSavedFilters", arg0, arg1)
	ret0, _ := ret[0].(map[kt.SavedFilterID]*kt.SavedFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSavedFilters indicates an expected call of FetchSavedFilters
func (mr *MockDataSourceMockRecorder) FetchSavedFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSavedFilters", reflect.TypeOf((*MockDataSource)(nil).FetchSavedFilters), arg0, arg1)
}

// FetchSavedFiltersFlat mocks base method
func (m *MockDataSource) FetchSavedFiltersFlat(arg0 kt.Cid) (map[kt.PolicyID][]*kt.CompanyFilterBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSavedFiltersFlat", arg0)
	ret0, _ := ret[0].(map[kt.PolicyID][]*kt.CompanyFilterBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSavedFiltersFlat indicates an expected call of FetchSavedFiltersFlat
func (mr *MockDataSourceMockRecorder) FetchSavedFiltersFlat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSavedFiltersFlat", reflect.TypeOf((*MockDataSource)(nil).FetchSavedFiltersFlat), arg0)
}

// FetchServicesForHost mocks base method
func (m *MockDataSource) FetchServicesForHost(arg0 string) (uint64, []*conductor.ClusterServiceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchServicesForHost", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].([]*conductor.ClusterServiceRow)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchServicesForHost indicates an expected call of FetchServicesForHost
func (mr *MockDataSourceMockRecorder) FetchServicesForHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchServicesForHost", reflect.TypeOf((*MockDataSource)(nil).FetchServicesForHost), arg0)
}

// FetchShadowCompanyID mocks base method
func (m *MockDataSource) FetchShadowCompanyID() (kt.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchShadowCompanyID")
	ret0, _ := ret[0].(kt.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchShadowCompanyID indicates an expected call of FetchShadowCompanyID
func (mr *MockDataSourceMockRecorder) FetchShadowCompanyID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchShadowCompanyID", reflect.TypeOf((*MockDataSource)(nil).FetchShadowCompanyID))
}

// FetchSitesByName mocks base method
func (m *MockDataSource) FetchSitesByName(arg0 context.Context, arg1 kt.Cid, arg2 []string) (map[string]kt.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSitesByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]kt.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSitesByName indicates an expected call of FetchSitesByName
func (mr *MockDataSourceMockRecorder) FetchSitesByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSitesByName", reflect.TypeOf((*MockDataSource)(nil).FetchSitesByName), arg0, arg1, arg2)
}

// FetchUserIDAndHydraForCompany mocks base method
func (m *MockDataSource) FetchUserIDAndHydraForCompany(arg0 context.Context, arg1 kt.Cid) (kt.UserID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserIDAndHydraForCompany", arg0, arg1)
	ret0, _ := ret[0].(kt.UserID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchUserIDAndHydraForCompany indicates an expected call of FetchUserIDAndHydraForCompany
func (mr *MockDataSourceMockRecorder) FetchUserIDAndHydraForCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserIDAndHydraForCompany", reflect.TypeOf((*MockDataSource)(nil).FetchUserIDAndHydraForCompany), arg0, arg1)
}

// FindAlarms mocks base method
func (m *MockDataSource) FindAlarms(arg0 context.Context, arg1 *kt.GetAlarmsFilter) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAlarms", arg0, arg1)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAlarms indicates an expected call of FindAlarms
func (mr *MockDataSourceMockRecorder) FindAlarms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAlarms", reflect.TypeOf((*MockDataSource)(nil).FindAlarms), arg0, arg1)
}

// FindAlarmsRelatedByKey mocks base method
func (m *MockDataSource) FindAlarmsRelatedByKey(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID, arg3, arg4 string) ([]kt.AlarmID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAlarmsRelatedByKey", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]kt.AlarmID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAlarmsRelatedByKey indicates an expected call of FindAlarmsRelatedByKey
func (mr *MockDataSourceMockRecorder) FindAlarmsRelatedByKey(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAlarmsRelatedByKey", reflect.TypeOf((*MockDataSource)(nil).FindAlarmsRelatedByKey), arg0, arg1, arg2, arg3, arg4)
}

// FindAssociatedPolicies mocks base method
func (m *MockDataSource) FindAssociatedPolicies(arg0 context.Context, arg1 kt.Cid, arg2 []kt.AlarmID) ([]kt.PolicyID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAssociatedPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].([]kt.PolicyID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAssociatedPolicies indicates an expected call of FindAssociatedPolicies
func (mr *MockDataSourceMockRecorder) FindAssociatedPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAssociatedPolicies", reflect.TypeOf((*MockDataSource)(nil).FindAssociatedPolicies), arg0, arg1, arg2)
}

// FindMethodsWithCount mocks base method
func (m *MockDataSource) FindMethodsWithCount(arg0 context.Context, arg1 *kt.FindMitigationMethodsFilter) ([]*kt.MitigationMethodWithNotifChans, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMethodsWithCount", arg0, arg1)
	ret0, _ := ret[0].([]*kt.MitigationMethodWithNotifChans)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindMethodsWithCount indicates an expected call of FindMethodsWithCount
func (mr *MockDataSourceMockRecorder) FindMethodsWithCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMethodsWithCount", reflect.TypeOf((*MockDataSource)(nil).FindMethodsWithCount), arg0, arg1)
}

// FindMitigationsWithCount mocks base method
func (m *MockDataSource) FindMitigationsWithCount(arg0 context.Context, arg1 *kt.FindMitigationsFilter) ([]*kt.MitigationRepr, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMitigationsWithCount", arg0, arg1)
	ret0, _ := ret[0].([]*kt.MitigationRepr)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindMitigationsWithCount indicates an expected call of FindMitigationsWithCount
func (mr *MockDataSourceMockRecorder) FindMitigationsWithCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMitigationsWithCount", reflect.TypeOf((*MockDataSource)(nil).FindMitigationsWithCount), arg0, arg1)
}

// FindPlatformsWithCount mocks base method
func (m *MockDataSource) FindPlatformsWithCount(arg0 context.Context, arg1 *kt.FindMitigationPlatformsFilter) ([]*kt.MitigationPlatform, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlatformsWithCount", arg0, arg1)
	ret0, _ := ret[0].([]*kt.MitigationPlatform)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPlatformsWithCount indicates an expected call of FindPlatformsWithCount
func (mr *MockDataSourceMockRecorder) FindPlatformsWithCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlatformsWithCount", reflect.TypeOf((*MockDataSource)(nil).FindPlatformsWithCount), arg0, arg1)
}

// FindPolicies mocks base method
func (m *MockDataSource) FindPolicies(arg0 context.Context, arg1 *kt.FindPoliciesFilter) (map[kt.PolicyID]*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPolicies", arg0, arg1)
	ret0, _ := ret[0].(map[kt.PolicyID]*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPolicies indicates an expected call of FindPolicies
func (mr *MockDataSourceMockRecorder) FindPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPolicies", reflect.TypeOf((*MockDataSource)(nil).FindPolicies), arg0, arg1)
}

// FindPoliciesWithCount mocks base method
func (m *MockDataSource) FindPoliciesWithCount(arg0 context.Context, arg1 *kt.FindPoliciesFilter) (map[kt.PolicyID]*kt.AlertPolicy, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPoliciesWithCount", arg0, arg1)
	ret0, _ := ret[0].(map[kt.PolicyID]*kt.AlertPolicy)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPoliciesWithCount indicates an expected call of FindPoliciesWithCount
func (mr *MockDataSourceMockRecorder) FindPoliciesWithCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPoliciesWithCount", reflect.TypeOf((*MockDataSource)(nil).FindPoliciesWithCount), arg0, arg1)
}

// FindSavedFiltersWithCount mocks base method
func (m *MockDataSource) FindSavedFiltersWithCount(arg0 context.Context, arg1 kt.Cid, arg2 *kt.FindSavedFiltersCriteria) ([]*kt.SavedFilter, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSavedFiltersWithCount", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.SavedFilter)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindSavedFiltersWithCount indicates an expected call of FindSavedFiltersWithCount
func (mr *MockDataSourceMockRecorder) FindSavedFiltersWithCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSavedFiltersWithCount", reflect.TypeOf((*MockDataSource)(nil).FindSavedFiltersWithCount), arg0, arg1, arg2)
}

// GetAPICredentials mocks base method
func (m *MockDataSource) GetAPICredentials(arg0 kt.Cid, arg1 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPICredentials", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAPICredentials indicates an expected call of GetAPICredentials
func (mr *MockDataSourceMockRecorder) GetAPICredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPICredentials", reflect.TypeOf((*MockDataSource)(nil).GetAPICredentials), arg0, arg1)
}

// GetAlarm mocks base method
func (m *MockDataSource) GetAlarm(arg0 context.Context, arg1 kt.Cid, arg2 kt.AlarmID) (*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarm", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarm indicates an expected call of GetAlarm
func (mr *MockDataSourceMockRecorder) GetAlarm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarm", reflect.TypeOf((*MockDataSource)(nil).GetAlarm), arg0, arg1, arg2)
}

// GetAlarmEventsEscalating mocks base method
func (m *MockDataSource) GetAlarmEventsEscalating(arg0 kt.Cid, arg1 kt.PolicyID) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmEventsEscalating", arg0, arg1)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmEventsEscalating indicates an expected call of GetAlarmEventsEscalating
func (mr *MockDataSourceMockRecorder) GetAlarmEventsEscalating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmEventsEscalating", reflect.TypeOf((*MockDataSource)(nil).GetAlarmEventsEscalating), arg0, arg1)
}

// GetAlarmEventsStarting mocks base method
func (m *MockDataSource) GetAlarmEventsStarting(arg0 kt.Cid, arg1 kt.PolicyID) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmEventsStarting", arg0, arg1)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmEventsStarting indicates an expected call of GetAlarmEventsStarting
func (mr *MockDataSourceMockRecorder) GetAlarmEventsStarting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmEventsStarting", reflect.TypeOf((*MockDataSource)(nil).GetAlarmEventsStarting), arg0, arg1)
}

// GetAlarmEventsStopping mocks base method
func (m *MockDataSource) GetAlarmEventsStopping(arg0 kt.Cid, arg1 kt.PolicyID) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmEventsStopping", arg0, arg1)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmEventsStopping indicates an expected call of GetAlarmEventsStopping
func (mr *MockDataSourceMockRecorder) GetAlarmEventsStopping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmEventsStopping", reflect.TypeOf((*MockDataSource)(nil).GetAlarmEventsStopping), arg0, arg1)
}

// GetAlarmFromCurrent mocks base method
func (m *MockDataSource) GetAlarmFromCurrent(arg0 context.Context, arg1 kt.Cid, arg2 kt.AlarmID) (*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmFromCurrent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmFromCurrent indicates an expected call of GetAlarmFromCurrent
func (mr *MockDataSourceMockRecorder) GetAlarmFromCurrent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmFromCurrent", reflect.TypeOf((*MockDataSource)(nil).GetAlarmFromCurrent), arg0, arg1, arg2)
}

// GetAlarmFromHistory mocks base method
func (m *MockDataSource) GetAlarmFromHistory(arg0 context.Context, arg1 kt.Cid, arg2 kt.AlarmID) (*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmFromHistory", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmFromHistory indicates an expected call of GetAlarmFromHistory
func (mr *MockDataSourceMockRecorder) GetAlarmFromHistory(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmFromHistory", reflect.TypeOf((*MockDataSource)(nil).GetAlarmFromHistory), arg0, arg1, arg2)
}

// GetAlarmStateTransitions mocks base method
func (m *MockDataSource) GetAlarmStateTransitions(arg0 context.Context, arg1 kt.Cid, arg2 kt.AlarmID) ([]*kt.AlarmStateTransition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmStateTransitions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.AlarmStateTransition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmStateTransitions indicates an expected call of GetAlarmStateTransitions
func (mr *MockDataSourceMockRecorder) GetAlarmStateTransitions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmStateTransitions", reflect.TypeOf((*MockDataSource)(nil).GetAlarmStateTransitions), arg0, arg1, arg2)
}

// GetAlarmsForMitigationStart mocks base method
func (m *MockDataSource) GetAlarmsForMitigationStart(arg0 kt.Cid, arg1 kt.PolicyID, arg2 kt.Tid) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmsForMitigationStart", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmsForMitigationStart indicates an expected call of GetAlarmsForMitigationStart
func (mr *MockDataSourceMockRecorder) GetAlarmsForMitigationStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmsForMitigationStart", reflect.TypeOf((*MockDataSource)(nil).GetAlarmsForMitigationStart), arg0, arg1, arg2)
}

// GetAlarmsForMitigationStop mocks base method
func (m *MockDataSource) GetAlarmsForMitigationStop(arg0 kt.Cid, arg1 kt.PolicyID, arg2 kt.Tid) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmsForMitigationStop", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmsForMitigationStop indicates an expected call of GetAlarmsForMitigationStop
func (mr *MockDataSourceMockRecorder) GetAlarmsForMitigationStop(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmsForMitigationStop", reflect.TypeOf((*MockDataSource)(nil).GetAlarmsForMitigationStop), arg0, arg1, arg2)
}

// GetAlarmsForThresholds mocks base method
func (m *MockDataSource) GetAlarmsForThresholds(arg0 context.Context, arg1 kt.Cid, arg2 []kt.PolicyID, arg3 []kt.Tid) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmsForThresholds", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmsForThresholds indicates an expected call of GetAlarmsForThresholds
func (mr *MockDataSourceMockRecorder) GetAlarmsForThresholds(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmsForThresholds", reflect.TypeOf((*MockDataSource)(nil).GetAlarmsForThresholds), arg0, arg1, arg2, arg3)
}

// GetAlarmsSmallForPolicy mocks base method
func (m *MockDataSource) GetAlarmsSmallForPolicy(arg0 kt.Cid, arg1 kt.PolicyID) ([]kt.AlertAlarmSmall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlarmsSmallForPolicy", arg0, arg1)
	ret0, _ := ret[0].([]kt.AlertAlarmSmall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmsSmallForPolicy indicates an expected call of GetAlarmsSmallForPolicy
func (mr *MockDataSourceMockRecorder) GetAlarmsSmallForPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmsSmallForPolicy", reflect.TypeOf((*MockDataSource)(nil).GetAlarmsSmallForPolicy), arg0, arg1)
}

// GetAlertPolicies mocks base method
func (m *MockDataSource) GetAlertPolicies(arg0 *kt.Cid, arg1 *time.Time, arg2 *kt.PolicyID) ([]kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].([]kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertPolicies indicates an expected call of GetAlertPolicies
func (mr *MockDataSourceMockRecorder) GetAlertPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertPolicies", reflect.TypeOf((*MockDataSource)(nil).GetAlertPolicies), arg0, arg1, arg2)
}

// GetAlertPoliciesBulk mocks base method
func (m *MockDataSource) GetAlertPoliciesBulk(arg0 ...kt.Cid) (map[kt.Cid]map[kt.PolicyID]*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlertPoliciesBulk", varargs...)
	ret0, _ := ret[0].(map[kt.Cid]map[kt.PolicyID]*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertPoliciesBulk indicates an expected call of GetAlertPoliciesBulk
func (mr *MockDataSourceMockRecorder) GetAlertPoliciesBulk(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertPoliciesBulk", reflect.TypeOf((*MockDataSource)(nil).GetAlertPoliciesBulk), arg0...)
}

// GetAlertPoliciesDone mocks base method
func (m *MockDataSource) GetAlertPoliciesDone(arg0 kt.Cid, arg1 time.Time, arg2 kt.PolicyID) ([]kt.InactiveAlertPolicy, []kt.InactiveAlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertPoliciesDone", arg0, arg1, arg2)
	ret0, _ := ret[0].([]kt.InactiveAlertPolicy)
	ret1, _ := ret[1].([]kt.InactiveAlertPolicy)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAlertPoliciesDone indicates an expected call of GetAlertPoliciesDone
func (mr *MockDataSourceMockRecorder) GetAlertPoliciesDone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertPoliciesDone", reflect.TypeOf((*MockDataSource)(nil).GetAlertPoliciesDone), arg0, arg1, arg2)
}

// GetAlertPoliciesMap mocks base method
func (m *MockDataSource) GetAlertPoliciesMap(arg0 *kt.Cid, arg1 *kt.PolicyID, arg2 time.Time) (map[kt.PolicyID]*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertPoliciesMap", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.PolicyID]*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertPoliciesMap indicates an expected call of GetAlertPoliciesMap
func (mr *MockDataSourceMockRecorder) GetAlertPoliciesMap(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertPoliciesMap", reflect.TypeOf((*MockDataSource)(nil).GetAlertPoliciesMap), arg0, arg1, arg2)
}

// GetAllAlarms mocks base method
func (m *MockDataSource) GetAllAlarms(arg0 kt.Cid, arg1 kt.PolicyID, arg2 kt.Tid) ([]*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlarms", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlarms indicates an expected call of GetAllAlarms
func (mr *MockDataSourceMockRecorder) GetAllAlarms(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlarms", reflect.TypeOf((*MockDataSource)(nil).GetAllAlarms), arg0, arg1, arg2)
}

// GetAllMethods mocks base method
func (m *MockDataSource) GetAllMethods(arg0 kt.Cid) ([]*kt.MitigationMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMethods", arg0)
	ret0, _ := ret[0].([]*kt.MitigationMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMethods indicates an expected call of GetAllMethods
func (mr *MockDataSourceMockRecorder) GetAllMethods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMethods", reflect.TypeOf((*MockDataSource)(nil).GetAllMethods), arg0)
}

// GetAllPlatforms mocks base method
func (m *MockDataSource) GetAllPlatforms(arg0 kt.Cid) ([]*kt.MitigationPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlatforms", arg0)
	ret0, _ := ret[0].([]*kt.MitigationPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPlatforms indicates an expected call of GetAllPlatforms
func (mr *MockDataSourceMockRecorder) GetAllPlatforms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlatforms", reflect.TypeOf((*MockDataSource)(nil).GetAllPlatforms), arg0)
}

// GetAssociatedMethods mocks base method
func (m *MockDataSource) GetAssociatedMethods(arg0 context.Context, arg1 kt.Cid, arg2 []kt.MitigationPlatformID) (map[kt.MitigationPlatformID][]kt.MitigationMethodID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssociatedMethods", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.MitigationPlatformID][]kt.MitigationMethodID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssociatedMethods indicates an expected call of GetAssociatedMethods
func (mr *MockDataSourceMockRecorder) GetAssociatedMethods(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssociatedMethods", reflect.TypeOf((*MockDataSource)(nil).GetAssociatedMethods), arg0, arg1, arg2)
}

// GetBaselineTableInfo mocks base method
func (m *MockDataSource) GetBaselineTableInfo() (kt.TableInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaselineTableInfo")
	ret0, _ := ret[0].(kt.TableInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaselineTableInfo indicates an expected call of GetBaselineTableInfo
func (mr *MockDataSourceMockRecorder) GetBaselineTableInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaselineTableInfo", reflect.TypeOf((*MockDataSource)(nil).GetBaselineTableInfo))
}

// GetBaselineTableRows mocks base method
func (m *MockDataSource) GetBaselineTableRows(arg0 kt.Cid, arg1 kt.PolicyID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaselineTableRows", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaselineTableRows indicates an expected call of GetBaselineTableRows
func (mr *MockDataSourceMockRecorder) GetBaselineTableRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaselineTableRows", reflect.TypeOf((*MockDataSource)(nil).GetBaselineTableRows), arg0, arg1)
}

// GetBaselineTableRowsByCompany mocks base method
func (m *MockDataSource) GetBaselineTableRowsByCompany() ([]kt.CidWithCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaselineTableRowsByCompany")
	ret0, _ := ret[0].([]kt.CidWithCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaselineTableRowsByCompany indicates an expected call of GetBaselineTableRowsByCompany
func (mr *MockDataSourceMockRecorder) GetBaselineTableRowsByCompany() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaselineTableRowsByCompany", reflect.TypeOf((*MockDataSource)(nil).GetBaselineTableRowsByCompany))
}

// GetCompaniesWithActiveMitigations mocks base method
func (m *MockDataSource) GetCompaniesWithActiveMitigations(arg0 context.Context) ([]kt.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompaniesWithActiveMitigations", arg0)
	ret0, _ := ret[0].([]kt.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompaniesWithActiveMitigations indicates an expected call of GetCompaniesWithActiveMitigations
func (mr *MockDataSourceMockRecorder) GetCompaniesWithActiveMitigations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompaniesWithActiveMitigations", reflect.TypeOf((*MockDataSource)(nil).GetCompaniesWithActiveMitigations), arg0)
}

// GetCompanyInsightByID mocks base method
func (m *MockDataSource) GetCompanyInsightByID(arg0 kt.Cid, arg1 kt.AlarmID, arg2 bool) (*kt.AlarmEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyInsightByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlarmEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyInsightByID indicates an expected call of GetCompanyInsightByID
func (mr *MockDataSourceMockRecorder) GetCompanyInsightByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyInsightByID", reflect.TypeOf((*MockDataSource)(nil).GetCompanyInsightByID), arg0, arg1, arg2)
}

// GetCurrentFlowspecCalls mocks base method
func (m *MockDataSource) GetCurrentFlowspecCalls(arg0 kt.Cid) ([]*flowspec.Call, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentFlowspecCalls", arg0)
	ret0, _ := ret[0].([]*flowspec.Call)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentFlowspecCalls indicates an expected call of GetCurrentFlowspecCalls
func (mr *MockDataSourceMockRecorder) GetCurrentFlowspecCalls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentFlowspecCalls", reflect.TypeOf((*MockDataSource)(nil).GetCurrentFlowspecCalls), arg0)
}

// GetCurrentRTBHCalls mocks base method
func (m *MockDataSource) GetCurrentRTBHCalls(arg0 kt.Cid) ([]*kt.RTBHCall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRTBHCalls", arg0)
	ret0, _ := ret[0].([]*kt.RTBHCall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentRTBHCalls indicates an expected call of GetCurrentRTBHCalls
func (mr *MockDataSourceMockRecorder) GetCurrentRTBHCalls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRTBHCalls", reflect.TypeOf((*MockDataSource)(nil).GetCurrentRTBHCalls), arg0)
}

// GetDebugKeys mocks base method
func (m *MockDataSource) GetDebugKeys(arg0 kt.Cid, arg1 *kt.PolicyID, arg2 *kt.Tid) ([]kt.AlertingDebugKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebugKeys", arg0, arg1, arg2)
	ret0, _ := ret[0].([]kt.AlertingDebugKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebugKeys indicates an expected call of GetDebugKeys
func (mr *MockDataSourceMockRecorder) GetDebugKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebugKeys", reflect.TypeOf((*MockDataSource)(nil).GetDebugKeys), arg0, arg1, arg2)
}

// GetDevicesAndBGPAddrs mocks base method
func (m *MockDataSource) GetDevicesAndBGPAddrs(arg0 kt.Cid) (map[kt.DeviceID]kt.DeviceProxyBGPPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesAndBGPAddrs", arg0)
	ret0, _ := ret[0].(map[kt.DeviceID]kt.DeviceProxyBGPPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicesAndBGPAddrs indicates an expected call of GetDevicesAndBGPAddrs
func (mr *MockDataSourceMockRecorder) GetDevicesAndBGPAddrs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesAndBGPAddrs", reflect.TypeOf((*MockDataSource)(nil).GetDevicesAndBGPAddrs), arg0)
}

// GetHostPool mocks base method
func (m *MockDataSource) GetHostPool() ([]conductor.HostPoolEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostPool")
	ret0, _ := ret[0].([]conductor.HostPoolEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostPool indicates an expected call of GetHostPool
func (mr *MockDataSourceMockRecorder) GetHostPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostPool", reflect.TypeOf((*MockDataSource)(nil).GetHostPool))
}

// GetLocalCompanies mocks base method
func (m *MockDataSource) GetLocalCompanies(arg0 ktds.GetNodeAddress, arg1 bool, arg2, arg3 map[kt.Cid]bool) ([]kt.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalCompanies", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]kt.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalCompanies indicates an expected call of GetLocalCompanies
func (mr *MockDataSourceMockRecorder) GetLocalCompanies(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalCompanies", reflect.TypeOf((*MockDataSource)(nil).GetLocalCompanies), arg0, arg1, arg2, arg3)
}

// GetMethod mocks base method
func (m *MockDataSource) GetMethod(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationMethodID) (*kt.MitigationMethodWithNotifChans, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMethod", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.MitigationMethodWithNotifChans)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethod indicates an expected call of GetMethod
func (mr *MockDataSourceMockRecorder) GetMethod(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethod", reflect.TypeOf((*MockDataSource)(nil).GetMethod), arg0, arg1, arg2)
}

// GetMitigation mocks base method
func (m *MockDataSource) GetMitigation(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationID) (*kt.MitigationRepr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.MitigationRepr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigation indicates an expected call of GetMitigation
func (mr *MockDataSourceMockRecorder) GetMitigation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigation", reflect.TypeOf((*MockDataSource)(nil).GetMitigation), arg0, arg1, arg2)
}

// GetMitigationBulk mocks base method
func (m *MockDataSource) GetMitigationBulk(arg0 context.Context, arg1 kt.Cid, arg2 []kt.MitigationID) (map[kt.MitigationID]*kt.MitigationRepr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationBulk", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.MitigationID]*kt.MitigationRepr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationBulk indicates an expected call of GetMitigationBulk
func (mr *MockDataSourceMockRecorder) GetMitigationBulk(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationBulk", reflect.TypeOf((*MockDataSource)(nil).GetMitigationBulk), arg0, arg1, arg2)
}

// GetMitigationHistoryV2 mocks base method
func (m *MockDataSource) GetMitigationHistoryV2(arg0 kt.Cid, arg1 *kt.MitigationHistoryRequest) ([]kt.MitigationHistoryEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationHistoryV2", arg0, arg1)
	ret0, _ := ret[0].([]kt.MitigationHistoryEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationHistoryV2 indicates an expected call of GetMitigationHistoryV2
func (mr *MockDataSourceMockRecorder) GetMitigationHistoryV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationHistoryV2", reflect.TypeOf((*MockDataSource)(nil).GetMitigationHistoryV2), arg0, arg1)
}

// GetMitigationHistoryV2Count mocks base method
func (m *MockDataSource) GetMitigationHistoryV2Count(arg0 kt.Cid, arg1 *kt.MitigationHistoryRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationHistoryV2Count", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationHistoryV2Count indicates an expected call of GetMitigationHistoryV2Count
func (mr *MockDataSourceMockRecorder) GetMitigationHistoryV2Count(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationHistoryV2Count", reflect.TypeOf((*MockDataSource)(nil).GetMitigationHistoryV2Count), arg0, arg1)
}

// GetMitigationHistoryV2EndWaitCount mocks base method
func (m *MockDataSource) GetMitigationHistoryV2EndWaitCount(arg0 kt.Cid, arg1 *kt.MitigationHistoryRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationHistoryV2EndWaitCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationHistoryV2EndWaitCount indicates an expected call of GetMitigationHistoryV2EndWaitCount
func (mr *MockDataSourceMockRecorder) GetMitigationHistoryV2EndWaitCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationHistoryV2EndWaitCount", reflect.TypeOf((*MockDataSource)(nil).GetMitigationHistoryV2EndWaitCount), arg0, arg1)
}

// GetMitigationMethods mocks base method
func (m *MockDataSource) GetMitigationMethods(arg0 context.Context, arg1 kt.Cid, arg2 []kt.MitigationMethodID) (map[kt.MitigationMethodID]*kt.MitigationMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationMethods", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.MitigationMethodID]*kt.MitigationMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationMethods indicates an expected call of GetMitigationMethods
func (mr *MockDataSourceMockRecorder) GetMitigationMethods(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationMethods", reflect.TypeOf((*MockDataSource)(nil).GetMitigationMethods), arg0, arg1, arg2)
}

// GetMitigationPlatforms mocks base method
func (m *MockDataSource) GetMitigationPlatforms(arg0 context.Context, arg1 kt.Cid, arg2 []kt.MitigationPlatformID) (map[kt.MitigationPlatformID]*kt.MitigationPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMitigationPlatforms", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.MitigationPlatformID]*kt.MitigationPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMitigationPlatforms indicates an expected call of GetMitigationPlatforms
func (mr *MockDataSourceMockRecorder) GetMitigationPlatforms(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMitigationPlatforms", reflect.TypeOf((*MockDataSource)(nil).GetMitigationPlatforms), arg0, arg1, arg2)
}

// GetNextMitigationID mocks base method
func (m *MockDataSource) GetNextMitigationID(arg0 kt.Cid) (kt.MitigationID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextMitigationID", arg0)
	ret0, _ := ret[0].(kt.MitigationID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextMitigationID indicates an expected call of GetNextMitigationID
func (mr *MockDataSourceMockRecorder) GetNextMitigationID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextMitigationID", reflect.TypeOf((*MockDataSource)(nil).GetNextMitigationID), arg0)
}

// GetOccurrencesForKey mocks base method
func (m *MockDataSource) GetOccurrencesForKey(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID, arg3, arg4 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccurrencesForKey", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccurrencesForKey indicates an expected call of GetOccurrencesForKey
func (mr *MockDataSourceMockRecorder) GetOccurrencesForKey(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccurrencesForKey", reflect.TypeOf((*MockDataSource)(nil).GetOccurrencesForKey), arg0, arg1, arg2, arg3, arg4)
}

// GetOidFromUserId mocks base method
func (m *MockDataSource) GetOidFromUserId(arg0 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOidFromUserId", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOidFromUserId indicates an expected call of GetOidFromUserId
func (mr *MockDataSourceMockRecorder) GetOidFromUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOidFromUserId", reflect.TypeOf((*MockDataSource)(nil).GetOidFromUserId), arg0)
}

// GetPlatform mocks base method
func (m *MockDataSource) GetPlatform(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationPlatformID) (*kt.MitigationPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatform", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.MitigationPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatform indicates an expected call of GetPlatform
func (mr *MockDataSourceMockRecorder) GetPlatform(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatform", reflect.TypeOf((*MockDataSource)(nil).GetPlatform), arg0, arg1, arg2)
}

// GetPlatformMethodPairsBulk mocks base method
func (m *MockDataSource) GetPlatformMethodPairsBulk(arg0 context.Context, arg1 kt.Cid, arg2 []kt.MitigationPlatformID, arg3 []kt.MitigationMethodID) (map[kt.PlatMethodIDTuple]*kt.MitigationPlatformMethodPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformMethodPairsBulk", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[kt.PlatMethodIDTuple]*kt.MitigationPlatformMethodPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformMethodPairsBulk indicates an expected call of GetPlatformMethodPairsBulk
func (mr *MockDataSourceMockRecorder) GetPlatformMethodPairsBulk(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformMethodPairsBulk", reflect.TypeOf((*MockDataSource)(nil).GetPlatformMethodPairsBulk), arg0, arg1, arg2, arg3)
}

// GetPolicy mocks base method
func (m *MockDataSource) GetPolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID) (*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockDataSourceMockRecorder) GetPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockDataSource)(nil).GetPolicy), arg0, arg1, arg2)
}

// GetSavedFilter mocks base method
func (m *MockDataSource) GetSavedFilter(arg0 context.Context, arg1 kt.Cid, arg2 kt.SavedFilterID) (*kt.SavedFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavedFilter", arg0, arg1, arg2)
	ret0, _ := ret[0].(*kt.SavedFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedFilter indicates an expected call of GetSavedFilter
func (mr *MockDataSourceMockRecorder) GetSavedFilter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedFilter", reflect.TypeOf((*MockDataSource)(nil).GetSavedFilter), arg0, arg1, arg2)
}

// GetSelectedDevicesForCompanyFromStore mocks base method
func (m *MockDataSource) GetSelectedDevicesForCompanyFromStore(arg0 context.Context, arg1 kt.Cid) (map[kt.PolicyID]*kt.DeviceIDSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectedDevicesForCompanyFromStore", arg0, arg1)
	ret0, _ := ret[0].(map[kt.PolicyID]*kt.DeviceIDSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectedDevicesForCompanyFromStore indicates an expected call of GetSelectedDevicesForCompanyFromStore
func (mr *MockDataSourceMockRecorder) GetSelectedDevicesForCompanyFromStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectedDevicesForCompanyFromStore", reflect.TypeOf((*MockDataSource)(nil).GetSelectedDevicesForCompanyFromStore), arg0, arg1)
}

// GetStateMachineStore mocks base method
func (m *MockDataSource) GetStateMachineStore(arg0 kt.Cid) state.MachineStoreAndEventListener {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateMachineStore", arg0)
	ret0, _ := ret[0].(state.MachineStoreAndEventListener)
	return ret0
}

// GetStateMachineStore indicates an expected call of GetStateMachineStore
func (mr *MockDataSourceMockRecorder) GetStateMachineStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateMachineStore", reflect.TypeOf((*MockDataSource)(nil).GetStateMachineStore), arg0)
}

// GetThresholdMitigations mocks base method
func (m *MockDataSource) GetThresholdMitigations(arg0 context.Context, arg1 kt.Cid, arg2 []kt.Tid) (map[kt.Tid][]*kt.ThresholdMitigationWithIDs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThresholdMitigations", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.Tid][]*kt.ThresholdMitigationWithIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThresholdMitigations indicates an expected call of GetThresholdMitigations
func (mr *MockDataSourceMockRecorder) GetThresholdMitigations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThresholdMitigations", reflect.TypeOf((*MockDataSource)(nil).GetThresholdMitigations), arg0, arg1, arg2)
}

// GetThresholdsForPolicies mocks base method
func (m *MockDataSource) GetThresholdsForPolicies(arg0 context.Context, arg1 kt.Cid, arg2 []kt.PolicyID) (map[kt.PolicyID][]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThresholdsForPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.PolicyID][]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThresholdsForPolicies indicates an expected call of GetThresholdsForPolicies
func (mr *MockDataSourceMockRecorder) GetThresholdsForPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThresholdsForPolicies", reflect.TypeOf((*MockDataSource)(nil).GetThresholdsForPolicies), arg0, arg1, arg2)
}

// GetThresholdsWithArchived mocks base method
func (m *MockDataSource) GetThresholdsWithArchived(arg0 context.Context, arg1 kt.Cid, arg2 []kt.Tid) (map[kt.Tid]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThresholdsWithArchived", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.Tid]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThresholdsWithArchived indicates an expected call of GetThresholdsWithArchived
func (mr *MockDataSourceMockRecorder) GetThresholdsWithArchived(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThresholdsWithArchived", reflect.TypeOf((*MockDataSource)(nil).GetThresholdsWithArchived), arg0, arg1, arg2)
}

// GetTotalActiveAlarms mocks base method
func (m *MockDataSource) GetTotalActiveAlarms() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalActiveAlarms")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalActiveAlarms indicates an expected call of GetTotalActiveAlarms
func (mr *MockDataSourceMockRecorder) GetTotalActiveAlarms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalActiveAlarms", reflect.TypeOf((*MockDataSource)(nil).GetTotalActiveAlarms))
}

// GetTotalActiveAlarmsForCompany mocks base method
func (m *MockDataSource) GetTotalActiveAlarmsForCompany(arg0 kt.Cid) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalActiveAlarmsForCompany", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalActiveAlarmsForCompany indicates an expected call of GetTotalActiveAlarmsForCompany
func (mr *MockDataSourceMockRecorder) GetTotalActiveAlarmsForCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalActiveAlarmsForCompany", reflect.TypeOf((*MockDataSource)(nil).GetTotalActiveAlarmsForCompany), arg0)
}

// GetTotalActiveAlarmsIncludingShadow mocks base method
func (m *MockDataSource) GetTotalActiveAlarmsIncludingShadow() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalActiveAlarmsIncludingShadow")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalActiveAlarmsIncludingShadow indicates an expected call of GetTotalActiveAlarmsIncludingShadow
func (mr *MockDataSourceMockRecorder) GetTotalActiveAlarmsIncludingShadow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalActiveAlarmsIncludingShadow", reflect.TypeOf((*MockDataSource)(nil).GetTotalActiveAlarmsIncludingShadow))
}

// GetTotalActiveShadowAlarms mocks base method
func (m *MockDataSource) GetTotalActiveShadowAlarms() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalActiveShadowAlarms")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalActiveShadowAlarms indicates an expected call of GetTotalActiveShadowAlarms
func (mr *MockDataSourceMockRecorder) GetTotalActiveShadowAlarms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalActiveShadowAlarms", reflect.TypeOf((*MockDataSource)(nil).GetTotalActiveShadowAlarms))
}

// GetTotalMitigations mocks base method
func (m *MockDataSource) GetTotalMitigations() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalMitigations")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalMitigations indicates an expected call of GetTotalMitigations
func (mr *MockDataSourceMockRecorder) GetTotalMitigations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalMitigations", reflect.TypeOf((*MockDataSource)(nil).GetTotalMitigations))
}

// IDsForDeviceNames mocks base method
func (m *MockDataSource) IDsForDeviceNames(arg0 context.Context, arg1 kt.Cid, arg2 []string) (map[string]kt.DeviceID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDsForDeviceNames", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]kt.DeviceID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IDsForDeviceNames indicates an expected call of IDsForDeviceNames
func (mr *MockDataSourceMockRecorder) IDsForDeviceNames(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDsForDeviceNames", reflect.TypeOf((*MockDataSource)(nil).IDsForDeviceNames), arg0, arg1, arg2)
}

// InsertAlertMatchHistoryRows mocks base method
func (m *MockDataSource) InsertAlertMatchHistoryRows(arg0 []kt.AlertMatchHistoryRow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAlertMatchHistoryRows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAlertMatchHistoryRows indicates an expected call of InsertAlertMatchHistoryRows
func (mr *MockDataSourceMockRecorder) InsertAlertMatchHistoryRows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAlertMatchHistoryRows", reflect.TypeOf((*MockDataSource)(nil).InsertAlertMatchHistoryRows), arg0)
}

// Load mocks base method
func (m *MockDataSource) Load(arg0 kt.Cid, arg1 kt.Tid) ([]*kt.ThresholdMitigation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].([]*kt.ThresholdMitigation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockDataSourceMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockDataSource)(nil).Load), arg0, arg1)
}

// LoadAllActiveThresholdsForCompany mocks base method
func (m *MockDataSource) LoadAllActiveThresholdsForCompany(arg0 kt.Cid) (map[kt.Tid]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllActiveThresholdsForCompany", arg0)
	ret0, _ := ret[0].(map[kt.Tid]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllActiveThresholdsForCompany indicates an expected call of LoadAllActiveThresholdsForCompany
func (mr *MockDataSourceMockRecorder) LoadAllActiveThresholdsForCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllActiveThresholdsForCompany", reflect.TypeOf((*MockDataSource)(nil).LoadAllActiveThresholdsForCompany), arg0)
}

// LoadAppProtocolDimensions mocks base method
func (m *MockDataSource) LoadAppProtocolDimensions(arg0 context.Context) ([]appproto.Tuple, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAppProtocolDimensions", arg0)
	ret0, _ := ret[0].([]appproto.Tuple)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAppProtocolDimensions indicates an expected call of LoadAppProtocolDimensions
func (mr *MockDataSourceMockRecorder) LoadAppProtocolDimensions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAppProtocolDimensions", reflect.TypeOf((*MockDataSource)(nil).LoadAppProtocolDimensions), arg0)
}

// LoadAppProtocolMappings mocks base method
func (m *MockDataSource) LoadAppProtocolMappings(arg0 context.Context) (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAppProtocolMappings", arg0)
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAppProtocolMappings indicates an expected call of LoadAppProtocolMappings
func (mr *MockDataSourceMockRecorder) LoadAppProtocolMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAppProtocolMappings", reflect.TypeOf((*MockDataSource)(nil).LoadAppProtocolMappings), arg0)
}

// LoadAppProtocolMetrics mocks base method
func (m *MockDataSource) LoadAppProtocolMetrics(arg0 context.Context) ([]appproto.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAppProtocolMetrics", arg0)
	ret0, _ := ret[0].([]appproto.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAppProtocolMetrics indicates an expected call of LoadAppProtocolMetrics
func (mr *MockDataSourceMockRecorder) LoadAppProtocolMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAppProtocolMetrics", reflect.TypeOf((*MockDataSource)(nil).LoadAppProtocolMetrics), arg0)
}

// LoadAppProtocolSNMPBundle mocks base method
func (m *MockDataSource) LoadAppProtocolSNMPBundle(arg0 context.Context) (*kt.SNMPBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAppProtocolSNMPBundle", arg0)
	ret0, _ := ret[0].(*kt.SNMPBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAppProtocolSNMPBundle indicates an expected call of LoadAppProtocolSNMPBundle
func (mr *MockDataSourceMockRecorder) LoadAppProtocolSNMPBundle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAppProtocolSNMPBundle", reflect.TypeOf((*MockDataSource)(nil).LoadAppProtocolSNMPBundle), arg0)
}

// LoadAvailableBGPFilteringEnabledDevices mocks base method
func (m *MockDataSource) LoadAvailableBGPFilteringEnabledDevices(arg0 context.Context, arg1 kt.Cid) (*kt.DeviceIDSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAvailableBGPFilteringEnabledDevices", arg0, arg1)
	ret0, _ := ret[0].(*kt.DeviceIDSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAvailableBGPFilteringEnabledDevices indicates an expected call of LoadAvailableBGPFilteringEnabledDevices
func (mr *MockDataSourceMockRecorder) LoadAvailableBGPFilteringEnabledDevices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAvailableBGPFilteringEnabledDevices", reflect.TypeOf((*MockDataSource)(nil).LoadAvailableBGPFilteringEnabledDevices), arg0, arg1)
}

// LoadBulk mocks base method
func (m *MockDataSource) LoadBulk(arg0 kt.Cid, arg1 []kt.Tid) ([]*kt.ThresholdMitigation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBulk", arg0, arg1)
	ret0, _ := ret[0].([]*kt.ThresholdMitigation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadBulk indicates an expected call of LoadBulk
func (mr *MockDataSourceMockRecorder) LoadBulk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBulk", reflect.TypeOf((*MockDataSource)(nil).LoadBulk), arg0, arg1)
}

// LoadCachedActivationTimes mocks base method
func (m *MockDataSource) LoadCachedActivationTimes(arg0 kt.Cid, arg1 kt.PolicyID, arg2 time.Time) (map[kt.Tid]map[string][]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCachedActivationTimes", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[kt.Tid]map[string][]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCachedActivationTimes indicates an expected call of LoadCachedActivationTimes
func (mr *MockDataSourceMockRecorder) LoadCachedActivationTimes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCachedActivationTimes", reflect.TypeOf((*MockDataSource)(nil).LoadCachedActivationTimes), arg0, arg1, arg2)
}

// LoadCompanySpecificDimensions mocks base method
func (m *MockDataSource) LoadCompanySpecificDimensions(arg0 context.Context, arg1 kt.Cid) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCompanySpecificDimensions", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCompanySpecificDimensions indicates an expected call of LoadCompanySpecificDimensions
func (mr *MockDataSourceMockRecorder) LoadCompanySpecificDimensions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCompanySpecificDimensions", reflect.TypeOf((*MockDataSource)(nil).LoadCompanySpecificDimensions), arg0, arg1)
}

// LoadCompanyThreshold mocks base method
func (m *MockDataSource) LoadCompanyThreshold(arg0 kt.Cid, arg1 *time.Time, arg2 kt.PolicyID, arg3 string) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCompanyThreshold", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCompanyThreshold indicates an expected call of LoadCompanyThreshold
func (mr *MockDataSourceMockRecorder) LoadCompanyThreshold(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCompanyThreshold", reflect.TypeOf((*MockDataSource)(nil).LoadCompanyThreshold), arg0, arg1, arg2, arg3)
}

// LoadConfigDigests mocks base method
func (m *MockDataSource) LoadConfigDigests(arg0 int) (map[kt.Cid]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigDigests", arg0)
	ret0, _ := ret[0].(map[kt.Cid]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfigDigests indicates an expected call of LoadConfigDigests
func (mr *MockDataSourceMockRecorder) LoadConfigDigests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigDigests", reflect.TypeOf((*MockDataSource)(nil).LoadConfigDigests), arg0)
}

// LoadCustomColumns mocks base method
func (m *MockDataSource) LoadCustomColumns(arg0 kt.Cid) (map[uint32]*kt.CustomColumn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCustomColumns", arg0)
	ret0, _ := ret[0].(map[uint32]*kt.CustomColumn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCustomColumns indicates an expected call of LoadCustomColumns
func (mr *MockDataSourceMockRecorder) LoadCustomColumns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCustomColumns", reflect.TypeOf((*MockDataSource)(nil).LoadCustomColumns), arg0)
}

// LoadDeviceLabels mocks base method
func (m *MockDataSource) LoadDeviceLabels(arg0 kt.Cid) (*kt.DeviceLabelsForCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDeviceLabels", arg0)
	ret0, _ := ret[0].(*kt.DeviceLabelsForCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadDeviceLabels indicates an expected call of LoadDeviceLabels
func (mr *MockDataSourceMockRecorder) LoadDeviceLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDeviceLabels", reflect.TypeOf((*MockDataSource)(nil).LoadDeviceLabels), arg0)
}

// LoadDeviceSubtypeColumns mocks base method
func (m *MockDataSource) LoadDeviceSubtypeColumns(arg0 kt.Cid) (map[string]map[kt.DeviceID]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDeviceSubtypeColumns", arg0)
	ret0, _ := ret[0].(map[string]map[kt.DeviceID]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadDeviceSubtypeColumns indicates an expected call of LoadDeviceSubtypeColumns
func (mr *MockDataSourceMockRecorder) LoadDeviceSubtypeColumns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDeviceSubtypeColumns", reflect.TypeOf((*MockDataSource)(nil).LoadDeviceSubtypeColumns), arg0)
}

// LoadDeviceSubtypeMappings mocks base method
func (m *MockDataSource) LoadDeviceSubtypeMappings(arg0 context.Context) (map[kt.Cid]map[string][]kt.DeviceID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDeviceSubtypeMappings", arg0)
	ret0, _ := ret[0].(map[kt.Cid]map[string][]kt.DeviceID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadDeviceSubtypeMappings indicates an expected call of LoadDeviceSubtypeMappings
func (mr *MockDataSourceMockRecorder) LoadDeviceSubtypeMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDeviceSubtypeMappings", reflect.TypeOf((*MockDataSource)(nil).LoadDeviceSubtypeMappings), arg0)
}

// LoadFlexDimensions mocks base method
func (m *MockDataSource) LoadFlexDimensions(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFlexDimensions", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFlexDimensions indicates an expected call of LoadFlexDimensions
func (mr *MockDataSourceMockRecorder) LoadFlexDimensions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFlexDimensions", reflect.TypeOf((*MockDataSource)(nil).LoadFlexDimensions), arg0)
}

// LoadFlexMetrics mocks base method
func (m *MockDataSource) LoadFlexMetrics(arg0 context.Context) ([]kt.FlexMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFlexMetrics", arg0)
	ret0, _ := ret[0].([]kt.FlexMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFlexMetrics indicates an expected call of LoadFlexMetrics
func (mr *MockDataSourceMockRecorder) LoadFlexMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFlexMetrics", reflect.TypeOf((*MockDataSource)(nil).LoadFlexMetrics), arg0)
}

// LoadInterfaceGroups mocks base method
func (m *MockDataSource) LoadInterfaceGroups(arg0 kt.Cid) (*kt.InterfaceGroupsForCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadInterfaceGroups", arg0)
	ret0, _ := ret[0].(*kt.InterfaceGroupsForCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadInterfaceGroups indicates an expected call of LoadInterfaceGroups
func (mr *MockDataSourceMockRecorder) LoadInterfaceGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadInterfaceGroups", reflect.TypeOf((*MockDataSource)(nil).LoadInterfaceGroups), arg0)
}

// LoadInterfaces mocks base method
func (m *MockDataSource) LoadInterfaces(arg0 kt.Cid) ([]*kt.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadInterfaces", arg0)
	ret0, _ := ret[0].([]*kt.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadInterfaces indicates an expected call of LoadInterfaces
func (mr *MockDataSourceMockRecorder) LoadInterfaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadInterfaces", reflect.TypeOf((*MockDataSource)(nil).LoadInterfaces), arg0)
}

// LoadNonSTDAppProtocols mocks base method
func (m *MockDataSource) LoadNonSTDAppProtocols(arg0 context.Context) ([]kt.AppProtoID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadNonSTDAppProtocols", arg0)
	ret0, _ := ret[0].([]kt.AppProtoID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadNonSTDAppProtocols indicates an expected call of LoadNonSTDAppProtocols
func (mr *MockDataSourceMockRecorder) LoadNonSTDAppProtocols(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadNonSTDAppProtocols", reflect.TypeOf((*MockDataSource)(nil).LoadNonSTDAppProtocols), arg0)
}

// LoadSites mocks base method
func (m *MockDataSource) LoadSites(arg0 kt.Cid) (map[int]*kt.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSites", arg0)
	ret0, _ := ret[0].(map[int]*kt.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSites indicates an expected call of LoadSites
func (mr *MockDataSourceMockRecorder) LoadSites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSites", reflect.TypeOf((*MockDataSource)(nil).LoadSites), arg0)
}

// LoadThresholdsBulk mocks base method
func (m *MockDataSource) LoadThresholdsBulk(arg0 context.Context, arg1 kt.Cid, arg2 []kt.ThresholdStatus, arg3 []kt.PolicyID) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadThresholdsBulk", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadThresholdsBulk indicates an expected call of LoadThresholdsBulk
func (mr *MockDataSourceMockRecorder) LoadThresholdsBulk(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadThresholdsBulk", reflect.TypeOf((*MockDataSource)(nil).LoadThresholdsBulk), arg0, arg1, arg2, arg3)
}

// LoadVRFData mocks base method
func (m *MockDataSource) LoadVRFData(arg0 kt.Cid) (map[kt.DeviceID][]*kt.VRFEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadVRFData", arg0)
	ret0, _ := ret[0].(map[kt.DeviceID][]*kt.VRFEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadVRFData indicates an expected call of LoadVRFData
func (mr *MockDataSourceMockRecorder) LoadVRFData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadVRFData", reflect.TypeOf((*MockDataSource)(nil).LoadVRFData), arg0)
}

// MarkFlowspecAnnounceForDevices mocks base method
func (m *MockDataSource) MarkFlowspecAnnounceForDevices(arg0 kt.Cid, arg1 *kt.DeviceIDSet, arg2 string, arg3 []byte, arg4 kt.MitigationPlatformID, arg5 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFlowspecAnnounceForDevices", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFlowspecAnnounceForDevices indicates an expected call of MarkFlowspecAnnounceForDevices
func (mr *MockDataSourceMockRecorder) MarkFlowspecAnnounceForDevices(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFlowspecAnnounceForDevices", reflect.TypeOf((*MockDataSource)(nil).MarkFlowspecAnnounceForDevices), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MarkFlowspecWithdrawForDevices mocks base method
func (m *MockDataSource) MarkFlowspecWithdrawForDevices(arg0 kt.Cid, arg1 *kt.DeviceIDSet, arg2 string, arg3 []byte, arg4 kt.MitigationPlatformID, arg5 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFlowspecWithdrawForDevices", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFlowspecWithdrawForDevices indicates an expected call of MarkFlowspecWithdrawForDevices
func (mr *MockDataSourceMockRecorder) MarkFlowspecWithdrawForDevices(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFlowspecWithdrawForDevices", reflect.TypeOf((*MockDataSource)(nil).MarkFlowspecWithdrawForDevices), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MarkMitigationStart mocks base method
func (m *MockDataSource) MarkMitigationStart(arg0 kt.AlarmID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMitigationStart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMitigationStart indicates an expected call of MarkMitigationStart
func (mr *MockDataSourceMockRecorder) MarkMitigationStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMitigationStart", reflect.TypeOf((*MockDataSource)(nil).MarkMitigationStart), arg0)
}

// MarkMitigationStop mocks base method
func (m *MockDataSource) MarkMitigationStop(arg0 kt.AlarmID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMitigationStop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMitigationStop indicates an expected call of MarkMitigationStop
func (mr *MockDataSourceMockRecorder) MarkMitigationStop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMitigationStop", reflect.TypeOf((*MockDataSource)(nil).MarkMitigationStop), arg0)
}

// MarkPolicyBad mocks base method
func (m *MockDataSource) MarkPolicyBad(arg0 kt.PolicyID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkPolicyBad", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkPolicyBad indicates an expected call of MarkPolicyBad
func (mr *MockDataSourceMockRecorder) MarkPolicyBad(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPolicyBad", reflect.TypeOf((*MockDataSource)(nil).MarkPolicyBad), arg0)
}

// MarkRTBHAnnounceForDevices mocks base method
func (m *MockDataSource) MarkRTBHAnnounceForDevices(arg0 kt.Cid, arg1 *kt.DeviceIDSet, arg2 string, arg3 []byte, arg4 kt.MitigationPlatformID, arg5 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRTBHAnnounceForDevices", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRTBHAnnounceForDevices indicates an expected call of MarkRTBHAnnounceForDevices
func (mr *MockDataSourceMockRecorder) MarkRTBHAnnounceForDevices(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRTBHAnnounceForDevices", reflect.TypeOf((*MockDataSource)(nil).MarkRTBHAnnounceForDevices), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MarkRTBHWithdrawForDevices mocks base method
func (m *MockDataSource) MarkRTBHWithdrawForDevices(arg0 kt.Cid, arg1 *kt.DeviceIDSet, arg2 string, arg3 []byte, arg4 kt.MitigationPlatformID, arg5 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRTBHWithdrawForDevices", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRTBHWithdrawForDevices indicates an expected call of MarkRTBHWithdrawForDevices
func (mr *MockDataSourceMockRecorder) MarkRTBHWithdrawForDevices(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRTBHWithdrawForDevices", reflect.TypeOf((*MockDataSource)(nil).MarkRTBHWithdrawForDevices), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MutePolicy mocks base method
func (m *MockDataSource) MutePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MutePolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MutePolicy indicates an expected call of MutePolicy
func (mr *MockDataSourceMockRecorder) MutePolicy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutePolicy", reflect.TypeOf((*MockDataSource)(nil).MutePolicy), arg0, arg1, arg2, arg3)
}

// NewChwwwTransaction mocks base method
func (m *MockDataSource) NewChwwwTransaction() (kt.ChwwwTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChwwwTransaction")
	ret0, _ := ret[0].(kt.ChwwwTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewChwwwTransaction indicates an expected call of NewChwwwTransaction
func (mr *MockDataSourceMockRecorder) NewChwwwTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChwwwTransaction", reflect.TypeOf((*MockDataSource)(nil).NewChwwwTransaction))
}

// RefreshConfigDigests mocks base method
func (m *MockDataSource) RefreshConfigDigests(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshConfigDigests", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshConfigDigests indicates an expected call of RefreshConfigDigests
func (mr *MockDataSourceMockRecorder) RefreshConfigDigests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshConfigDigests", reflect.TypeOf((*MockDataSource)(nil).RefreshConfigDigests), arg0)
}

// RemoveAlarmHistoryOldEntries mocks base method
func (m *MockDataSource) RemoveAlarmHistoryOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAlarmHistoryOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAlarmHistoryOldEntries indicates an expected call of RemoveAlarmHistoryOldEntries
func (mr *MockDataSourceMockRecorder) RemoveAlarmHistoryOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAlarmHistoryOldEntries", reflect.TypeOf((*MockDataSource)(nil).RemoveAlarmHistoryOldEntries), arg0, arg1)
}

// RemoveAlarmMatchHistoricalEntries mocks base method
func (m *MockDataSource) RemoveAlarmMatchHistoricalEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAlarmMatchHistoricalEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAlarmMatchHistoricalEntries indicates an expected call of RemoveAlarmMatchHistoricalEntries
func (mr *MockDataSourceMockRecorder) RemoveAlarmMatchHistoricalEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAlarmMatchHistoricalEntries", reflect.TypeOf((*MockDataSource)(nil).RemoveAlarmMatchHistoricalEntries), arg0, arg1)
}

// RemoveBaselineBackfillJobsOldEntries mocks base method
func (m *MockDataSource) RemoveBaselineBackfillJobsOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBaselineBackfillJobsOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBaselineBackfillJobsOldEntries indicates an expected call of RemoveBaselineBackfillJobsOldEntries
func (mr *MockDataSourceMockRecorder) RemoveBaselineBackfillJobsOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBaselineBackfillJobsOldEntries", reflect.TypeOf((*MockDataSource)(nil).RemoveBaselineBackfillJobsOldEntries), arg0, arg1)
}

// RemoveBaselineOldEntries mocks base method
func (m *MockDataSource) RemoveBaselineOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBaselineOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBaselineOldEntries indicates an expected call of RemoveBaselineOldEntries
func (mr *MockDataSourceMockRecorder) RemoveBaselineOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBaselineOldEntries", reflect.TypeOf((*MockDataSource)(nil).RemoveBaselineOldEntries), arg0, arg1)
}

// RemoveClearedAlarmOldEntries mocks base method
func (m *MockDataSource) RemoveClearedAlarmOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClearedAlarmOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveClearedAlarmOldEntries indicates an expected call of RemoveClearedAlarmOldEntries
func (mr *MockDataSourceMockRecorder) RemoveClearedAlarmOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClearedAlarmOldEntries", reflect.TypeOf((*MockDataSource)(nil).RemoveClearedAlarmOldEntries), arg0, arg1)
}

// RemoveMachineLogOldEntries mocks base method
func (m *MockDataSource) RemoveMachineLogOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMachineLogOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMachineLogOldEntries indicates an expected call of RemoveMachineLogOldEntries
func (mr *MockDataSourceMockRecorder) RemoveMachineLogOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMachineLogOldEntries", reflect.TypeOf((*MockDataSource)(nil).RemoveMachineLogOldEntries), arg0, arg1)
}

// RemoveMachinesOldEntries mocks base method
func (m *MockDataSource) RemoveMachinesOldEntries(arg0 time.Duration, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMachinesOldEntries", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMachinesOldEntries indicates an expected call of RemoveMachinesOldEntries
func (mr *MockDataSourceMockRecorder) RemoveMachinesOldEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMachinesOldEntries", reflect.TypeOf((*MockDataSource)(nil).RemoveMachinesOldEntries), arg0, arg1)
}

// RunAlarmStatementsBatch mocks base method
func (m *MockDataSource) RunAlarmStatementsBatch(arg0 []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAlarmStatementsBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunAlarmStatementsBatch indicates an expected call of RunAlarmStatementsBatch
func (mr *MockDataSourceMockRecorder) RunAlarmStatementsBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAlarmStatementsBatch", reflect.TypeOf((*MockDataSource)(nil).RunAlarmStatementsBatch), arg0)
}

// SetNextMitigationID mocks base method
func (m *MockDataSource) SetNextMitigationID(arg0 kt.Cid, arg1 kt.MitigationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNextMitigationID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNextMitigationID indicates an expected call of SetNextMitigationID
func (mr *MockDataSourceMockRecorder) SetNextMitigationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextMitigationID", reflect.TypeOf((*MockDataSource)(nil).SetNextMitigationID), arg0, arg1)
}

// TestBaseline mocks base method
func (m *MockDataSource) TestBaseline(arg0 string, arg1 kt.Cid, arg2 kt.PolicyID, arg3 time.Time) ([]*kt.BaselineValue, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestBaseline", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*kt.BaselineValue)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TestBaseline indicates an expected call of TestBaseline
func (mr *MockDataSourceMockRecorder) TestBaseline(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestBaseline", reflect.TypeOf((*MockDataSource)(nil).TestBaseline), arg0, arg1, arg2, arg3)
}

// UnmutePolicy mocks base method
func (m *MockDataSource) UnmutePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmutePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmutePolicy indicates an expected call of UnmutePolicy
func (mr *MockDataSourceMockRecorder) UnmutePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmutePolicy", reflect.TypeOf((*MockDataSource)(nil).UnmutePolicy), arg0, arg1, arg2)
}

// UpdateAlarmsNotifyEnd mocks base method
func (m *MockDataSource) UpdateAlarmsNotifyEnd(arg0 time.Time, arg1 kt.Cid, arg2 kt.PolicyID, arg3 ...kt.AlarmID) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAlarmsNotifyEnd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlarmsNotifyEnd indicates an expected call of UpdateAlarmsNotifyEnd
func (mr *MockDataSourceMockRecorder) UpdateAlarmsNotifyEnd(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlarmsNotifyEnd", reflect.TypeOf((*MockDataSource)(nil).UpdateAlarmsNotifyEnd), varargs...)
}

// UpdateAlarmsNotifyStart mocks base method
func (m *MockDataSource) UpdateAlarmsNotifyStart(arg0 time.Time, arg1 kt.Cid, arg2 kt.PolicyID, arg3 ...kt.AlarmID) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAlarmsNotifyStart", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlarmsNotifyStart indicates an expected call of UpdateAlarmsNotifyStart
func (mr *MockDataSourceMockRecorder) UpdateAlarmsNotifyStart(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlarmsNotifyStart", reflect.TypeOf((*MockDataSource)(nil).UpdateAlarmsNotifyStart), varargs...)
}

// UpdateDeviceAlertRows mocks base method
func (m *MockDataSource) UpdateDeviceAlertRows(arg0 []*conductor.DeviceAlertRow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceAlertRows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceAlertRows indicates an expected call of UpdateDeviceAlertRows
func (mr *MockDataSourceMockRecorder) UpdateDeviceAlertRows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceAlertRows", reflect.TypeOf((*MockDataSource)(nil).UpdateDeviceAlertRows), arg0)
}

// UpdateMethodTx mocks base method
func (m *MockDataSource) UpdateMethodTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.MitigationMethodID, arg4 kt.MethodUpdateBundle) (*kt.MitigationMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMethodTx", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*kt.MitigationMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMethodTx indicates an expected call of UpdateMethodTx
func (mr *MockDataSourceMockRecorder) UpdateMethodTx(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMethodTx", reflect.TypeOf((*MockDataSource)(nil).UpdateMethodTx), arg0, arg1, arg2, arg3, arg4)
}

// UpdateNotificationChannelsToMethodAssociationTx mocks base method
func (m *MockDataSource) UpdateNotificationChannelsToMethodAssociationTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.MitigationMethodID, arg4 []uint64, arg5 kt.NotifChannelsWrapped) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationChannelsToMethodAssociationTx", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationChannelsToMethodAssociationTx indicates an expected call of UpdateNotificationChannelsToMethodAssociationTx
func (mr *MockDataSourceMockRecorder) UpdateNotificationChannelsToMethodAssociationTx(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationChannelsToMethodAssociationTx", reflect.TypeOf((*MockDataSource)(nil).UpdateNotificationChannelsToMethodAssociationTx), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdatePlatformTx mocks base method
func (m *MockDataSource) UpdatePlatformTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.MitigationPlatformID, arg4 kt.PlatformUpdateBundle) (*kt.MitigationPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlatformTx", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*kt.MitigationPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlatformTx indicates an expected call of UpdatePlatformTx
func (mr *MockDataSourceMockRecorder) UpdatePlatformTx(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlatformTx", reflect.TypeOf((*MockDataSource)(nil).UpdatePlatformTx), arg0, arg1, arg2, arg3, arg4)
}

// UpdatePolicy mocks base method
func (m *MockDataSource) UpdatePolicy(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID, arg3 kt.UserID, arg4 kt.PolicyUpdateBundle) (*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy
func (mr *MockDataSourceMockRecorder) UpdatePolicy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockDataSource)(nil).UpdatePolicy), arg0, arg1, arg2, arg3, arg4)
}

// UpdatePolicyTx mocks base method
func (m *MockDataSource) UpdatePolicyTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.PolicyID, arg4 kt.UserID, arg5 kt.PolicyUpdateBundle) (*kt.AlertPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicyTx", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*kt.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicyTx indicates an expected call of UpdatePolicyTx
func (mr *MockDataSourceMockRecorder) UpdatePolicyTx(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicyTx", reflect.TypeOf((*MockDataSource)(nil).UpdatePolicyTx), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateSavedFilter mocks base method
func (m *MockDataSource) UpdateSavedFilter(arg0 context.Context, arg1 kt.Cid, arg2 kt.SavedFilterID, arg3 kt.SavedFilterUpdateBundle) (*kt.SavedFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSavedFilter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*kt.SavedFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSavedFilter indicates an expected call of UpdateSavedFilter
func (mr *MockDataSourceMockRecorder) UpdateSavedFilter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSavedFilter", reflect.TypeOf((*MockDataSource)(nil).UpdateSavedFilter), arg0, arg1, arg2, arg3)
}

// UpdateThresholds mocks base method
func (m *MockDataSource) UpdateThresholds(arg0 context.Context, arg1 kt.Cid, arg2 kt.PolicyID, arg3, arg4 []*kt.Threshold) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThresholds", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThresholds indicates an expected call of UpdateThresholds
func (mr *MockDataSourceMockRecorder) UpdateThresholds(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThresholds", reflect.TypeOf((*MockDataSource)(nil).UpdateThresholds), arg0, arg1, arg2, arg3, arg4)
}

// UpdateThresholdsTx mocks base method
func (m *MockDataSource) UpdateThresholdsTx(arg0 context.Context, arg1 kt.ChwwwTransaction, arg2 kt.Cid, arg3 kt.PolicyID, arg4, arg5 []*kt.Threshold) ([]*kt.Threshold, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThresholdsTx", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*kt.Threshold)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThresholdsTx indicates an expected call of UpdateThresholdsTx
func (mr *MockDataSourceMockRecorder) UpdateThresholdsTx(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThresholdsTx", reflect.TypeOf((*MockDataSource)(nil).UpdateThresholdsTx), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UploadBaseline mocks base method
func (m *MockDataSource) UploadBaseline(arg0 kt.PolicyID, arg1 kt.Cid, arg2, arg3 time.Time, arg4, arg5, arg6 string, arg7, arg8 float64, arg9 int64, arg10, arg11, arg12, arg13, arg14 float64, arg15 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBaseline", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBaseline indicates an expected call of UploadBaseline
func (mr *MockDataSourceMockRecorder) UploadBaseline(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBaseline", reflect.TypeOf((*MockDataSource)(nil).UploadBaseline), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
}

// ValidateNotificationChannels mocks base method
func (m *MockDataSource) ValidateNotificationChannels(arg0 context.Context, arg1 kt.Cid, arg2 []uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNotificationChannels", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateNotificationChannels indicates an expected call of ValidateNotificationChannels
func (mr *MockDataSourceMockRecorder) ValidateNotificationChannels(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNotificationChannels", reflect.TypeOf((*MockDataSource)(nil).ValidateNotificationChannels), arg0, arg1, arg2)
}

// ValidatePlatformMethodPair mocks base method
func (m *MockDataSource) ValidatePlatformMethodPair(arg0 context.Context, arg1 kt.Cid, arg2 kt.MitigationPlatformID, arg3 kt.MitigationMethodID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePlatformMethodPair", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePlatformMethodPair indicates an expected call of ValidatePlatformMethodPair
func (mr *MockDataSourceMockRecorder) ValidatePlatformMethodPair(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePlatformMethodPair", reflect.TypeOf((*MockDataSource)(nil).ValidatePlatformMethodPair), arg0, arg1, arg2, arg3)
}
