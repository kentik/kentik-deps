// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queues/interfaces/poll/interface_poll.proto

package poll

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IPAddress holds an IP and netmask
type IPAddress struct {
	Address string `protobuf:"bytes,1,opt,name=Address,json=address,proto3" json:"Address,omitempty"`
	Netmask string `protobuf:"bytes,2,opt,name=Netmask,json=netmask,proto3" json:"Netmask,omitempty"`
}

func (m *IPAddress) Reset()      { *m = IPAddress{} }
func (*IPAddress) ProtoMessage() {}
func (*IPAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eef2db19dbbd7ae, []int{0}
}
func (m *IPAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPAddress.Merge(m, src)
}
func (m *IPAddress) XXX_Size() int {
	return m.Size()
}
func (m *IPAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_IPAddress.DiscardUnknown(m)
}

var xxx_messageInfo_IPAddress proto.InternalMessageInfo

func (m *IPAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IPAddress) GetNetmask() string {
	if m != nil {
		return m.Netmask
	}
	return ""
}

// TopASNValue descirbes an ASN and how many packets seen for it
type TopASNValue struct {
	ASN     uint32 `protobuf:"varint,1,opt,name=ASN,json=aSN,proto3" json:"ASN,omitempty"`
	Packets uint64 `protobuf:"varint,2,opt,name=Packets,json=packets,proto3" json:"Packets,omitempty"`
}

func (m *TopASNValue) Reset()      { *m = TopASNValue{} }
func (*TopASNValue) ProtoMessage() {}
func (*TopASNValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eef2db19dbbd7ae, []int{1}
}
func (m *TopASNValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopASNValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopASNValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopASNValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopASNValue.Merge(m, src)
}
func (m *TopASNValue) XXX_Size() int {
	return m.Size()
}
func (m *TopASNValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TopASNValue.DiscardUnknown(m)
}

var xxx_messageInfo_TopASNValue proto.InternalMessageInfo

func (m *TopASNValue) GetASN() uint32 {
	if m != nil {
		return m.ASN
	}
	return 0
}

func (m *TopASNValue) GetPackets() uint64 {
	if m != nil {
		return m.Packets
	}
	return 0
}

// InterfacePoll holds the info about an interface polled via SNMP
type InterfacePoll struct {
	SNMPID                   uint32        `protobuf:"varint,1,opt,name=SNMPID,json=sNMPID,proto3" json:"SNMPID,omitempty"`
	CompanyID                uint32        `protobuf:"varint,2,opt,name=CompanyID,json=companyID,proto3" json:"CompanyID,omitempty"`
	DeviceID                 uint32        `protobuf:"varint,3,opt,name=DeviceID,json=deviceID,proto3" json:"DeviceID,omitempty"`
	Address                  string        `protobuf:"bytes,4,opt,name=Address,json=address,proto3" json:"Address,omitempty"`
	Netmask                  string        `protobuf:"bytes,5,opt,name=Netmask,json=netmask,proto3" json:"Netmask,omitempty"`
	AliasAddresses           []IPAddress   `protobuf:"bytes,6,rep,name=AliasAddresses,json=aliasAddresses,proto3" json:"AliasAddresses"`
	Index                    string        `protobuf:"bytes,7,opt,name=Index,json=index,proto3" json:"Index,omitempty"`
	SpeedMbps                uint64        `protobuf:"varint,8,opt,name=SpeedMbps,json=speedMbps,proto3" json:"SpeedMbps,omitempty"`
	Description              string        `protobuf:"bytes,9,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	Alias                    string        `protobuf:"bytes,10,opt,name=Alias,json=alias,proto3" json:"Alias,omitempty"`
	Type                     uint64        `protobuf:"varint,11,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	TopNexthopASNs           []TopASNValue `protobuf:"bytes,12,rep,name=TopNexthopASNs,json=topNexthopASNs,proto3" json:"TopNexthopASNs"`
	VRFName                  string        `protobuf:"bytes,13,opt,name=VRFName,json=vRFName,proto3" json:"VRFName,omitempty"`
	VRFDescription           string        `protobuf:"bytes,14,opt,name=VRFDescription,json=vRFDescription,proto3" json:"VRFDescription,omitempty"`
	VRFRouteDistinguisher    string        `protobuf:"bytes,15,opt,name=VRFRouteDistinguisher,json=vRFRouteDistinguisher,proto3" json:"VRFRouteDistinguisher,omitempty"`
	VRFExtRouteDistinguisher uint64        `protobuf:"varint,16,opt,name=VRFExtRouteDistinguisher,json=vRFExtRouteDistinguisher,proto3" json:"VRFExtRouteDistinguisher,omitempty"`
	VRFRouteTarget           string        `protobuf:"bytes,17,opt,name=VRFRouteTarget,json=vRFRouteTarget,proto3" json:"VRFRouteTarget,omitempty"`
	// PollStartDateUnixNano holds the start date (unix nano) that this poll started
	PollStartDateUnixNano int64 `protobuf:"varint,18,opt,name=PollStartDateUnixNano,json=pollStartDateUnixNano,proto3" json:"PollStartDateUnixNano,omitempty"`
	// PollInterfacesCount holds how many interfaces in this poll
	PollInterfacesCount uint32 `protobuf:"varint,19,opt,name=PollInterfacesCount,json=pollInterfacesCount,proto3" json:"PollInterfacesCount,omitempty"`
	// PollInterfacesIndex holds the zero-based index
	PollInterfacesIndex  uint32 `protobuf:"varint,20,opt,name=PollInterfacesIndex,json=pollInterfacesIndex,proto3" json:"PollInterfacesIndex,omitempty"`
	IfMtu                string `protobuf:"bytes,21,opt,name=IfMtu,json=ifMtu,proto3" json:"IfMtu,omitempty"`
	IsAbove              string `protobuf:"bytes,23,opt,name=IsAbove,json=isAbove,proto3" json:"IsAbove,omitempty"`
	IsBelow              string `protobuf:"bytes,24,opt,name=IsBelow,json=isBelow,proto3" json:"IsBelow,omitempty"`
	IfLastChange         string `protobuf:"bytes,25,opt,name=IfLastChange,json=ifLastChange,proto3" json:"IfLastChange,omitempty"`
	IfOperStatus         string `protobuf:"bytes,26,opt,name=IfOperStatus,json=ifOperStatus,proto3" json:"IfOperStatus,omitempty"`
	IfAdminStatus        string `protobuf:"bytes,27,opt,name=IfAdminStatus,json=ifAdminStatus,proto3" json:"IfAdminStatus,omitempty"`
	IfPhysAddress        string `protobuf:"bytes,28,opt,name=IfPhysAddress,json=ifPhysAddress,proto3" json:"IfPhysAddress,omitempty"`
	LLDPRemPortID        string `protobuf:"bytes,29,opt,name=LLDPRemPortID,json=lLDPRemPortID,proto3" json:"LLDPRemPortID,omitempty"`
	LLDPRemSysName       string `protobuf:"bytes,30,opt,name=LLDPRemSysName,json=lLDPRemSysName,proto3" json:"LLDPRemSysName,omitempty"`
	LLDPRemPortDesc      string `protobuf:"bytes,31,opt,name=LLDPRemPortDesc,json=lLDPRemPortDesc,proto3" json:"LLDPRemPortDesc,omitempty"`
	LLDPRemPortIDSubType string `protobuf:"bytes,32,opt,name=LLDPRemPortIDSubType,json=lLDPRemPortIDSubType,proto3" json:"LLDPRemPortIDSubType,omitempty"`
	IfConnectorPresent   string `protobuf:"bytes,33,opt,name=IfConnectorPresent,json=ifConnectorPresent,proto3" json:"IfConnectorPresent,omitempty"`
	IfType               uint64 `protobuf:"varint,34,opt,name=IfType,json=ifType,proto3" json:"IfType,omitempty"`
}

func (m *InterfacePoll) Reset()      { *m = InterfacePoll{} }
func (*InterfacePoll) ProtoMessage() {}
func (*InterfacePoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eef2db19dbbd7ae, []int{2}
}
func (m *InterfacePoll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacePoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacePoll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacePoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacePoll.Merge(m, src)
}
func (m *InterfacePoll) XXX_Size() int {
	return m.Size()
}
func (m *InterfacePoll) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacePoll.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacePoll proto.InternalMessageInfo

func (m *InterfacePoll) GetSNMPID() uint32 {
	if m != nil {
		return m.SNMPID
	}
	return 0
}

func (m *InterfacePoll) GetCompanyID() uint32 {
	if m != nil {
		return m.CompanyID
	}
	return 0
}

func (m *InterfacePoll) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

func (m *InterfacePoll) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *InterfacePoll) GetNetmask() string {
	if m != nil {
		return m.Netmask
	}
	return ""
}

func (m *InterfacePoll) GetAliasAddresses() []IPAddress {
	if m != nil {
		return m.AliasAddresses
	}
	return nil
}

func (m *InterfacePoll) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *InterfacePoll) GetSpeedMbps() uint64 {
	if m != nil {
		return m.SpeedMbps
	}
	return 0
}

func (m *InterfacePoll) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *InterfacePoll) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *InterfacePoll) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *InterfacePoll) GetTopNexthopASNs() []TopASNValue {
	if m != nil {
		return m.TopNexthopASNs
	}
	return nil
}

func (m *InterfacePoll) GetVRFName() string {
	if m != nil {
		return m.VRFName
	}
	return ""
}

func (m *InterfacePoll) GetVRFDescription() string {
	if m != nil {
		return m.VRFDescription
	}
	return ""
}

func (m *InterfacePoll) GetVRFRouteDistinguisher() string {
	if m != nil {
		return m.VRFRouteDistinguisher
	}
	return ""
}

func (m *InterfacePoll) GetVRFExtRouteDistinguisher() uint64 {
	if m != nil {
		return m.VRFExtRouteDistinguisher
	}
	return 0
}

func (m *InterfacePoll) GetVRFRouteTarget() string {
	if m != nil {
		return m.VRFRouteTarget
	}
	return ""
}

func (m *InterfacePoll) GetPollStartDateUnixNano() int64 {
	if m != nil {
		return m.PollStartDateUnixNano
	}
	return 0
}

func (m *InterfacePoll) GetPollInterfacesCount() uint32 {
	if m != nil {
		return m.PollInterfacesCount
	}
	return 0
}

func (m *InterfacePoll) GetPollInterfacesIndex() uint32 {
	if m != nil {
		return m.PollInterfacesIndex
	}
	return 0
}

func (m *InterfacePoll) GetIfMtu() string {
	if m != nil {
		return m.IfMtu
	}
	return ""
}

func (m *InterfacePoll) GetIsAbove() string {
	if m != nil {
		return m.IsAbove
	}
	return ""
}

func (m *InterfacePoll) GetIsBelow() string {
	if m != nil {
		return m.IsBelow
	}
	return ""
}

func (m *InterfacePoll) GetIfLastChange() string {
	if m != nil {
		return m.IfLastChange
	}
	return ""
}

func (m *InterfacePoll) GetIfOperStatus() string {
	if m != nil {
		return m.IfOperStatus
	}
	return ""
}

func (m *InterfacePoll) GetIfAdminStatus() string {
	if m != nil {
		return m.IfAdminStatus
	}
	return ""
}

func (m *InterfacePoll) GetIfPhysAddress() string {
	if m != nil {
		return m.IfPhysAddress
	}
	return ""
}

func (m *InterfacePoll) GetLLDPRemPortID() string {
	if m != nil {
		return m.LLDPRemPortID
	}
	return ""
}

func (m *InterfacePoll) GetLLDPRemSysName() string {
	if m != nil {
		return m.LLDPRemSysName
	}
	return ""
}

func (m *InterfacePoll) GetLLDPRemPortDesc() string {
	if m != nil {
		return m.LLDPRemPortDesc
	}
	return ""
}

func (m *InterfacePoll) GetLLDPRemPortIDSubType() string {
	if m != nil {
		return m.LLDPRemPortIDSubType
	}
	return ""
}

func (m *InterfacePoll) GetIfConnectorPresent() string {
	if m != nil {
		return m.IfConnectorPresent
	}
	return ""
}

func (m *InterfacePoll) GetIfType() uint64 {
	if m != nil {
		return m.IfType
	}
	return 0
}

func init() {
	proto.RegisterType((*IPAddress)(nil), "poll.IPAddress")
	proto.RegisterType((*TopASNValue)(nil), "poll.TopASNValue")
	proto.RegisterType((*InterfacePoll)(nil), "poll.InterfacePoll")
}

func init() {
	proto.RegisterFile("queues/interfaces/poll/interface_poll.proto", fileDescriptor_5eef2db19dbbd7ae)
}

var fileDescriptor_5eef2db19dbbd7ae = []byte{
	// 802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0x49, 0x9a, 0x36, 0x93, 0x26, 0xed, 0x4e, 0xdb, 0xdd, 0xa1, 0x2c, 0xde, 0x10, 0x21,
	0x54, 0x09, 0xd1, 0xa2, 0x65, 0x2f, 0x20, 0xa1, 0x55, 0x5a, 0x53, 0xc9, 0xa8, 0x35, 0x96, 0x5d,
	0x72, 0x45, 0x93, 0x64, 0x92, 0x8c, 0xd6, 0xf1, 0x18, 0xcf, 0x38, 0x34, 0x37, 0x3e, 0x02, 0x1f,
	0x83, 0x8f, 0xb2, 0xc7, 0x1e, 0xf7, 0x84, 0x68, 0x7a, 0xe1, 0xb8, 0x1f, 0x01, 0xcd, 0x1b, 0xbb,
	0x75, 0xd4, 0xf4, 0xe6, 0xdf, 0xbf, 0xe7, 0xf7, 0x66, 0x9e, 0x8d, 0xbe, 0xfe, 0x3d, 0x63, 0x19,
	0x93, 0x27, 0x3c, 0x56, 0x2c, 0x1d, 0xd3, 0x21, 0x93, 0x27, 0x89, 0x88, 0xa2, 0x07, 0xfc, 0x9b,
	0x86, 0xc7, 0x49, 0x2a, 0x94, 0xc0, 0x35, 0xfd, 0x7c, 0xf8, 0xcd, 0x84, 0xab, 0x69, 0x36, 0x38,
	0x1e, 0x8a, 0xd9, 0xc9, 0x44, 0x4c, 0xc4, 0x09, 0x88, 0x83, 0x6c, 0x0c, 0x08, 0x00, 0x3c, 0x99,
	0x50, 0xf7, 0x2d, 0x6a, 0xb8, 0x7e, 0x6f, 0x34, 0x4a, 0x99, 0x94, 0x98, 0xa0, 0xcd, 0xfc, 0x91,
	0x58, 0x1d, 0xeb, 0xa8, 0x11, 0x6c, 0xd2, 0x07, 0xc5, 0x63, 0x6a, 0x46, 0xe5, 0x3b, 0xf2, 0x89,
	0x51, 0x62, 0x03, 0xbb, 0xdf, 0xa3, 0xe6, 0x95, 0x48, 0x7a, 0xa1, 0xd7, 0xa7, 0x51, 0xc6, 0xf0,
	0x2e, 0xaa, 0xf6, 0x42, 0x0f, 0xe2, 0xad, 0xa0, 0x4a, 0x43, 0x4f, 0x47, 0x7d, 0x3a, 0x7c, 0xc7,
	0x94, 0x84, 0x68, 0x2d, 0xd8, 0x4c, 0x0c, 0xec, 0xde, 0x35, 0x50, 0xcb, 0x2d, 0x26, 0xf1, 0x45,
	0x14, 0xe1, 0xe7, 0xa8, 0x1e, 0x7a, 0x97, 0xbe, 0xeb, 0xe4, 0x05, 0xea, 0x12, 0x10, 0x7e, 0x89,
	0x1a, 0x67, 0x62, 0x96, 0xd0, 0x78, 0xe1, 0x3a, 0x50, 0xa5, 0x15, 0x34, 0x86, 0x05, 0x81, 0x0f,
	0xd1, 0x96, 0xc3, 0xe6, 0x7c, 0xc8, 0x5c, 0x87, 0x54, 0x41, 0xdc, 0x1a, 0xe5, 0xb8, 0x3c, 0x52,
	0xed, 0xc9, 0x91, 0x36, 0x56, 0x46, 0xc2, 0x3f, 0xa2, 0x76, 0x2f, 0xe2, 0x54, 0xe6, 0x41, 0x26,
	0x49, 0xbd, 0x53, 0x3d, 0x6a, 0xbe, 0xde, 0x39, 0x86, 0xd3, 0xbe, 0x3f, 0xaf, 0xd3, 0xda, 0xfb,
	0x7f, 0x5e, 0x55, 0x82, 0x36, 0x5d, 0x31, 0xe3, 0x7d, 0xb4, 0xe1, 0xc6, 0x23, 0x76, 0x4d, 0x36,
	0xa1, 0xec, 0x06, 0xd7, 0x40, 0x8f, 0x10, 0x26, 0x8c, 0x8d, 0x2e, 0x07, 0x89, 0x24, 0x5b, 0x70,
	0x10, 0x0d, 0x59, 0x10, 0xb8, 0x83, 0x9a, 0x0e, 0x93, 0xc3, 0x94, 0x27, 0x8a, 0x8b, 0x98, 0x34,
	0x20, 0xd9, 0x1c, 0x3d, 0x50, 0xba, 0x2a, 0x34, 0x45, 0x90, 0xa9, 0x0a, 0x2f, 0xc5, 0x18, 0xd5,
	0xae, 0x16, 0x09, 0x23, 0x4d, 0x28, 0x58, 0x53, 0x8b, 0x84, 0xe1, 0xb7, 0xa8, 0x7d, 0x25, 0x12,
	0x8f, 0x5d, 0xab, 0x29, 0x5c, 0x8c, 0x24, 0xdb, 0xd0, 0xfe, 0x33, 0xd3, 0x7e, 0xe9, 0xb6, 0x8a,
	0x01, 0xd4, 0x8a, 0x5d, 0x9f, 0x4c, 0x3f, 0x38, 0xf7, 0xe8, 0x8c, 0x91, 0x96, 0x39, 0x99, 0xb9,
	0x81, 0xf8, 0x2b, 0xd4, 0xee, 0x07, 0xe7, 0xe5, 0x4e, 0xdb, 0x60, 0x68, 0xcf, 0x57, 0x58, 0xfc,
	0x06, 0x1d, 0xf4, 0x83, 0xf3, 0x40, 0x64, 0x8a, 0x39, 0x5c, 0x2a, 0x1e, 0x4f, 0x32, 0x2e, 0xa7,
	0x2c, 0x25, 0x3b, 0x60, 0x3f, 0x98, 0xaf, 0x13, 0xf1, 0x0f, 0x88, 0xf4, 0x83, 0xf3, 0x9f, 0xae,
	0xd5, 0x9a, 0xe0, 0x2e, 0x0c, 0x48, 0xe6, 0x4f, 0xe8, 0x79, 0x67, 0x20, 0x5c, 0xd1, 0x74, 0xc2,
	0x14, 0x79, 0x76, 0xdf, 0x59, 0x89, 0xd5, 0x9d, 0xe9, 0x4d, 0x0b, 0x15, 0x4d, 0x95, 0x43, 0x15,
	0xfb, 0x35, 0xe6, 0xd7, 0x1e, 0x8d, 0x05, 0xc1, 0x1d, 0xeb, 0xa8, 0x1a, 0x1c, 0x24, 0xeb, 0x44,
	0xfc, 0x2d, 0xda, 0xd3, 0xa9, 0xfb, 0x65, 0x95, 0x67, 0x22, 0x8b, 0x15, 0xd9, 0x83, 0x65, 0xdb,
	0x4b, 0x1e, 0x4b, 0x8f, 0x13, 0x66, 0x25, 0xf6, 0xd7, 0x25, 0x40, 0x82, 0xb5, 0x19, 0x5f, 0xaa,
	0x8c, 0x1c, 0xe4, 0x6b, 0xa3, 0x81, 0xbe, 0x0b, 0x57, 0xf6, 0x06, 0x62, 0xce, 0xc8, 0x0b, 0x73,
	0x17, 0xdc, 0x40, 0xa3, 0x9c, 0xb2, 0x48, 0xfc, 0x41, 0x48, 0xa1, 0x00, 0xc4, 0x5d, 0xb4, 0xed,
	0x8e, 0x2f, 0xa8, 0x54, 0x67, 0x53, 0x1a, 0x4f, 0x18, 0xf9, 0x14, 0xe4, 0x6d, 0x5e, 0xe2, 0x8c,
	0xe7, 0x97, 0x84, 0xa5, 0xa1, 0xa2, 0x2a, 0x93, 0xe4, 0xb0, 0xf0, 0x3c, 0x70, 0xf8, 0x4b, 0xd4,
	0x72, 0xc7, 0xbd, 0xd1, 0x8c, 0xc7, 0xb9, 0xe9, 0x33, 0x30, 0xb5, 0x78, 0x99, 0x34, 0x2e, 0x7f,
	0xba, 0x28, 0xbe, 0x00, 0xf2, 0xb2, 0x70, 0x95, 0x48, 0xed, 0xba, 0xb8, 0x70, 0xfc, 0x80, 0xcd,
	0x7c, 0x91, 0x2a, 0xd7, 0x21, 0x9f, 0x1b, 0x57, 0x54, 0x26, 0xf5, 0x2d, 0xe6, 0xae, 0x70, 0x21,
	0x61, 0x01, 0x6d, 0x73, 0x8b, 0xd1, 0x0a, 0x8b, 0x8f, 0xd0, 0x4e, 0xa9, 0x9a, 0xde, 0x3c, 0xf2,
	0x0a, 0x8c, 0x3b, 0xd1, 0x2a, 0x8d, 0x5f, 0xa3, 0xfd, 0x95, 0xf7, 0x86, 0xd9, 0x00, 0x3e, 0x98,
	0x0e, 0xd8, 0xf7, 0xa3, 0x35, 0x1a, 0x3e, 0x46, 0xd8, 0x1d, 0x9f, 0x89, 0x38, 0x66, 0x43, 0x25,
	0x52, 0x3f, 0x65, 0x92, 0xc5, 0x8a, 0x7c, 0x01, 0x09, 0xcc, 0x1f, 0x29, 0xfa, 0xaf, 0xe5, 0x8e,
	0xa1, 0x6a, 0x17, 0xb6, 0xb4, 0xce, 0x01, 0xfd, 0x5c, 0xdb, 0x7a, 0xbe, 0xfb, 0xe2, 0xf4, 0xcd,
	0xcd, 0xad, 0x5d, 0xf9, 0x70, 0x6b, 0x57, 0x3e, 0xde, 0xda, 0xd6, 0x9f, 0x4b, 0xdb, 0xfa, 0x7b,
	0x69, 0x5b, 0xef, 0x97, 0xb6, 0x75, 0xb3, 0xb4, 0xad, 0x7f, 0x97, 0xb6, 0xf5, 0xdf, 0xd2, 0xae,
	0x7c, 0x5c, 0xda, 0xd6, 0x5f, 0x77, 0x76, 0xe5, 0xe6, 0xce, 0xae, 0x7c, 0xb8, 0xb3, 0x2b, 0x83,
	0x3a, 0xfc, 0x9e, 0xbf, 0xfb, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xd4, 0xd9, 0x27, 0x02, 0x06,
	0x00, 0x00,
}

func (this *IPAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPAddress)
	if !ok {
		that2, ok := that.(IPAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Netmask != that1.Netmask {
		return false
	}
	return true
}
func (this *TopASNValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TopASNValue)
	if !ok {
		that2, ok := that.(TopASNValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ASN != that1.ASN {
		return false
	}
	if this.Packets != that1.Packets {
		return false
	}
	return true
}
func (this *InterfacePoll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterfacePoll)
	if !ok {
		that2, ok := that.(InterfacePoll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SNMPID != that1.SNMPID {
		return false
	}
	if this.CompanyID != that1.CompanyID {
		return false
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Netmask != that1.Netmask {
		return false
	}
	if len(this.AliasAddresses) != len(that1.AliasAddresses) {
		return false
	}
	for i := range this.AliasAddresses {
		if !this.AliasAddresses[i].Equal(&that1.AliasAddresses[i]) {
			return false
		}
	}
	if this.Index != that1.Index {
		return false
	}
	if this.SpeedMbps != that1.SpeedMbps {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Alias != that1.Alias {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.TopNexthopASNs) != len(that1.TopNexthopASNs) {
		return false
	}
	for i := range this.TopNexthopASNs {
		if !this.TopNexthopASNs[i].Equal(&that1.TopNexthopASNs[i]) {
			return false
		}
	}
	if this.VRFName != that1.VRFName {
		return false
	}
	if this.VRFDescription != that1.VRFDescription {
		return false
	}
	if this.VRFRouteDistinguisher != that1.VRFRouteDistinguisher {
		return false
	}
	if this.VRFExtRouteDistinguisher != that1.VRFExtRouteDistinguisher {
		return false
	}
	if this.VRFRouteTarget != that1.VRFRouteTarget {
		return false
	}
	if this.PollStartDateUnixNano != that1.PollStartDateUnixNano {
		return false
	}
	if this.PollInterfacesCount != that1.PollInterfacesCount {
		return false
	}
	if this.PollInterfacesIndex != that1.PollInterfacesIndex {
		return false
	}
	if this.IfMtu != that1.IfMtu {
		return false
	}
	if this.IsAbove != that1.IsAbove {
		return false
	}
	if this.IsBelow != that1.IsBelow {
		return false
	}
	if this.IfLastChange != that1.IfLastChange {
		return false
	}
	if this.IfOperStatus != that1.IfOperStatus {
		return false
	}
	if this.IfAdminStatus != that1.IfAdminStatus {
		return false
	}
	if this.IfPhysAddress != that1.IfPhysAddress {
		return false
	}
	if this.LLDPRemPortID != that1.LLDPRemPortID {
		return false
	}
	if this.LLDPRemSysName != that1.LLDPRemSysName {
		return false
	}
	if this.LLDPRemPortDesc != that1.LLDPRemPortDesc {
		return false
	}
	if this.LLDPRemPortIDSubType != that1.LLDPRemPortIDSubType {
		return false
	}
	if this.IfConnectorPresent != that1.IfConnectorPresent {
		return false
	}
	if this.IfType != that1.IfType {
		return false
	}
	return true
}
func (this *IPAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&poll.IPAddress{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Netmask: "+fmt.Sprintf("%#v", this.Netmask)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TopASNValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&poll.TopASNValue{")
	s = append(s, "ASN: "+fmt.Sprintf("%#v", this.ASN)+",\n")
	s = append(s, "Packets: "+fmt.Sprintf("%#v", this.Packets)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InterfacePoll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 37)
	s = append(s, "&poll.InterfacePoll{")
	s = append(s, "SNMPID: "+fmt.Sprintf("%#v", this.SNMPID)+",\n")
	s = append(s, "CompanyID: "+fmt.Sprintf("%#v", this.CompanyID)+",\n")
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Netmask: "+fmt.Sprintf("%#v", this.Netmask)+",\n")
	if this.AliasAddresses != nil {
		vs := make([]IPAddress, len(this.AliasAddresses))
		for i := range vs {
			vs[i] = this.AliasAddresses[i]
		}
		s = append(s, "AliasAddresses: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "SpeedMbps: "+fmt.Sprintf("%#v", this.SpeedMbps)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Alias: "+fmt.Sprintf("%#v", this.Alias)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.TopNexthopASNs != nil {
		vs := make([]TopASNValue, len(this.TopNexthopASNs))
		for i := range vs {
			vs[i] = this.TopNexthopASNs[i]
		}
		s = append(s, "TopNexthopASNs: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "VRFName: "+fmt.Sprintf("%#v", this.VRFName)+",\n")
	s = append(s, "VRFDescription: "+fmt.Sprintf("%#v", this.VRFDescription)+",\n")
	s = append(s, "VRFRouteDistinguisher: "+fmt.Sprintf("%#v", this.VRFRouteDistinguisher)+",\n")
	s = append(s, "VRFExtRouteDistinguisher: "+fmt.Sprintf("%#v", this.VRFExtRouteDistinguisher)+",\n")
	s = append(s, "VRFRouteTarget: "+fmt.Sprintf("%#v", this.VRFRouteTarget)+",\n")
	s = append(s, "PollStartDateUnixNano: "+fmt.Sprintf("%#v", this.PollStartDateUnixNano)+",\n")
	s = append(s, "PollInterfacesCount: "+fmt.Sprintf("%#v", this.PollInterfacesCount)+",\n")
	s = append(s, "PollInterfacesIndex: "+fmt.Sprintf("%#v", this.PollInterfacesIndex)+",\n")
	s = append(s, "IfMtu: "+fmt.Sprintf("%#v", this.IfMtu)+",\n")
	s = append(s, "IsAbove: "+fmt.Sprintf("%#v", this.IsAbove)+",\n")
	s = append(s, "IsBelow: "+fmt.Sprintf("%#v", this.IsBelow)+",\n")
	s = append(s, "IfLastChange: "+fmt.Sprintf("%#v", this.IfLastChange)+",\n")
	s = append(s, "IfOperStatus: "+fmt.Sprintf("%#v", this.IfOperStatus)+",\n")
	s = append(s, "IfAdminStatus: "+fmt.Sprintf("%#v", this.IfAdminStatus)+",\n")
	s = append(s, "IfPhysAddress: "+fmt.Sprintf("%#v", this.IfPhysAddress)+",\n")
	s = append(s, "LLDPRemPortID: "+fmt.Sprintf("%#v", this.LLDPRemPortID)+",\n")
	s = append(s, "LLDPRemSysName: "+fmt.Sprintf("%#v", this.LLDPRemSysName)+",\n")
	s = append(s, "LLDPRemPortDesc: "+fmt.Sprintf("%#v", this.LLDPRemPortDesc)+",\n")
	s = append(s, "LLDPRemPortIDSubType: "+fmt.Sprintf("%#v", this.LLDPRemPortIDSubType)+",\n")
	s = append(s, "IfConnectorPresent: "+fmt.Sprintf("%#v", this.IfConnectorPresent)+",\n")
	s = append(s, "IfType: "+fmt.Sprintf("%#v", this.IfType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInterfacePoll(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *IPAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Netmask) > 0 {
		i -= len(m.Netmask)
		copy(dAtA[i:], m.Netmask)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.Netmask)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopASNValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopASNValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopASNValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packets != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.Packets))
		i--
		dAtA[i] = 0x10
	}
	if m.ASN != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.ASN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InterfacePoll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacePoll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacePoll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IfType != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.IfType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if len(m.IfConnectorPresent) > 0 {
		i -= len(m.IfConnectorPresent)
		copy(dAtA[i:], m.IfConnectorPresent)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.IfConnectorPresent)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.LLDPRemPortIDSubType) > 0 {
		i -= len(m.LLDPRemPortIDSubType)
		copy(dAtA[i:], m.LLDPRemPortIDSubType)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.LLDPRemPortIDSubType)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if len(m.LLDPRemPortDesc) > 0 {
		i -= len(m.LLDPRemPortDesc)
		copy(dAtA[i:], m.LLDPRemPortDesc)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.LLDPRemPortDesc)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.LLDPRemSysName) > 0 {
		i -= len(m.LLDPRemSysName)
		copy(dAtA[i:], m.LLDPRemSysName)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.LLDPRemSysName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.LLDPRemPortID) > 0 {
		i -= len(m.LLDPRemPortID)
		copy(dAtA[i:], m.LLDPRemPortID)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.LLDPRemPortID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.IfPhysAddress) > 0 {
		i -= len(m.IfPhysAddress)
		copy(dAtA[i:], m.IfPhysAddress)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.IfPhysAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.IfAdminStatus) > 0 {
		i -= len(m.IfAdminStatus)
		copy(dAtA[i:], m.IfAdminStatus)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.IfAdminStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.IfOperStatus) > 0 {
		i -= len(m.IfOperStatus)
		copy(dAtA[i:], m.IfOperStatus)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.IfOperStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.IfLastChange) > 0 {
		i -= len(m.IfLastChange)
		copy(dAtA[i:], m.IfLastChange)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.IfLastChange)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.IsBelow) > 0 {
		i -= len(m.IsBelow)
		copy(dAtA[i:], m.IsBelow)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.IsBelow)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.IsAbove) > 0 {
		i -= len(m.IsAbove)
		copy(dAtA[i:], m.IsAbove)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.IsAbove)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.IfMtu) > 0 {
		i -= len(m.IfMtu)
		copy(dAtA[i:], m.IfMtu)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.IfMtu)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.PollInterfacesIndex != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.PollInterfacesIndex))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.PollInterfacesCount != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.PollInterfacesCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.PollStartDateUnixNano != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.PollStartDateUnixNano))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.VRFRouteTarget) > 0 {
		i -= len(m.VRFRouteTarget)
		copy(dAtA[i:], m.VRFRouteTarget)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.VRFRouteTarget)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.VRFExtRouteDistinguisher != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.VRFExtRouteDistinguisher))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.VRFRouteDistinguisher) > 0 {
		i -= len(m.VRFRouteDistinguisher)
		copy(dAtA[i:], m.VRFRouteDistinguisher)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.VRFRouteDistinguisher)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.VRFDescription) > 0 {
		i -= len(m.VRFDescription)
		copy(dAtA[i:], m.VRFDescription)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.VRFDescription)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.VRFName) > 0 {
		i -= len(m.VRFName)
		copy(dAtA[i:], m.VRFName)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.VRFName)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TopNexthopASNs) > 0 {
		for iNdEx := len(m.TopNexthopASNs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopNexthopASNs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterfacePoll(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Type != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SpeedMbps != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.SpeedMbps))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AliasAddresses) > 0 {
		for iNdEx := len(m.AliasAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AliasAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterfacePoll(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Netmask) > 0 {
		i -= len(m.Netmask)
		copy(dAtA[i:], m.Netmask)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.Netmask)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintInterfacePoll(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.DeviceID != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.DeviceID))
		i--
		dAtA[i] = 0x18
	}
	if m.CompanyID != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.CompanyID))
		i--
		dAtA[i] = 0x10
	}
	if m.SNMPID != 0 {
		i = encodeVarintInterfacePoll(dAtA, i, uint64(m.SNMPID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterfacePoll(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterfacePoll(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IPAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.Netmask)
	if l > 0 {
		n += 1 + l + sovInterfacePoll(uint64(l))
	}
	return n
}

func (m *TopASNValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ASN != 0 {
		n += 1 + sovInterfacePoll(uint64(m.ASN))
	}
	if m.Packets != 0 {
		n += 1 + sovInterfacePoll(uint64(m.Packets))
	}
	return n
}

func (m *InterfacePoll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SNMPID != 0 {
		n += 1 + sovInterfacePoll(uint64(m.SNMPID))
	}
	if m.CompanyID != 0 {
		n += 1 + sovInterfacePoll(uint64(m.CompanyID))
	}
	if m.DeviceID != 0 {
		n += 1 + sovInterfacePoll(uint64(m.DeviceID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.Netmask)
	if l > 0 {
		n += 1 + l + sovInterfacePoll(uint64(l))
	}
	if len(m.AliasAddresses) > 0 {
		for _, e := range m.AliasAddresses {
			l = e.Size()
			n += 1 + l + sovInterfacePoll(uint64(l))
		}
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovInterfacePoll(uint64(l))
	}
	if m.SpeedMbps != 0 {
		n += 1 + sovInterfacePoll(uint64(m.SpeedMbps))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovInterfacePoll(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovInterfacePoll(uint64(m.Type))
	}
	if len(m.TopNexthopASNs) > 0 {
		for _, e := range m.TopNexthopASNs {
			l = e.Size()
			n += 1 + l + sovInterfacePoll(uint64(l))
		}
	}
	l = len(m.VRFName)
	if l > 0 {
		n += 1 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.VRFDescription)
	if l > 0 {
		n += 1 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.VRFRouteDistinguisher)
	if l > 0 {
		n += 1 + l + sovInterfacePoll(uint64(l))
	}
	if m.VRFExtRouteDistinguisher != 0 {
		n += 2 + sovInterfacePoll(uint64(m.VRFExtRouteDistinguisher))
	}
	l = len(m.VRFRouteTarget)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	if m.PollStartDateUnixNano != 0 {
		n += 2 + sovInterfacePoll(uint64(m.PollStartDateUnixNano))
	}
	if m.PollInterfacesCount != 0 {
		n += 2 + sovInterfacePoll(uint64(m.PollInterfacesCount))
	}
	if m.PollInterfacesIndex != 0 {
		n += 2 + sovInterfacePoll(uint64(m.PollInterfacesIndex))
	}
	l = len(m.IfMtu)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.IsAbove)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.IsBelow)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.IfLastChange)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.IfOperStatus)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.IfAdminStatus)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.IfPhysAddress)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.LLDPRemPortID)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.LLDPRemSysName)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.LLDPRemPortDesc)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.LLDPRemPortIDSubType)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	l = len(m.IfConnectorPresent)
	if l > 0 {
		n += 2 + l + sovInterfacePoll(uint64(l))
	}
	if m.IfType != 0 {
		n += 2 + sovInterfacePoll(uint64(m.IfType))
	}
	return n
}

func sovInterfacePoll(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterfacePoll(x uint64) (n int) {
	return sovInterfacePoll(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *IPAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPAddress{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Netmask:` + fmt.Sprintf("%v", this.Netmask) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TopASNValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TopASNValue{`,
		`ASN:` + fmt.Sprintf("%v", this.ASN) + `,`,
		`Packets:` + fmt.Sprintf("%v", this.Packets) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfacePoll) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAliasAddresses := "[]IPAddress{"
	for _, f := range this.AliasAddresses {
		repeatedStringForAliasAddresses += strings.Replace(strings.Replace(f.String(), "IPAddress", "IPAddress", 1), `&`, ``, 1) + ","
	}
	repeatedStringForAliasAddresses += "}"
	repeatedStringForTopNexthopASNs := "[]TopASNValue{"
	for _, f := range this.TopNexthopASNs {
		repeatedStringForTopNexthopASNs += strings.Replace(strings.Replace(f.String(), "TopASNValue", "TopASNValue", 1), `&`, ``, 1) + ","
	}
	repeatedStringForTopNexthopASNs += "}"
	s := strings.Join([]string{`&InterfacePoll{`,
		`SNMPID:` + fmt.Sprintf("%v", this.SNMPID) + `,`,
		`CompanyID:` + fmt.Sprintf("%v", this.CompanyID) + `,`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Netmask:` + fmt.Sprintf("%v", this.Netmask) + `,`,
		`AliasAddresses:` + repeatedStringForAliasAddresses + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`SpeedMbps:` + fmt.Sprintf("%v", this.SpeedMbps) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Alias:` + fmt.Sprintf("%v", this.Alias) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`TopNexthopASNs:` + repeatedStringForTopNexthopASNs + `,`,
		`VRFName:` + fmt.Sprintf("%v", this.VRFName) + `,`,
		`VRFDescription:` + fmt.Sprintf("%v", this.VRFDescription) + `,`,
		`VRFRouteDistinguisher:` + fmt.Sprintf("%v", this.VRFRouteDistinguisher) + `,`,
		`VRFExtRouteDistinguisher:` + fmt.Sprintf("%v", this.VRFExtRouteDistinguisher) + `,`,
		`VRFRouteTarget:` + fmt.Sprintf("%v", this.VRFRouteTarget) + `,`,
		`PollStartDateUnixNano:` + fmt.Sprintf("%v", this.PollStartDateUnixNano) + `,`,
		`PollInterfacesCount:` + fmt.Sprintf("%v", this.PollInterfacesCount) + `,`,
		`PollInterfacesIndex:` + fmt.Sprintf("%v", this.PollInterfacesIndex) + `,`,
		`IfMtu:` + fmt.Sprintf("%v", this.IfMtu) + `,`,
		`IsAbove:` + fmt.Sprintf("%v", this.IsAbove) + `,`,
		`IsBelow:` + fmt.Sprintf("%v", this.IsBelow) + `,`,
		`IfLastChange:` + fmt.Sprintf("%v", this.IfLastChange) + `,`,
		`IfOperStatus:` + fmt.Sprintf("%v", this.IfOperStatus) + `,`,
		`IfAdminStatus:` + fmt.Sprintf("%v", this.IfAdminStatus) + `,`,
		`IfPhysAddress:` + fmt.Sprintf("%v", this.IfPhysAddress) + `,`,
		`LLDPRemPortID:` + fmt.Sprintf("%v", this.LLDPRemPortID) + `,`,
		`LLDPRemSysName:` + fmt.Sprintf("%v", this.LLDPRemSysName) + `,`,
		`LLDPRemPortDesc:` + fmt.Sprintf("%v", this.LLDPRemPortDesc) + `,`,
		`LLDPRemPortIDSubType:` + fmt.Sprintf("%v", this.LLDPRemPortIDSubType) + `,`,
		`IfConnectorPresent:` + fmt.Sprintf("%v", this.IfConnectorPresent) + `,`,
		`IfType:` + fmt.Sprintf("%v", this.IfType) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInterfacePoll(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *IPAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterfacePoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netmask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Netmask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterfacePoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopASNValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterfacePoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopASNValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopASNValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASN", wireType)
			}
			m.ASN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ASN |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			m.Packets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Packets |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterfacePoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacePoll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterfacePoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfacePoll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfacePoll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNMPID", wireType)
			}
			m.SNMPID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SNMPID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyID", wireType)
			}
			m.CompanyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			m.DeviceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netmask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Netmask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasAddresses = append(m.AliasAddresses, IPAddress{})
			if err := m.AliasAddresses[len(m.AliasAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpeedMbps", wireType)
			}
			m.SpeedMbps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpeedMbps |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopNexthopASNs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopNexthopASNs = append(m.TopNexthopASNs, TopASNValue{})
			if err := m.TopNexthopASNs[len(m.TopNexthopASNs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRFName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRFDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFRouteDistinguisher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRFRouteDistinguisher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFExtRouteDistinguisher", wireType)
			}
			m.VRFExtRouteDistinguisher = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRFExtRouteDistinguisher |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFRouteTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRFRouteTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollStartDateUnixNano", wireType)
			}
			m.PollStartDateUnixNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollStartDateUnixNano |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollInterfacesCount", wireType)
			}
			m.PollInterfacesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollInterfacesCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollInterfacesIndex", wireType)
			}
			m.PollInterfacesIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollInterfacesIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfMtu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfMtu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAbove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsAbove = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBelow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsBelow = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfLastChange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfLastChange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfOperStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfOperStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfAdminStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfAdminStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfPhysAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfPhysAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLDPRemPortID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LLDPRemPortID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLDPRemSysName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LLDPRemSysName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLDPRemPortDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LLDPRemPortDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLDPRemPortIDSubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LLDPRemPortIDSubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfConnectorPresent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfConnectorPresent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfType", wireType)
			}
			m.IfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterfacePoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterfacePoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterfacePoll(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterfacePoll
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterfacePoll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterfacePoll
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterfacePoll
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterfacePoll
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterfacePoll        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterfacePoll          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterfacePoll = fmt.Errorf("proto: unexpected end of group")
)
