// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queues/interfaces/changed/interfaces.proto

package changed

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Interface
type Interface struct {
	SNMPID      uint32 `protobuf:"varint,1,opt,name=SNMPID,json=sNMPID,proto3" json:"SNMPID,omitempty"`
	CompanyID   uint32 `protobuf:"varint,2,opt,name=CompanyID,json=companyID,proto3" json:"CompanyID,omitempty"`
	DeviceID    uint32 `protobuf:"varint,3,opt,name=DeviceID,json=deviceID,proto3" json:"DeviceID,omitempty"`
	Alias       string `protobuf:"bytes,4,opt,name=Alias,json=alias,proto3" json:"Alias,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	Address     string `protobuf:"bytes,6,opt,name=Address,json=address,proto3" json:"Address,omitempty"`
	SpeedMbps   uint32 `protobuf:"varint,7,opt,name=SpeedMbps,json=speedMbps,proto3" json:"SpeedMbps,omitempty"`
	// provider: determined by interface classification
	Provider          string       `protobuf:"bytes,8,opt,name=Provider,json=provider,proto3" json:"Provider,omitempty"`
	Parent            uint32       `protobuf:"varint,9,opt,name=Parent,json=parent,proto3" json:"Parent,omitempty"`
	StartTimeUnixNano int64        `protobuf:"varint,10,opt,name=StartTimeUnixNano,json=startTimeUnixNano,proto3" json:"StartTimeUnixNano,omitempty"`
	EndTimeUnixNano   int64        `protobuf:"varint,11,opt,name=EndTimeUnixNano,json=endTimeUnixNano,proto3" json:"EndTimeUnixNano,omitempty"`
	VRF               InterfaceVRF `protobuf:"bytes,12,opt,name=VRF,json=vRF,proto3" json:"VRF"`
	// connectivity type: determined by interface classification
	ConnectivityType string `protobuf:"bytes,13,opt,name=ConnectivityType,json=connectivityType,proto3" json:"ConnectivityType,omitempty"`
	// network boundary: determined by interface classification
	NetworkBoundary      string `protobuf:"bytes,14,opt,name=NetworkBoundary,json=networkBoundary,proto3" json:"NetworkBoundary,omitempty"`
	Netmask              string `protobuf:"bytes,15,opt,name=Netmask,json=netmask,proto3" json:"Netmask,omitempty"`
	IfMtu                string `protobuf:"bytes,21,opt,name=IfMtu,json=ifMtu,proto3" json:"IfMtu,omitempty"`
	IsAbove              string `protobuf:"bytes,23,opt,name=IsAbove,json=isAbove,proto3" json:"IsAbove,omitempty"`
	IsBelow              string `protobuf:"bytes,24,opt,name=IsBelow,json=isBelow,proto3" json:"IsBelow,omitempty"`
	IfLastChange         string `protobuf:"bytes,25,opt,name=IfLastChange,json=ifLastChange,proto3" json:"IfLastChange,omitempty"`
	IfOperStatus         string `protobuf:"bytes,26,opt,name=IfOperStatus,json=ifOperStatus,proto3" json:"IfOperStatus,omitempty"`
	IfAdminStatus        string `protobuf:"bytes,27,opt,name=IfAdminStatus,json=ifAdminStatus,proto3" json:"IfAdminStatus,omitempty"`
	IfPhysAddress        string `protobuf:"bytes,28,opt,name=IfPhysAddress,json=ifPhysAddress,proto3" json:"IfPhysAddress,omitempty"`
	LLDPRemPortID        string `protobuf:"bytes,29,opt,name=LLDPRemPortID,json=lLDPRemPortID,proto3" json:"LLDPRemPortID,omitempty"`
	LLDPRemSysName       string `protobuf:"bytes,30,opt,name=LLDPRemSysName,json=lLDPRemSysName,proto3" json:"LLDPRemSysName,omitempty"`
	LLDPRemPortDesc      string `protobuf:"bytes,31,opt,name=LLDPRemPortDesc,json=lLDPRemPortDesc,proto3" json:"LLDPRemPortDesc,omitempty"`
	LLDPRemPortIDSubType string `protobuf:"bytes,32,opt,name=LLDPRemPortIDSubType,json=lLDPRemPortIDSubType,proto3" json:"LLDPRemPortIDSubType,omitempty"`
	IfConnectorPresent   string `protobuf:"bytes,33,opt,name=IfConnectorPresent,json=ifConnectorPresent,proto3" json:"IfConnectorPresent,omitempty"`
	IfType               uint64 `protobuf:"varint,34,opt,name=IfType,json=ifType,proto3" json:"IfType,omitempty"`
}

func (m *Interface) Reset()      { *m = Interface{} }
func (*Interface) ProtoMessage() {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed598d0a3d6de446, []int{0}
}
func (m *Interface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return m.Size()
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

func (m *Interface) GetSNMPID() uint32 {
	if m != nil {
		return m.SNMPID
	}
	return 0
}

func (m *Interface) GetCompanyID() uint32 {
	if m != nil {
		return m.CompanyID
	}
	return 0
}

func (m *Interface) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

func (m *Interface) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Interface) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Interface) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Interface) GetSpeedMbps() uint32 {
	if m != nil {
		return m.SpeedMbps
	}
	return 0
}

func (m *Interface) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Interface) GetParent() uint32 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *Interface) GetStartTimeUnixNano() int64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *Interface) GetEndTimeUnixNano() int64 {
	if m != nil {
		return m.EndTimeUnixNano
	}
	return 0
}

func (m *Interface) GetVRF() InterfaceVRF {
	if m != nil {
		return m.VRF
	}
	return InterfaceVRF{}
}

func (m *Interface) GetConnectivityType() string {
	if m != nil {
		return m.ConnectivityType
	}
	return ""
}

func (m *Interface) GetNetworkBoundary() string {
	if m != nil {
		return m.NetworkBoundary
	}
	return ""
}

func (m *Interface) GetNetmask() string {
	if m != nil {
		return m.Netmask
	}
	return ""
}

func (m *Interface) GetIfMtu() string {
	if m != nil {
		return m.IfMtu
	}
	return ""
}

func (m *Interface) GetIsAbove() string {
	if m != nil {
		return m.IsAbove
	}
	return ""
}

func (m *Interface) GetIsBelow() string {
	if m != nil {
		return m.IsBelow
	}
	return ""
}

func (m *Interface) GetIfLastChange() string {
	if m != nil {
		return m.IfLastChange
	}
	return ""
}

func (m *Interface) GetIfOperStatus() string {
	if m != nil {
		return m.IfOperStatus
	}
	return ""
}

func (m *Interface) GetIfAdminStatus() string {
	if m != nil {
		return m.IfAdminStatus
	}
	return ""
}

func (m *Interface) GetIfPhysAddress() string {
	if m != nil {
		return m.IfPhysAddress
	}
	return ""
}

func (m *Interface) GetLLDPRemPortID() string {
	if m != nil {
		return m.LLDPRemPortID
	}
	return ""
}

func (m *Interface) GetLLDPRemSysName() string {
	if m != nil {
		return m.LLDPRemSysName
	}
	return ""
}

func (m *Interface) GetLLDPRemPortDesc() string {
	if m != nil {
		return m.LLDPRemPortDesc
	}
	return ""
}

func (m *Interface) GetLLDPRemPortIDSubType() string {
	if m != nil {
		return m.LLDPRemPortIDSubType
	}
	return ""
}

func (m *Interface) GetIfConnectorPresent() string {
	if m != nil {
		return m.IfConnectorPresent
	}
	return ""
}

func (m *Interface) GetIfType() uint64 {
	if m != nil {
		return m.IfType
	}
	return 0
}

// InterfaceVRF
type InterfaceVRF struct {
	Name                  string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Description           string `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	RouteDistinguisher    string `protobuf:"bytes,3,opt,name=RouteDistinguisher,json=routeDistinguisher,proto3" json:"RouteDistinguisher,omitempty"`
	ExtRouteDistinguisher uint64 `protobuf:"varint,4,opt,name=ExtRouteDistinguisher,json=extRouteDistinguisher,proto3" json:"ExtRouteDistinguisher,omitempty"`
	RouteTarget           string `protobuf:"bytes,5,opt,name=RouteTarget,json=routeTarget,proto3" json:"RouteTarget,omitempty"`
}

func (m *InterfaceVRF) Reset()      { *m = InterfaceVRF{} }
func (*InterfaceVRF) ProtoMessage() {}
func (*InterfaceVRF) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed598d0a3d6de446, []int{1}
}
func (m *InterfaceVRF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceVRF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfaceVRF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfaceVRF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceVRF.Merge(m, src)
}
func (m *InterfaceVRF) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceVRF) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceVRF.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceVRF proto.InternalMessageInfo

func (m *InterfaceVRF) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InterfaceVRF) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *InterfaceVRF) GetRouteDistinguisher() string {
	if m != nil {
		return m.RouteDistinguisher
	}
	return ""
}

func (m *InterfaceVRF) GetExtRouteDistinguisher() uint64 {
	if m != nil {
		return m.ExtRouteDistinguisher
	}
	return 0
}

func (m *InterfaceVRF) GetRouteTarget() string {
	if m != nil {
		return m.RouteTarget
	}
	return ""
}

func init() {
	proto.RegisterType((*Interface)(nil), "changed.Interface")
	proto.RegisterType((*InterfaceVRF)(nil), "changed.InterfaceVRF")
}

func init() {
	proto.RegisterFile("queues/interfaces/changed/interfaces.proto", fileDescriptor_ed598d0a3d6de446)
}

var fileDescriptor_ed598d0a3d6de446 = []byte{
	// 766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xcd, 0x72, 0xda, 0x46,
	0x1c, 0x47, 0x41, 0x06, 0xb1, 0x80, 0x11, 0x1b, 0x48, 0xb6, 0x6e, 0xaa, 0x50, 0xa6, 0xd3, 0x61,
	0x32, 0x0d, 0xcc, 0xa4, 0x79, 0x01, 0xb0, 0xe2, 0x19, 0x31, 0x36, 0x65, 0x84, 0x9b, 0xbb, 0x90,
	0x16, 0xd8, 0x09, 0xec, 0xaa, 0xbb, 0x2b, 0x12, 0x6e, 0x7d, 0x84, 0x3e, 0x46, 0x1f, 0x25, 0x87,
	0x1e, 0x7c, 0xcc, 0xa9, 0x53, 0xe3, 0x4b, 0x4f, 0x1d, 0x3f, 0x42, 0x67, 0x57, 0x28, 0x06, 0xdb,
	0x37, 0xfd, 0x3e, 0xfe, 0xab, 0xff, 0xd7, 0x2e, 0x78, 0xf5, 0x5b, 0x82, 0x13, 0x2c, 0x7a, 0x84,
	0x4a, 0xcc, 0x67, 0x41, 0x88, 0x45, 0x2f, 0x5c, 0x04, 0x74, 0x8e, 0xa3, 0x3d, 0xaa, 0x1b, 0x73,
	0x26, 0x19, 0x2c, 0xee, 0x94, 0x93, 0xd7, 0x73, 0x22, 0x17, 0xc9, 0xb4, 0x1b, 0xb2, 0x55, 0x6f,
	0xce, 0xe6, 0xac, 0xa7, 0xf5, 0x69, 0x32, 0xd3, 0x48, 0x03, 0xfd, 0x95, 0xc6, 0xb5, 0xff, 0x2b,
	0x82, 0x92, 0x97, 0x1d, 0x06, 0x9f, 0x81, 0xc2, 0x64, 0x74, 0x31, 0xf6, 0x5c, 0x64, 0xb4, 0x8c,
	0x4e, 0xd5, 0x2f, 0x08, 0x8d, 0xe0, 0x0b, 0x50, 0x3a, 0x65, 0xab, 0x38, 0xa0, 0x1b, 0xcf, 0x45,
	0x4f, 0xb4, 0x54, 0x0a, 0x33, 0x02, 0x9e, 0x00, 0xcb, 0xc5, 0x6b, 0x12, 0x62, 0xcf, 0x45, 0x79,
	0x2d, 0x5a, 0xd1, 0x0e, 0xc3, 0x06, 0x38, 0xea, 0x2f, 0x49, 0x20, 0x90, 0xd9, 0x32, 0x3a, 0x25,
	0xff, 0x28, 0x50, 0x00, 0xb6, 0x40, 0xd9, 0xc5, 0x22, 0xe4, 0x24, 0x96, 0x84, 0x51, 0x74, 0xa4,
	0xb5, 0x72, 0x74, 0x47, 0x41, 0x04, 0x8a, 0xfd, 0x28, 0xe2, 0x58, 0x08, 0x54, 0xd0, 0x6a, 0x31,
	0x48, 0xa1, 0xca, 0x65, 0x12, 0x63, 0x1c, 0x5d, 0x4c, 0x63, 0x81, 0x8a, 0x69, 0x2e, 0x22, 0x23,
	0x54, 0x2e, 0x63, 0xce, 0xd6, 0x24, 0xc2, 0x1c, 0x59, 0x3a, 0xd0, 0x8a, 0x77, 0x58, 0x55, 0x37,
	0x0e, 0x38, 0xa6, 0x12, 0x95, 0xd2, 0xea, 0x62, 0x8d, 0xe0, 0x4f, 0xa0, 0x3e, 0x91, 0x01, 0x97,
	0x97, 0x64, 0x85, 0x7f, 0xa5, 0xe4, 0xd3, 0x28, 0xa0, 0x0c, 0x81, 0x96, 0xd1, 0xc9, 0xfb, 0x75,
	0x71, 0x5f, 0x80, 0x1d, 0x50, 0x7b, 0x47, 0xa3, 0x03, 0x6f, 0x59, 0x7b, 0x6b, 0xf8, 0x90, 0x86,
	0xaf, 0x41, 0xfe, 0xbd, 0x7f, 0x86, 0x2a, 0x2d, 0xa3, 0x53, 0x7e, 0xd3, 0xec, 0xee, 0x26, 0xd4,
	0xfd, 0xda, 0xee, 0xf7, 0xfe, 0xd9, 0xc0, 0xfc, 0xfc, 0xf7, 0xcb, 0x9c, 0x9f, 0x5f, 0xfb, 0x67,
	0xf0, 0x15, 0xb0, 0x4f, 0x19, 0xa5, 0x38, 0x94, 0x64, 0x4d, 0xe4, 0xe6, 0x72, 0x13, 0x63, 0x54,
	0xd5, 0x25, 0xd8, 0xe1, 0x3d, 0x5e, 0x25, 0x31, 0xc2, 0xf2, 0x23, 0xe3, 0x1f, 0x06, 0x2c, 0xa1,
	0x51, 0xc0, 0x37, 0xe8, 0x58, 0x5b, 0x6b, 0xf4, 0x90, 0x56, 0x8d, 0x1c, 0x61, 0xb9, 0x0a, 0xc4,
	0x07, 0x54, 0x4b, 0x1b, 0x49, 0x53, 0xa8, 0x46, 0xe3, 0xcd, 0x2e, 0x64, 0x82, 0x9a, 0xe9, 0x68,
	0x88, 0x02, 0xca, 0xef, 0x89, 0xfe, 0x94, 0xad, 0x31, 0x7a, 0x9e, 0xfa, 0x49, 0x0a, 0x53, 0x65,
	0x80, 0x97, 0xec, 0x23, 0x42, 0x99, 0xa2, 0x21, 0x6c, 0x83, 0x8a, 0x37, 0x3b, 0x0f, 0x84, 0x3c,
	0xd5, 0x25, 0xa2, 0x6f, 0xb4, 0x5c, 0x21, 0x7b, 0x5c, 0xea, 0xf9, 0x25, 0xc6, 0x7c, 0x22, 0x03,
	0x99, 0x08, 0x74, 0x92, 0x79, 0xee, 0x38, 0xf8, 0x03, 0xa8, 0x7a, 0xb3, 0x7e, 0xb4, 0x22, 0x74,
	0x67, 0xfa, 0x56, 0x9b, 0xaa, 0x64, 0x9f, 0x4c, 0x5d, 0xe3, 0xc5, 0x46, 0x64, 0x0b, 0xf2, 0x22,
	0x73, 0xed, 0x91, 0xca, 0x75, 0x7e, 0xee, 0x8e, 0x7d, 0xbc, 0x1a, 0x33, 0x2e, 0x3d, 0x17, 0x7d,
	0x97, 0xba, 0x96, 0xfb, 0x24, 0xfc, 0x11, 0x1c, 0xef, 0x5c, 0x93, 0x8d, 0x18, 0x05, 0x2b, 0x8c,
	0x1c, 0x6d, 0x3b, 0x5e, 0x1e, 0xb0, 0xaa, 0xdf, 0x7b, 0xa7, 0xa9, 0xdd, 0x45, 0x2f, 0xd3, 0x7e,
	0x2f, 0x0f, 0x69, 0xf8, 0x06, 0x34, 0x0e, 0xfe, 0x3b, 0x49, 0xa6, 0x7a, 0x92, 0x2d, 0x6d, 0x6f,
	0x2c, 0x1f, 0xd1, 0x60, 0x17, 0x40, 0x6f, 0xb6, 0x9b, 0x3d, 0xe3, 0x63, 0x8e, 0x85, 0x5a, 0xd2,
	0xef, 0x75, 0x04, 0x24, 0x0f, 0x14, 0xb5, 0xc8, 0xde, 0x4c, 0x9f, 0xda, 0x6e, 0x19, 0x1d, 0xd3,
	0x2f, 0x10, 0x8d, 0x86, 0xa6, 0x65, 0xdb, 0xf5, 0xa1, 0x69, 0xd5, 0x6d, 0x38, 0x34, 0x2d, 0x68,
	0x3f, 0x1d, 0x9a, 0xd6, 0x53, 0xbb, 0x31, 0x34, 0xad, 0x86, 0xdd, 0x1c, 0x9a, 0xd6, 0x33, 0xfb,
	0x79, 0xfb, 0x2f, 0x03, 0x54, 0xf6, 0x37, 0x10, 0x42, 0x60, 0xea, 0xc2, 0x0d, 0xfd, 0x3b, 0x93,
	0xaa, 0x72, 0xef, 0xdd, 0xcf, 0x27, 0x0f, 0xef, 0x67, 0x17, 0x40, 0x9f, 0x25, 0x12, 0xbb, 0x44,
	0x48, 0x42, 0xe7, 0x09, 0x11, 0x0b, 0xcc, 0xf5, 0xed, 0x2f, 0xf9, 0x90, 0x3f, 0x50, 0xe0, 0x5b,
	0xd0, 0x7c, 0xf7, 0x49, 0x3e, 0x12, 0x62, 0xea, 0x0a, 0x9a, 0xf8, 0x31, 0x51, 0xe5, 0xa1, 0xd9,
	0xcb, 0x80, 0xcf, 0xb1, 0xcc, 0xde, 0x09, 0x7e, 0x47, 0x0d, 0xde, 0x5e, 0x5d, 0x3b, 0xb9, 0x2f,
	0xd7, 0x4e, 0xee, 0xf6, 0xda, 0x31, 0x7e, 0xdf, 0x3a, 0xc6, 0x9f, 0x5b, 0xc7, 0xf8, 0xbc, 0x75,
	0x8c, 0xab, 0xad, 0x63, 0xfc, 0xb3, 0x75, 0x8c, 0x7f, 0xb7, 0x4e, 0xee, 0x76, 0xeb, 0x18, 0x7f,
	0xdc, 0x38, 0xb9, 0xab, 0x1b, 0x27, 0xf7, 0xe5, 0xc6, 0xc9, 0x4d, 0x0b, 0xfa, 0xf1, 0xfb, 0xf9,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0xb7, 0x0e, 0x4e, 0x62, 0x05, 0x00, 0x00,
}

func (this *Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface)
	if !ok {
		that2, ok := that.(Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SNMPID != that1.SNMPID {
		return false
	}
	if this.CompanyID != that1.CompanyID {
		return false
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	if this.Alias != that1.Alias {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.SpeedMbps != that1.SpeedMbps {
		return false
	}
	if this.Provider != that1.Provider {
		return false
	}
	if this.Parent != that1.Parent {
		return false
	}
	if this.StartTimeUnixNano != that1.StartTimeUnixNano {
		return false
	}
	if this.EndTimeUnixNano != that1.EndTimeUnixNano {
		return false
	}
	if !this.VRF.Equal(&that1.VRF) {
		return false
	}
	if this.ConnectivityType != that1.ConnectivityType {
		return false
	}
	if this.NetworkBoundary != that1.NetworkBoundary {
		return false
	}
	if this.Netmask != that1.Netmask {
		return false
	}
	if this.IfMtu != that1.IfMtu {
		return false
	}
	if this.IsAbove != that1.IsAbove {
		return false
	}
	if this.IsBelow != that1.IsBelow {
		return false
	}
	if this.IfLastChange != that1.IfLastChange {
		return false
	}
	if this.IfOperStatus != that1.IfOperStatus {
		return false
	}
	if this.IfAdminStatus != that1.IfAdminStatus {
		return false
	}
	if this.IfPhysAddress != that1.IfPhysAddress {
		return false
	}
	if this.LLDPRemPortID != that1.LLDPRemPortID {
		return false
	}
	if this.LLDPRemSysName != that1.LLDPRemSysName {
		return false
	}
	if this.LLDPRemPortDesc != that1.LLDPRemPortDesc {
		return false
	}
	if this.LLDPRemPortIDSubType != that1.LLDPRemPortIDSubType {
		return false
	}
	if this.IfConnectorPresent != that1.IfConnectorPresent {
		return false
	}
	if this.IfType != that1.IfType {
		return false
	}
	return true
}
func (this *InterfaceVRF) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterfaceVRF)
	if !ok {
		that2, ok := that.(InterfaceVRF)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.RouteDistinguisher != that1.RouteDistinguisher {
		return false
	}
	if this.ExtRouteDistinguisher != that1.ExtRouteDistinguisher {
		return false
	}
	if this.RouteTarget != that1.RouteTarget {
		return false
	}
	return true
}
func (this *Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 32)
	s = append(s, "&changed.Interface{")
	s = append(s, "SNMPID: "+fmt.Sprintf("%#v", this.SNMPID)+",\n")
	s = append(s, "CompanyID: "+fmt.Sprintf("%#v", this.CompanyID)+",\n")
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	s = append(s, "Alias: "+fmt.Sprintf("%#v", this.Alias)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "SpeedMbps: "+fmt.Sprintf("%#v", this.SpeedMbps)+",\n")
	s = append(s, "Provider: "+fmt.Sprintf("%#v", this.Provider)+",\n")
	s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	s = append(s, "StartTimeUnixNano: "+fmt.Sprintf("%#v", this.StartTimeUnixNano)+",\n")
	s = append(s, "EndTimeUnixNano: "+fmt.Sprintf("%#v", this.EndTimeUnixNano)+",\n")
	s = append(s, "VRF: "+strings.Replace(this.VRF.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ConnectivityType: "+fmt.Sprintf("%#v", this.ConnectivityType)+",\n")
	s = append(s, "NetworkBoundary: "+fmt.Sprintf("%#v", this.NetworkBoundary)+",\n")
	s = append(s, "Netmask: "+fmt.Sprintf("%#v", this.Netmask)+",\n")
	s = append(s, "IfMtu: "+fmt.Sprintf("%#v", this.IfMtu)+",\n")
	s = append(s, "IsAbove: "+fmt.Sprintf("%#v", this.IsAbove)+",\n")
	s = append(s, "IsBelow: "+fmt.Sprintf("%#v", this.IsBelow)+",\n")
	s = append(s, "IfLastChange: "+fmt.Sprintf("%#v", this.IfLastChange)+",\n")
	s = append(s, "IfOperStatus: "+fmt.Sprintf("%#v", this.IfOperStatus)+",\n")
	s = append(s, "IfAdminStatus: "+fmt.Sprintf("%#v", this.IfAdminStatus)+",\n")
	s = append(s, "IfPhysAddress: "+fmt.Sprintf("%#v", this.IfPhysAddress)+",\n")
	s = append(s, "LLDPRemPortID: "+fmt.Sprintf("%#v", this.LLDPRemPortID)+",\n")
	s = append(s, "LLDPRemSysName: "+fmt.Sprintf("%#v", this.LLDPRemSysName)+",\n")
	s = append(s, "LLDPRemPortDesc: "+fmt.Sprintf("%#v", this.LLDPRemPortDesc)+",\n")
	s = append(s, "LLDPRemPortIDSubType: "+fmt.Sprintf("%#v", this.LLDPRemPortIDSubType)+",\n")
	s = append(s, "IfConnectorPresent: "+fmt.Sprintf("%#v", this.IfConnectorPresent)+",\n")
	s = append(s, "IfType: "+fmt.Sprintf("%#v", this.IfType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InterfaceVRF) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&changed.InterfaceVRF{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "RouteDistinguisher: "+fmt.Sprintf("%#v", this.RouteDistinguisher)+",\n")
	s = append(s, "ExtRouteDistinguisher: "+fmt.Sprintf("%#v", this.ExtRouteDistinguisher)+",\n")
	s = append(s, "RouteTarget: "+fmt.Sprintf("%#v", this.RouteTarget)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInterfaces(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IfType != 0 {
		i = encodeVarintInterfaces(dAtA, i, uint64(m.IfType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if len(m.IfConnectorPresent) > 0 {
		i -= len(m.IfConnectorPresent)
		copy(dAtA[i:], m.IfConnectorPresent)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.IfConnectorPresent)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.LLDPRemPortIDSubType) > 0 {
		i -= len(m.LLDPRemPortIDSubType)
		copy(dAtA[i:], m.LLDPRemPortIDSubType)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.LLDPRemPortIDSubType)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if len(m.LLDPRemPortDesc) > 0 {
		i -= len(m.LLDPRemPortDesc)
		copy(dAtA[i:], m.LLDPRemPortDesc)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.LLDPRemPortDesc)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.LLDPRemSysName) > 0 {
		i -= len(m.LLDPRemSysName)
		copy(dAtA[i:], m.LLDPRemSysName)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.LLDPRemSysName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.LLDPRemPortID) > 0 {
		i -= len(m.LLDPRemPortID)
		copy(dAtA[i:], m.LLDPRemPortID)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.LLDPRemPortID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.IfPhysAddress) > 0 {
		i -= len(m.IfPhysAddress)
		copy(dAtA[i:], m.IfPhysAddress)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.IfPhysAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.IfAdminStatus) > 0 {
		i -= len(m.IfAdminStatus)
		copy(dAtA[i:], m.IfAdminStatus)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.IfAdminStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.IfOperStatus) > 0 {
		i -= len(m.IfOperStatus)
		copy(dAtA[i:], m.IfOperStatus)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.IfOperStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.IfLastChange) > 0 {
		i -= len(m.IfLastChange)
		copy(dAtA[i:], m.IfLastChange)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.IfLastChange)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.IsBelow) > 0 {
		i -= len(m.IsBelow)
		copy(dAtA[i:], m.IsBelow)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.IsBelow)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.IsAbove) > 0 {
		i -= len(m.IsAbove)
		copy(dAtA[i:], m.IsAbove)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.IsAbove)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.IfMtu) > 0 {
		i -= len(m.IfMtu)
		copy(dAtA[i:], m.IfMtu)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.IfMtu)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Netmask) > 0 {
		i -= len(m.Netmask)
		copy(dAtA[i:], m.Netmask)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.Netmask)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.NetworkBoundary) > 0 {
		i -= len(m.NetworkBoundary)
		copy(dAtA[i:], m.NetworkBoundary)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.NetworkBoundary)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ConnectivityType) > 0 {
		i -= len(m.ConnectivityType)
		copy(dAtA[i:], m.ConnectivityType)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.ConnectivityType)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size, err := m.VRF.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInterfaces(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.EndTimeUnixNano != 0 {
		i = encodeVarintInterfaces(dAtA, i, uint64(m.EndTimeUnixNano))
		i--
		dAtA[i] = 0x58
	}
	if m.StartTimeUnixNano != 0 {
		i = encodeVarintInterfaces(dAtA, i, uint64(m.StartTimeUnixNano))
		i--
		dAtA[i] = 0x50
	}
	if m.Parent != 0 {
		i = encodeVarintInterfaces(dAtA, i, uint64(m.Parent))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x42
	}
	if m.SpeedMbps != 0 {
		i = encodeVarintInterfaces(dAtA, i, uint64(m.SpeedMbps))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x22
	}
	if m.DeviceID != 0 {
		i = encodeVarintInterfaces(dAtA, i, uint64(m.DeviceID))
		i--
		dAtA[i] = 0x18
	}
	if m.CompanyID != 0 {
		i = encodeVarintInterfaces(dAtA, i, uint64(m.CompanyID))
		i--
		dAtA[i] = 0x10
	}
	if m.SNMPID != 0 {
		i = encodeVarintInterfaces(dAtA, i, uint64(m.SNMPID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InterfaceVRF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceVRF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceVRF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RouteTarget) > 0 {
		i -= len(m.RouteTarget)
		copy(dAtA[i:], m.RouteTarget)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.RouteTarget)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ExtRouteDistinguisher != 0 {
		i = encodeVarintInterfaces(dAtA, i, uint64(m.ExtRouteDistinguisher))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RouteDistinguisher) > 0 {
		i -= len(m.RouteDistinguisher)
		copy(dAtA[i:], m.RouteDistinguisher)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.RouteDistinguisher)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInterfaces(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterfaces(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterfaces(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SNMPID != 0 {
		n += 1 + sovInterfaces(uint64(m.SNMPID))
	}
	if m.CompanyID != 0 {
		n += 1 + sovInterfaces(uint64(m.CompanyID))
	}
	if m.DeviceID != 0 {
		n += 1 + sovInterfaces(uint64(m.DeviceID))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovInterfaces(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovInterfaces(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovInterfaces(uint64(l))
	}
	if m.SpeedMbps != 0 {
		n += 1 + sovInterfaces(uint64(m.SpeedMbps))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovInterfaces(uint64(l))
	}
	if m.Parent != 0 {
		n += 1 + sovInterfaces(uint64(m.Parent))
	}
	if m.StartTimeUnixNano != 0 {
		n += 1 + sovInterfaces(uint64(m.StartTimeUnixNano))
	}
	if m.EndTimeUnixNano != 0 {
		n += 1 + sovInterfaces(uint64(m.EndTimeUnixNano))
	}
	l = m.VRF.Size()
	n += 1 + l + sovInterfaces(uint64(l))
	l = len(m.ConnectivityType)
	if l > 0 {
		n += 1 + l + sovInterfaces(uint64(l))
	}
	l = len(m.NetworkBoundary)
	if l > 0 {
		n += 1 + l + sovInterfaces(uint64(l))
	}
	l = len(m.Netmask)
	if l > 0 {
		n += 1 + l + sovInterfaces(uint64(l))
	}
	l = len(m.IfMtu)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	l = len(m.IsAbove)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	l = len(m.IsBelow)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	l = len(m.IfLastChange)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	l = len(m.IfOperStatus)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	l = len(m.IfAdminStatus)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	l = len(m.IfPhysAddress)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	l = len(m.LLDPRemPortID)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	l = len(m.LLDPRemSysName)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	l = len(m.LLDPRemPortDesc)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	l = len(m.LLDPRemPortIDSubType)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	l = len(m.IfConnectorPresent)
	if l > 0 {
		n += 2 + l + sovInterfaces(uint64(l))
	}
	if m.IfType != 0 {
		n += 2 + sovInterfaces(uint64(m.IfType))
	}
	return n
}

func (m *InterfaceVRF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInterfaces(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovInterfaces(uint64(l))
	}
	l = len(m.RouteDistinguisher)
	if l > 0 {
		n += 1 + l + sovInterfaces(uint64(l))
	}
	if m.ExtRouteDistinguisher != 0 {
		n += 1 + sovInterfaces(uint64(m.ExtRouteDistinguisher))
	}
	l = len(m.RouteTarget)
	if l > 0 {
		n += 1 + l + sovInterfaces(uint64(l))
	}
	return n
}

func sovInterfaces(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterfaces(x uint64) (n int) {
	return sovInterfaces(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Interface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface{`,
		`SNMPID:` + fmt.Sprintf("%v", this.SNMPID) + `,`,
		`CompanyID:` + fmt.Sprintf("%v", this.CompanyID) + `,`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`Alias:` + fmt.Sprintf("%v", this.Alias) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`SpeedMbps:` + fmt.Sprintf("%v", this.SpeedMbps) + `,`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`Parent:` + fmt.Sprintf("%v", this.Parent) + `,`,
		`StartTimeUnixNano:` + fmt.Sprintf("%v", this.StartTimeUnixNano) + `,`,
		`EndTimeUnixNano:` + fmt.Sprintf("%v", this.EndTimeUnixNano) + `,`,
		`VRF:` + strings.Replace(strings.Replace(this.VRF.String(), "InterfaceVRF", "InterfaceVRF", 1), `&`, ``, 1) + `,`,
		`ConnectivityType:` + fmt.Sprintf("%v", this.ConnectivityType) + `,`,
		`NetworkBoundary:` + fmt.Sprintf("%v", this.NetworkBoundary) + `,`,
		`Netmask:` + fmt.Sprintf("%v", this.Netmask) + `,`,
		`IfMtu:` + fmt.Sprintf("%v", this.IfMtu) + `,`,
		`IsAbove:` + fmt.Sprintf("%v", this.IsAbove) + `,`,
		`IsBelow:` + fmt.Sprintf("%v", this.IsBelow) + `,`,
		`IfLastChange:` + fmt.Sprintf("%v", this.IfLastChange) + `,`,
		`IfOperStatus:` + fmt.Sprintf("%v", this.IfOperStatus) + `,`,
		`IfAdminStatus:` + fmt.Sprintf("%v", this.IfAdminStatus) + `,`,
		`IfPhysAddress:` + fmt.Sprintf("%v", this.IfPhysAddress) + `,`,
		`LLDPRemPortID:` + fmt.Sprintf("%v", this.LLDPRemPortID) + `,`,
		`LLDPRemSysName:` + fmt.Sprintf("%v", this.LLDPRemSysName) + `,`,
		`LLDPRemPortDesc:` + fmt.Sprintf("%v", this.LLDPRemPortDesc) + `,`,
		`LLDPRemPortIDSubType:` + fmt.Sprintf("%v", this.LLDPRemPortIDSubType) + `,`,
		`IfConnectorPresent:` + fmt.Sprintf("%v", this.IfConnectorPresent) + `,`,
		`IfType:` + fmt.Sprintf("%v", this.IfType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceVRF) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InterfaceVRF{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`RouteDistinguisher:` + fmt.Sprintf("%v", this.RouteDistinguisher) + `,`,
		`ExtRouteDistinguisher:` + fmt.Sprintf("%v", this.ExtRouteDistinguisher) + `,`,
		`RouteTarget:` + fmt.Sprintf("%v", this.RouteTarget) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInterfaces(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterfaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNMPID", wireType)
			}
			m.SNMPID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SNMPID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyID", wireType)
			}
			m.CompanyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			m.DeviceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpeedMbps", wireType)
			}
			m.SpeedMbps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpeedMbps |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeUnixNano", wireType)
			}
			m.StartTimeUnixNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeUnixNano |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeUnixNano", wireType)
			}
			m.EndTimeUnixNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimeUnixNano |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRF", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VRF.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectivityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectivityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkBoundary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkBoundary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netmask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Netmask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfMtu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfMtu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAbove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsAbove = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBelow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsBelow = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfLastChange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfLastChange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfOperStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfOperStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfAdminStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfAdminStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfPhysAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfPhysAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLDPRemPortID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LLDPRemPortID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLDPRemSysName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LLDPRemSysName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLDPRemPortDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LLDPRemPortDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LLDPRemPortIDSubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LLDPRemPortIDSubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfConnectorPresent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfConnectorPresent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfType", wireType)
			}
			m.IfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterfaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterfaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterfaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceVRF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterfaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceVRF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceVRF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteDistinguisher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteDistinguisher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtRouteDistinguisher", wireType)
			}
			m.ExtRouteDistinguisher = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtRouteDistinguisher |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterfaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterfaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterfaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterfaces(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterfaces
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterfaces
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterfaces
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterfaces
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterfaces
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterfaces        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterfaces          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterfaces = fmt.Errorf("proto: unexpected end of group")
)
