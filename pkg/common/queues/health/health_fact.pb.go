// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queues/health/health_fact.proto

package health

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterfaceHealthType int32

const (
	InterfaceAvailability         InterfaceHealthType = 0
	InterfacePerformanceInOctets  InterfaceHealthType = 1
	InterfacePerformanceOutOctets InterfaceHealthType = 2
)

var InterfaceHealthType_name = map[int32]string{
	0: "InterfaceAvailability",
	1: "InterfacePerformanceInOctets",
	2: "InterfacePerformanceOutOctets",
}

var InterfaceHealthType_value = map[string]int32{
	"InterfaceAvailability":         0,
	"InterfacePerformanceInOctets":  1,
	"InterfacePerformanceOutOctets": 2,
}

func (InterfaceHealthType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_420ce30f57f14665, []int{0}
}

type DeviceHealthType int32

const (
	DeviceAvailabilitySnmp       DeviceHealthType = 0
	DevicePerformanceCpuBusy     DeviceHealthType = 1
	DevicePerformanceMemFree     DeviceHealthType = 2
	DevicePerformanceMemInUsePct DeviceHealthType = 3
)

var DeviceHealthType_name = map[int32]string{
	0: "DeviceAvailabilitySnmp",
	1: "DevicePerformanceCpuBusy",
	2: "DevicePerformanceMemFree",
	3: "DevicePerformanceMemInUsePct",
}

var DeviceHealthType_value = map[string]int32{
	"DeviceAvailabilitySnmp":       0,
	"DevicePerformanceCpuBusy":     1,
	"DevicePerformanceMemFree":     2,
	"DevicePerformanceMemInUsePct": 3,
}

func (DeviceHealthType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_420ce30f57f14665, []int{1}
}

type ComponentHealthType int32

const (
	DeviceComponentPerformanceCpuBusy     ComponentHealthType = 0
	DeviceComponentPerformanceMemFree     ComponentHealthType = 1
	DeviceComponentPerformanceMemInUsePct ComponentHealthType = 2
)

var ComponentHealthType_name = map[int32]string{
	0: "DeviceComponentPerformanceCpuBusy",
	1: "DeviceComponentPerformanceMemFree",
	2: "DeviceComponentPerformanceMemInUsePct",
}

var ComponentHealthType_value = map[string]int32{
	"DeviceComponentPerformanceCpuBusy":     0,
	"DeviceComponentPerformanceMemFree":     1,
	"DeviceComponentPerformanceMemInUsePct": 2,
}

func (ComponentHealthType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_420ce30f57f14665, []int{2}
}

type InterfaceHealthFact struct {
	Type  InterfaceHealthType `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=health.InterfaceHealthType" json:"Type,omitempty"`
	Value uint64              `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *InterfaceHealthFact) Reset()      { *m = InterfaceHealthFact{} }
func (*InterfaceHealthFact) ProtoMessage() {}
func (*InterfaceHealthFact) Descriptor() ([]byte, []int) {
	return fileDescriptor_420ce30f57f14665, []int{0}
}
func (m *InterfaceHealthFact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceHealthFact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfaceHealthFact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfaceHealthFact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceHealthFact.Merge(m, src)
}
func (m *InterfaceHealthFact) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceHealthFact) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceHealthFact.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceHealthFact proto.InternalMessageInfo

func (m *InterfaceHealthFact) GetType() InterfaceHealthType {
	if m != nil {
		return m.Type
	}
	return InterfaceAvailability
}

func (m *InterfaceHealthFact) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type DeviceHealthFact struct {
	Type  DeviceHealthType `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=health.DeviceHealthType" json:"Type,omitempty"`
	Value uint64           `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DeviceHealthFact) Reset()      { *m = DeviceHealthFact{} }
func (*DeviceHealthFact) ProtoMessage() {}
func (*DeviceHealthFact) Descriptor() ([]byte, []int) {
	return fileDescriptor_420ce30f57f14665, []int{1}
}
func (m *DeviceHealthFact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceHealthFact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceHealthFact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceHealthFact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceHealthFact.Merge(m, src)
}
func (m *DeviceHealthFact) XXX_Size() int {
	return m.Size()
}
func (m *DeviceHealthFact) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceHealthFact.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceHealthFact proto.InternalMessageInfo

func (m *DeviceHealthFact) GetType() DeviceHealthType {
	if m != nil {
		return m.Type
	}
	return DeviceAvailabilitySnmp
}

func (m *DeviceHealthFact) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ComponentHealthFact struct {
	Type  ComponentHealthType `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=health.ComponentHealthType" json:"Type,omitempty"`
	Value uint64              `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ComponentHealthFact) Reset()      { *m = ComponentHealthFact{} }
func (*ComponentHealthFact) ProtoMessage() {}
func (*ComponentHealthFact) Descriptor() ([]byte, []int) {
	return fileDescriptor_420ce30f57f14665, []int{2}
}
func (m *ComponentHealthFact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentHealthFact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentHealthFact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentHealthFact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentHealthFact.Merge(m, src)
}
func (m *ComponentHealthFact) XXX_Size() int {
	return m.Size()
}
func (m *ComponentHealthFact) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentHealthFact.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentHealthFact proto.InternalMessageInfo

func (m *ComponentHealthFact) GetType() ComponentHealthType {
	if m != nil {
		return m.Type
	}
	return DeviceComponentPerformanceCpuBusy
}

func (m *ComponentHealthFact) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ComponentHealth struct {
	ComponentName  string                 `protobuf:"bytes,1,opt,name=ComponentName,json=componentName,proto3" json:"ComponentName,omitempty"`
	ComponentFacts []*ComponentHealthFact `protobuf:"bytes,2,rep,name=ComponentFacts,json=componentFacts,proto3" json:"ComponentFacts,omitempty"`
}

func (m *ComponentHealth) Reset()      { *m = ComponentHealth{} }
func (*ComponentHealth) ProtoMessage() {}
func (*ComponentHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_420ce30f57f14665, []int{3}
}
func (m *ComponentHealth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentHealth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentHealth.Merge(m, src)
}
func (m *ComponentHealth) XXX_Size() int {
	return m.Size()
}
func (m *ComponentHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentHealth.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentHealth proto.InternalMessageInfo

func (m *ComponentHealth) GetComponentName() string {
	if m != nil {
		return m.ComponentName
	}
	return ""
}

func (m *ComponentHealth) GetComponentFacts() []*ComponentHealthFact {
	if m != nil {
		return m.ComponentFacts
	}
	return nil
}

type InterfaceHealth struct {
	SNMPID         uint32                 `protobuf:"varint,1,opt,name=SNMPID,json=sNMPID,proto3" json:"SNMPID,omitempty"`
	InterfaceFacts []*InterfaceHealthFact `protobuf:"bytes,2,rep,name=InterfaceFacts,json=interfaceFacts,proto3" json:"InterfaceFacts,omitempty"`
}

func (m *InterfaceHealth) Reset()      { *m = InterfaceHealth{} }
func (*InterfaceHealth) ProtoMessage() {}
func (*InterfaceHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_420ce30f57f14665, []int{4}
}
func (m *InterfaceHealth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfaceHealth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfaceHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceHealth.Merge(m, src)
}
func (m *InterfaceHealth) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceHealth.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceHealth proto.InternalMessageInfo

func (m *InterfaceHealth) GetSNMPID() uint32 {
	if m != nil {
		return m.SNMPID
	}
	return 0
}

func (m *InterfaceHealth) GetInterfaceFacts() []*InterfaceHealthFact {
	if m != nil {
		return m.InterfaceFacts
	}
	return nil
}

type DeviceHealth struct {
	CompanyID    uint32              `protobuf:"varint,1,opt,name=CompanyID,json=companyID,proto3" json:"CompanyID,omitempty"`
	DeviceID     uint32              `protobuf:"varint,2,opt,name=DeviceID,json=deviceID,proto3" json:"DeviceID,omitempty"`
	TimeUnixNano int64               `protobuf:"varint,3,opt,name=TimeUnixNano,json=timeUnixNano,proto3" json:"TimeUnixNano,omitempty"`
	DeviceFacts  []*DeviceHealthFact `protobuf:"bytes,4,rep,name=DeviceFacts,json=deviceFacts,proto3" json:"DeviceFacts,omitempty"`
	Interfaces   []*InterfaceHealth  `protobuf:"bytes,5,rep,name=Interfaces,json=interfaces,proto3" json:"Interfaces,omitempty"`
	Components   []*ComponentHealth  `protobuf:"bytes,6,rep,name=Components,json=components,proto3" json:"Components,omitempty"`
}

func (m *DeviceHealth) Reset()      { *m = DeviceHealth{} }
func (*DeviceHealth) ProtoMessage() {}
func (*DeviceHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_420ce30f57f14665, []int{5}
}
func (m *DeviceHealth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceHealth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceHealth.Merge(m, src)
}
func (m *DeviceHealth) XXX_Size() int {
	return m.Size()
}
func (m *DeviceHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceHealth.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceHealth proto.InternalMessageInfo

func (m *DeviceHealth) GetCompanyID() uint32 {
	if m != nil {
		return m.CompanyID
	}
	return 0
}

func (m *DeviceHealth) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

func (m *DeviceHealth) GetTimeUnixNano() int64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *DeviceHealth) GetDeviceFacts() []*DeviceHealthFact {
	if m != nil {
		return m.DeviceFacts
	}
	return nil
}

func (m *DeviceHealth) GetInterfaces() []*InterfaceHealth {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *DeviceHealth) GetComponents() []*ComponentHealth {
	if m != nil {
		return m.Components
	}
	return nil
}

func init() {
	proto.RegisterEnum("health.InterfaceHealthType", InterfaceHealthType_name, InterfaceHealthType_value)
	proto.RegisterEnum("health.DeviceHealthType", DeviceHealthType_name, DeviceHealthType_value)
	proto.RegisterEnum("health.ComponentHealthType", ComponentHealthType_name, ComponentHealthType_value)
	proto.RegisterType((*InterfaceHealthFact)(nil), "health.InterfaceHealthFact")
	proto.RegisterType((*DeviceHealthFact)(nil), "health.DeviceHealthFact")
	proto.RegisterType((*ComponentHealthFact)(nil), "health.ComponentHealthFact")
	proto.RegisterType((*ComponentHealth)(nil), "health.ComponentHealth")
	proto.RegisterType((*InterfaceHealth)(nil), "health.InterfaceHealth")
	proto.RegisterType((*DeviceHealth)(nil), "health.DeviceHealth")
}

func init() { proto.RegisterFile("queues/health/health_fact.proto", fileDescriptor_420ce30f57f14665) }

var fileDescriptor_420ce30f57f14665 = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcf, 0x6e, 0x12, 0x41,
	0x18, 0xdf, 0x59, 0x28, 0x69, 0xbf, 0x16, 0xba, 0x99, 0x6a, 0x5d, 0x6b, 0x1d, 0x29, 0xb1, 0x09,
	0x36, 0x0a, 0x89, 0x9a, 0x98, 0x78, 0xb3, 0x90, 0x46, 0x0e, 0xa5, 0x64, 0xdb, 0x7a, 0x6a, 0x62,
	0x96, 0xed, 0x00, 0x9b, 0xb0, 0x7f, 0x64, 0x67, 0x89, 0x24, 0x1e, 0x7c, 0x00, 0x63, 0x3c, 0xfb,
	0x04, 0x3e, 0x8a, 0x47, 0x8e, 0x3d, 0xca, 0x72, 0xf1, 0xd8, 0x47, 0x30, 0x3b, 0x0b, 0xe3, 0x2e,
	0xdd, 0x96, 0x13, 0x7c, 0xdf, 0xf7, 0xfb, 0x37, 0xff, 0x16, 0x9e, 0x7c, 0xf2, 0xa9, 0x4f, 0xbd,
	0x6a, 0x8f, 0xea, 0x7d, 0xd6, 0x9b, 0xfd, 0x7c, 0xec, 0xe8, 0x06, 0xab, 0xb8, 0x03, 0x87, 0x39,
	0x38, 0x17, 0xb5, 0x76, 0x5e, 0x74, 0x4d, 0xd6, 0xf3, 0xdb, 0x15, 0xc3, 0xb1, 0xaa, 0x5d, 0xa7,
	0xeb, 0x54, 0xf9, 0xb8, 0xed, 0x77, 0x78, 0xc5, 0x0b, 0xfe, 0x2f, 0xa2, 0x95, 0x2e, 0x60, 0xab,
	0x61, 0x33, 0x3a, 0xe8, 0xe8, 0x06, 0x7d, 0xcf, 0x15, 0x8e, 0x74, 0x83, 0xe1, 0x2a, 0x64, 0xcf,
	0x46, 0x2e, 0x55, 0x51, 0x11, 0x95, 0x0b, 0x2f, 0x1f, 0x55, 0x22, 0xf1, 0xca, 0x02, 0x34, 0x84,
	0x68, 0x59, 0x36, 0x72, 0x29, 0xbe, 0x07, 0x2b, 0x43, 0xbd, 0xef, 0x53, 0x55, 0x2e, 0xa2, 0x72,
	0x56, 0x8b, 0x8a, 0xd2, 0x07, 0x50, 0xea, 0x74, 0x68, 0x26, 0xa4, 0x9f, 0x27, 0xa4, 0xd5, 0xb9,
	0x74, 0x1c, 0xb7, 0x54, 0xf7, 0x02, 0xb6, 0x6a, 0x8e, 0xe5, 0x3a, 0x36, 0xb5, 0xd9, 0xf2, 0xd4,
	0x0b, 0xd0, 0xa5, 0xea, 0x5f, 0x60, 0x73, 0x81, 0x82, 0x9f, 0x42, 0x5e, 0xb4, 0x9a, 0xba, 0x15,
	0x59, 0xac, 0x69, 0x79, 0x23, 0xde, 0xc4, 0x35, 0x28, 0x08, 0x54, 0x18, 0xc8, 0x53, 0xe5, 0x62,
	0xa6, 0xbc, 0x7e, 0x6b, 0x92, 0x10, 0xa3, 0x15, 0x8c, 0x04, 0xa5, 0x64, 0xc3, 0xe6, 0xc2, 0x36,
	0xe3, 0x6d, 0xc8, 0x9d, 0x36, 0x8f, 0x5b, 0x8d, 0x3a, 0xb7, 0xcd, 0x6b, 0x39, 0x8f, 0x57, 0xa1,
	0x9f, 0x80, 0xa6, 0xfa, 0xa5, 0x1c, 0xad, 0x56, 0x30, 0x13, 0x94, 0xd2, 0x4f, 0x19, 0x36, 0xe2,
	0x9b, 0x8f, 0x77, 0x61, 0x2d, 0xcc, 0xa9, 0xdb, 0x23, 0x61, 0xb8, 0x66, 0xcc, 0x1b, 0x78, 0x07,
	0x56, 0x23, 0x74, 0xa3, 0xce, 0x77, 0x2d, 0xaf, 0xad, 0x5e, 0xce, 0x6a, 0x5c, 0x82, 0x8d, 0x33,
	0xd3, 0xa2, 0xe7, 0xb6, 0xf9, 0xb9, 0xa9, 0xdb, 0x8e, 0x9a, 0x29, 0xa2, 0x72, 0x46, 0xdb, 0x60,
	0xb1, 0x1e, 0x7e, 0x0b, 0xeb, 0x11, 0x3f, 0x0a, 0x9c, 0xe5, 0x81, 0x53, 0x6f, 0x01, 0x4f, 0xbb,
	0x7e, 0xf9, 0x1f, 0x8c, 0xdf, 0x00, 0x88, 0x15, 0x79, 0xea, 0x0a, 0xa7, 0x3e, 0xb8, 0x65, 0xad,
	0x1a, 0x88, 0x75, 0x72, 0xa2, 0xd8, 0x7a, 0x4f, 0xcd, 0x25, 0x89, 0x0b, 0x87, 0xa2, 0x81, 0x38,
	0x10, 0xef, 0xc0, 0xbf, 0xf1, 0x3c, 0xc2, 0xdb, 0x83, 0x1f, 0xc2, 0x7d, 0xd1, 0x7e, 0x37, 0xd4,
	0xcd, 0xbe, 0xde, 0x36, 0xfb, 0x26, 0x1b, 0x29, 0x12, 0x2e, 0xc2, 0xae, 0x18, 0xb5, 0xe8, 0xa0,
	0xe3, 0x0c, 0x2c, 0xdd, 0x36, 0x68, 0xc3, 0x3e, 0x31, 0x18, 0x65, 0x9e, 0x82, 0xf0, 0x1e, 0x3c,
	0x4e, 0x43, 0x9c, 0xf8, 0x6c, 0x06, 0x91, 0x0f, 0xbe, 0xa1, 0xe4, 0xc3, 0xe1, 0xa6, 0x3b, 0xb0,
	0x1d, 0xf5, 0xe2, 0x8e, 0xa7, 0xb6, 0xe5, 0x2a, 0x12, 0xde, 0x05, 0x35, 0x9a, 0xc5, 0x04, 0x6b,
	0xae, 0x7f, 0xe8, 0x7b, 0x23, 0x05, 0xa5, 0x4e, 0x8f, 0xa9, 0x75, 0x34, 0xa0, 0x54, 0x91, 0xc3,
	0xc4, 0x69, 0xd3, 0x86, 0x7d, 0xee, 0xd1, 0x96, 0xc1, 0x94, 0xcc, 0xc1, 0x77, 0x74, 0xe3, 0xbd,
	0xf1, 0x44, 0xfb, 0xb0, 0x17, 0x31, 0xc5, 0x30, 0xc5, 0x5e, 0xba, 0x1b, 0x36, 0xcf, 0x81, 0xf0,
	0x33, 0xd8, 0xbf, 0x13, 0x26, 0x02, 0xc9, 0x87, 0xaf, 0xc7, 0x13, 0x22, 0x5d, 0x4d, 0x88, 0x74,
	0x3d, 0x21, 0xe8, 0x6b, 0x40, 0xd0, 0xaf, 0x80, 0xa0, 0xdf, 0x01, 0x41, 0xe3, 0x80, 0xa0, 0x3f,
	0x01, 0x41, 0x7f, 0x03, 0x22, 0x5d, 0x07, 0x04, 0xfd, 0x98, 0x12, 0x69, 0x3c, 0x25, 0xd2, 0xd5,
	0x94, 0x48, 0xed, 0x1c, 0xff, 0xe4, 0xbd, 0xfa, 0x17, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xc5, 0x6d,
	0xc1, 0x4c, 0x05, 0x00, 0x00,
}

func (x InterfaceHealthType) String() string {
	s, ok := InterfaceHealthType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeviceHealthType) String() string {
	s, ok := DeviceHealthType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ComponentHealthType) String() string {
	s, ok := ComponentHealthType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *InterfaceHealthFact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterfaceHealthFact)
	if !ok {
		that2, ok := that.(InterfaceHealthFact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *DeviceHealthFact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceHealthFact)
	if !ok {
		that2, ok := that.(DeviceHealthFact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *ComponentHealthFact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComponentHealthFact)
	if !ok {
		that2, ok := that.(ComponentHealthFact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *ComponentHealth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComponentHealth)
	if !ok {
		that2, ok := that.(ComponentHealth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ComponentName != that1.ComponentName {
		return false
	}
	if len(this.ComponentFacts) != len(that1.ComponentFacts) {
		return false
	}
	for i := range this.ComponentFacts {
		if !this.ComponentFacts[i].Equal(that1.ComponentFacts[i]) {
			return false
		}
	}
	return true
}
func (this *InterfaceHealth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterfaceHealth)
	if !ok {
		that2, ok := that.(InterfaceHealth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SNMPID != that1.SNMPID {
		return false
	}
	if len(this.InterfaceFacts) != len(that1.InterfaceFacts) {
		return false
	}
	for i := range this.InterfaceFacts {
		if !this.InterfaceFacts[i].Equal(that1.InterfaceFacts[i]) {
			return false
		}
	}
	return true
}
func (this *DeviceHealth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceHealth)
	if !ok {
		that2, ok := that.(DeviceHealth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CompanyID != that1.CompanyID {
		return false
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	if this.TimeUnixNano != that1.TimeUnixNano {
		return false
	}
	if len(this.DeviceFacts) != len(that1.DeviceFacts) {
		return false
	}
	for i := range this.DeviceFacts {
		if !this.DeviceFacts[i].Equal(that1.DeviceFacts[i]) {
			return false
		}
	}
	if len(this.Interfaces) != len(that1.Interfaces) {
		return false
	}
	for i := range this.Interfaces {
		if !this.Interfaces[i].Equal(that1.Interfaces[i]) {
			return false
		}
	}
	if len(this.Components) != len(that1.Components) {
		return false
	}
	for i := range this.Components {
		if !this.Components[i].Equal(that1.Components[i]) {
			return false
		}
	}
	return true
}
func (this *InterfaceHealthFact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&health.InterfaceHealthFact{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceHealthFact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&health.DeviceHealthFact{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComponentHealthFact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&health.ComponentHealthFact{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComponentHealth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&health.ComponentHealth{")
	s = append(s, "ComponentName: "+fmt.Sprintf("%#v", this.ComponentName)+",\n")
	if this.ComponentFacts != nil {
		s = append(s, "ComponentFacts: "+fmt.Sprintf("%#v", this.ComponentFacts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InterfaceHealth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&health.InterfaceHealth{")
	s = append(s, "SNMPID: "+fmt.Sprintf("%#v", this.SNMPID)+",\n")
	if this.InterfaceFacts != nil {
		s = append(s, "InterfaceFacts: "+fmt.Sprintf("%#v", this.InterfaceFacts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceHealth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&health.DeviceHealth{")
	s = append(s, "CompanyID: "+fmt.Sprintf("%#v", this.CompanyID)+",\n")
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	s = append(s, "TimeUnixNano: "+fmt.Sprintf("%#v", this.TimeUnixNano)+",\n")
	if this.DeviceFacts != nil {
		s = append(s, "DeviceFacts: "+fmt.Sprintf("%#v", this.DeviceFacts)+",\n")
	}
	if this.Interfaces != nil {
		s = append(s, "Interfaces: "+fmt.Sprintf("%#v", this.Interfaces)+",\n")
	}
	if this.Components != nil {
		s = append(s, "Components: "+fmt.Sprintf("%#v", this.Components)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHealthFact(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *InterfaceHealthFact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceHealthFact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceHealthFact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintHealthFact(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintHealthFact(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceHealthFact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceHealthFact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceHealthFact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintHealthFact(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintHealthFact(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComponentHealthFact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentHealthFact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentHealthFact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintHealthFact(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintHealthFact(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComponentHealth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ComponentFacts) > 0 {
		for iNdEx := len(m.ComponentFacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ComponentFacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHealthFact(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ComponentName) > 0 {
		i -= len(m.ComponentName)
		copy(dAtA[i:], m.ComponentName)
		i = encodeVarintHealthFact(dAtA, i, uint64(len(m.ComponentName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterfaceHealth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterfaceFacts) > 0 {
		for iNdEx := len(m.InterfaceFacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterfaceFacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHealthFact(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SNMPID != 0 {
		i = encodeVarintHealthFact(dAtA, i, uint64(m.SNMPID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceHealth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Components) > 0 {
		for iNdEx := len(m.Components) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Components[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHealthFact(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHealthFact(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DeviceFacts) > 0 {
		for iNdEx := len(m.DeviceFacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeviceFacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHealthFact(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TimeUnixNano != 0 {
		i = encodeVarintHealthFact(dAtA, i, uint64(m.TimeUnixNano))
		i--
		dAtA[i] = 0x18
	}
	if m.DeviceID != 0 {
		i = encodeVarintHealthFact(dAtA, i, uint64(m.DeviceID))
		i--
		dAtA[i] = 0x10
	}
	if m.CompanyID != 0 {
		i = encodeVarintHealthFact(dAtA, i, uint64(m.CompanyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHealthFact(dAtA []byte, offset int, v uint64) int {
	offset -= sovHealthFact(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterfaceHealthFact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovHealthFact(uint64(m.Type))
	}
	if m.Value != 0 {
		n += 1 + sovHealthFact(uint64(m.Value))
	}
	return n
}

func (m *DeviceHealthFact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovHealthFact(uint64(m.Type))
	}
	if m.Value != 0 {
		n += 1 + sovHealthFact(uint64(m.Value))
	}
	return n
}

func (m *ComponentHealthFact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovHealthFact(uint64(m.Type))
	}
	if m.Value != 0 {
		n += 1 + sovHealthFact(uint64(m.Value))
	}
	return n
}

func (m *ComponentHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ComponentName)
	if l > 0 {
		n += 1 + l + sovHealthFact(uint64(l))
	}
	if len(m.ComponentFacts) > 0 {
		for _, e := range m.ComponentFacts {
			l = e.Size()
			n += 1 + l + sovHealthFact(uint64(l))
		}
	}
	return n
}

func (m *InterfaceHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SNMPID != 0 {
		n += 1 + sovHealthFact(uint64(m.SNMPID))
	}
	if len(m.InterfaceFacts) > 0 {
		for _, e := range m.InterfaceFacts {
			l = e.Size()
			n += 1 + l + sovHealthFact(uint64(l))
		}
	}
	return n
}

func (m *DeviceHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompanyID != 0 {
		n += 1 + sovHealthFact(uint64(m.CompanyID))
	}
	if m.DeviceID != 0 {
		n += 1 + sovHealthFact(uint64(m.DeviceID))
	}
	if m.TimeUnixNano != 0 {
		n += 1 + sovHealthFact(uint64(m.TimeUnixNano))
	}
	if len(m.DeviceFacts) > 0 {
		for _, e := range m.DeviceFacts {
			l = e.Size()
			n += 1 + l + sovHealthFact(uint64(l))
		}
	}
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovHealthFact(uint64(l))
		}
	}
	if len(m.Components) > 0 {
		for _, e := range m.Components {
			l = e.Size()
			n += 1 + l + sovHealthFact(uint64(l))
		}
	}
	return n
}

func sovHealthFact(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHealthFact(x uint64) (n int) {
	return sovHealthFact(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InterfaceHealthFact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InterfaceHealthFact{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceHealthFact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceHealthFact{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComponentHealthFact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComponentHealthFact{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComponentHealth) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForComponentFacts := "[]*ComponentHealthFact{"
	for _, f := range this.ComponentFacts {
		repeatedStringForComponentFacts += strings.Replace(f.String(), "ComponentHealthFact", "ComponentHealthFact", 1) + ","
	}
	repeatedStringForComponentFacts += "}"
	s := strings.Join([]string{`&ComponentHealth{`,
		`ComponentName:` + fmt.Sprintf("%v", this.ComponentName) + `,`,
		`ComponentFacts:` + repeatedStringForComponentFacts + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceHealth) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInterfaceFacts := "[]*InterfaceHealthFact{"
	for _, f := range this.InterfaceFacts {
		repeatedStringForInterfaceFacts += strings.Replace(f.String(), "InterfaceHealthFact", "InterfaceHealthFact", 1) + ","
	}
	repeatedStringForInterfaceFacts += "}"
	s := strings.Join([]string{`&InterfaceHealth{`,
		`SNMPID:` + fmt.Sprintf("%v", this.SNMPID) + `,`,
		`InterfaceFacts:` + repeatedStringForInterfaceFacts + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceHealth) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDeviceFacts := "[]*DeviceHealthFact{"
	for _, f := range this.DeviceFacts {
		repeatedStringForDeviceFacts += strings.Replace(f.String(), "DeviceHealthFact", "DeviceHealthFact", 1) + ","
	}
	repeatedStringForDeviceFacts += "}"
	repeatedStringForInterfaces := "[]*InterfaceHealth{"
	for _, f := range this.Interfaces {
		repeatedStringForInterfaces += strings.Replace(f.String(), "InterfaceHealth", "InterfaceHealth", 1) + ","
	}
	repeatedStringForInterfaces += "}"
	repeatedStringForComponents := "[]*ComponentHealth{"
	for _, f := range this.Components {
		repeatedStringForComponents += strings.Replace(f.String(), "ComponentHealth", "ComponentHealth", 1) + ","
	}
	repeatedStringForComponents += "}"
	s := strings.Join([]string{`&DeviceHealth{`,
		`CompanyID:` + fmt.Sprintf("%v", this.CompanyID) + `,`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`TimeUnixNano:` + fmt.Sprintf("%v", this.TimeUnixNano) + `,`,
		`DeviceFacts:` + repeatedStringForDeviceFacts + `,`,
		`Interfaces:` + repeatedStringForInterfaces + `,`,
		`Components:` + repeatedStringForComponents + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHealthFact(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InterfaceHealthFact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthFact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceHealthFact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceHealthFact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= InterfaceHealthType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHealthFact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceHealthFact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthFact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceHealthFact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceHealthFact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DeviceHealthType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHealthFact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentHealthFact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthFact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentHealthFact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentHealthFact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ComponentHealthType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHealthFact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentHealth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthFact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentHealth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentHealth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealthFact
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealthFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentFacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComponentFacts = append(m.ComponentFacts, &ComponentHealthFact{})
			if err := m.ComponentFacts[len(m.ComponentFacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthFact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceHealth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthFact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceHealth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceHealth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNMPID", wireType)
			}
			m.SNMPID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SNMPID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceFacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceFacts = append(m.InterfaceFacts, &InterfaceHealthFact{})
			if err := m.InterfaceFacts[len(m.InterfaceFacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthFact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceHealth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthFact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceHealth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceHealth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyID", wireType)
			}
			m.CompanyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			m.DeviceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeUnixNano", wireType)
			}
			m.TimeUnixNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeUnixNano |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceFacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceFacts = append(m.DeviceFacts, &DeviceHealthFact{})
			if err := m.DeviceFacts[len(m.DeviceFacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &InterfaceHealth{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Components = append(m.Components, &ComponentHealth{})
			if err := m.Components[len(m.Components)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthFact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHealthFact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHealthFact(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHealthFact
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealthFact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHealthFact
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHealthFact
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHealthFact
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHealthFact        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHealthFact          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHealthFact = fmt.Errorf("proto: unexpected end of group")
)
