// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queues/topology/cloud/hierarchy/hierarchy.proto

package hierarchy

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	cloud "github.com/kentik/common/queues/topology/cloud"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CloudHierarchy represents a known hierarchy in a cloud
type CloudHierarchy struct {
	CompanyID uint32          `protobuf:"varint,1,opt,name=CompanyID,json=companyID,proto3" json:"CompanyID,omitempty"`
	CloudType cloud.CloudType `protobuf:"varint,2,opt,name=CloudType,json=cloudType,proto3,enum=cloud.CloudType" json:"CloudType,omitempty"`
	// TrafficSample represents a windowed accounting of bytes seen in/out between entities
	Hierarchy cloud.CloudHierarchy `protobuf:"bytes,3,opt,name=Hierarchy,json=hierarchy,proto3" json:"Hierarchy"`
}

func (m *CloudHierarchy) Reset()      { *m = CloudHierarchy{} }
func (*CloudHierarchy) ProtoMessage() {}
func (*CloudHierarchy) Descriptor() ([]byte, []int) {
	return fileDescriptor_e28cf1f769a60ba7, []int{0}
}
func (m *CloudHierarchy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudHierarchy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudHierarchy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudHierarchy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudHierarchy.Merge(m, src)
}
func (m *CloudHierarchy) XXX_Size() int {
	return m.Size()
}
func (m *CloudHierarchy) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudHierarchy.DiscardUnknown(m)
}

var xxx_messageInfo_CloudHierarchy proto.InternalMessageInfo

func (m *CloudHierarchy) GetCompanyID() uint32 {
	if m != nil {
		return m.CompanyID
	}
	return 0
}

func (m *CloudHierarchy) GetCloudType() cloud.CloudType {
	if m != nil {
		return m.CloudType
	}
	return cloud.UnknownCloudType
}

func (m *CloudHierarchy) GetHierarchy() cloud.CloudHierarchy {
	if m != nil {
		return m.Hierarchy
	}
	return cloud.CloudHierarchy{}
}

func init() {
	proto.RegisterType((*CloudHierarchy)(nil), "hierarchy.CloudHierarchy")
}

func init() {
	proto.RegisterFile("queues/topology/cloud/hierarchy/hierarchy.proto", fileDescriptor_e28cf1f769a60ba7)
}

var fileDescriptor_e28cf1f769a60ba7 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2f, 0x2c, 0x4d, 0x2d,
	0x4d, 0x2d, 0xd6, 0x2f, 0xc9, 0x2f, 0xc8, 0xcf, 0xc9, 0x4f, 0xaf, 0xd4, 0x4f, 0xce, 0xc9, 0x2f,
	0x4d, 0xd1, 0xcf, 0xc8, 0x4c, 0x2d, 0x4a, 0x2c, 0x4a, 0xce, 0xa8, 0x44, 0xb0, 0xf4, 0x0a, 0x8a,
	0xf2, 0x4b, 0xf2, 0x85, 0x38, 0xe1, 0x02, 0x52, 0x56, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a,
	0xc9, 0xf9, 0xb9, 0xfa, 0xd9, 0xa9, 0x79, 0x25, 0x99, 0xd9, 0xfa, 0xc9, 0xf9, 0xb9, 0xb9, 0xf9,
	0x79, 0x38, 0x0c, 0x05, 0x93, 0x10, 0x63, 0xa4, 0x74, 0x91, 0xf4, 0xa6, 0xe7, 0xa7, 0xe7, 0xeb,
	0x83, 0x85, 0x93, 0x4a, 0xd3, 0xc0, 0x3c, 0x30, 0x07, 0xcc, 0x82, 0x28, 0x57, 0x9a, 0xc9, 0xc8,
	0xc5, 0xe7, 0x0c, 0xd2, 0xee, 0x01, 0xb3, 0x5d, 0x48, 0x86, 0x8b, 0xd3, 0x39, 0x3f, 0xb7, 0x20,
	0x31, 0xaf, 0xd2, 0xd3, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x37, 0x88, 0x33, 0x19, 0x26, 0x20,
	0xa4, 0xc7, 0xc5, 0x09, 0x56, 0x1f, 0x52, 0x59, 0x90, 0x2a, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x67,
	0x24, 0xa0, 0x07, 0x71, 0x00, 0x5c, 0x3c, 0x88, 0x33, 0x19, 0xc6, 0x14, 0xb2, 0xe4, 0xe2, 0x84,
	0x1b, 0x2d, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0x8a, 0xac, 0x1e, 0x2e, 0xe9, 0xc4, 0x72,
	0xe2, 0x9e, 0x3c, 0x43, 0x10, 0x22, 0x18, 0x9c, 0x4c, 0x2e, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50,
	0x8e, 0xe1, 0xc3, 0x43, 0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78,
	0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c,
	0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31,
	0x24, 0xb1, 0x81, 0x3d, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xaa, 0x24, 0xbb, 0x81,
	0x01, 0x00, 0x00,
}

func (this *CloudHierarchy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudHierarchy)
	if !ok {
		that2, ok := that.(CloudHierarchy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CompanyID != that1.CompanyID {
		return false
	}
	if this.CloudType != that1.CloudType {
		return false
	}
	if !this.Hierarchy.Equal(&that1.Hierarchy) {
		return false
	}
	return true
}
func (this *CloudHierarchy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&hierarchy.CloudHierarchy{")
	s = append(s, "CompanyID: "+fmt.Sprintf("%#v", this.CompanyID)+",\n")
	s = append(s, "CloudType: "+fmt.Sprintf("%#v", this.CloudType)+",\n")
	s = append(s, "Hierarchy: "+strings.Replace(this.Hierarchy.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHierarchy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CloudHierarchy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudHierarchy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudHierarchy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Hierarchy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHierarchy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CloudType != 0 {
		i = encodeVarintHierarchy(dAtA, i, uint64(m.CloudType))
		i--
		dAtA[i] = 0x10
	}
	if m.CompanyID != 0 {
		i = encodeVarintHierarchy(dAtA, i, uint64(m.CompanyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHierarchy(dAtA []byte, offset int, v uint64) int {
	offset -= sovHierarchy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CloudHierarchy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompanyID != 0 {
		n += 1 + sovHierarchy(uint64(m.CompanyID))
	}
	if m.CloudType != 0 {
		n += 1 + sovHierarchy(uint64(m.CloudType))
	}
	l = m.Hierarchy.Size()
	n += 1 + l + sovHierarchy(uint64(l))
	return n
}

func sovHierarchy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHierarchy(x uint64) (n int) {
	return sovHierarchy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CloudHierarchy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloudHierarchy{`,
		`CompanyID:` + fmt.Sprintf("%v", this.CompanyID) + `,`,
		`CloudType:` + fmt.Sprintf("%v", this.CloudType) + `,`,
		`Hierarchy:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Hierarchy), "CloudHierarchy", "cloud.CloudHierarchy", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHierarchy(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CloudHierarchy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHierarchy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudHierarchy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudHierarchy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyID", wireType)
			}
			m.CompanyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHierarchy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudType", wireType)
			}
			m.CloudType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHierarchy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CloudType |= cloud.CloudType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hierarchy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHierarchy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHierarchy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHierarchy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Hierarchy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHierarchy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHierarchy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHierarchy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHierarchy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHierarchy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHierarchy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHierarchy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHierarchy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHierarchy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHierarchy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHierarchy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHierarchy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHierarchy = fmt.Errorf("proto: unexpected end of group")
)
