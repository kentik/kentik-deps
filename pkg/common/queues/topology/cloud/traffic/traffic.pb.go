// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queues/topology/cloud/traffic/traffic.proto

package traffic

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	cloud "github.com/kentik/common/queues/topology/cloud"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CompanyCloudTrafficSample represents a windowed sampling of cloud flows or APIs for various aspects
type CompanyCloudTrafficSample struct {
	CompanyID uint32          `protobuf:"varint,1,opt,name=CompanyID,json=companyID,proto3" json:"CompanyID,omitempty"`
	CloudType cloud.CloudType `protobuf:"varint,2,opt,name=CloudType,json=cloudType,proto3,enum=cloud.CloudType" json:"CloudType,omitempty"`
	// TrafficSample represents a windowed accounting of bytes seen in/out between entities
	TrafficSample cloud.CloudTrafficSample `protobuf:"bytes,3,opt,name=TrafficSample,json=trafficSample,proto3" json:"TrafficSample"`
	// RandInt is set with a random integer by the Kafka producer, helping reduce producing
	// duplicates of the same message. The consumer will disregard two messages with the same
	// CompanyID and RandInt, if they're within a short window of time (on the order of minutes)
	RandInt uint64 `protobuf:"varint,4,opt,name=RandInt,json=randInt,proto3" json:"RandInt,omitempty"`
}

func (m *CompanyCloudTrafficSample) Reset()      { *m = CompanyCloudTrafficSample{} }
func (*CompanyCloudTrafficSample) ProtoMessage() {}
func (*CompanyCloudTrafficSample) Descriptor() ([]byte, []int) {
	return fileDescriptor_035463fc1dab67f4, []int{0}
}
func (m *CompanyCloudTrafficSample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompanyCloudTrafficSample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompanyCloudTrafficSample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompanyCloudTrafficSample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanyCloudTrafficSample.Merge(m, src)
}
func (m *CompanyCloudTrafficSample) XXX_Size() int {
	return m.Size()
}
func (m *CompanyCloudTrafficSample) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanyCloudTrafficSample.DiscardUnknown(m)
}

var xxx_messageInfo_CompanyCloudTrafficSample proto.InternalMessageInfo

func (m *CompanyCloudTrafficSample) GetCompanyID() uint32 {
	if m != nil {
		return m.CompanyID
	}
	return 0
}

func (m *CompanyCloudTrafficSample) GetCloudType() cloud.CloudType {
	if m != nil {
		return m.CloudType
	}
	return cloud.UnknownCloudType
}

func (m *CompanyCloudTrafficSample) GetTrafficSample() cloud.CloudTrafficSample {
	if m != nil {
		return m.TrafficSample
	}
	return cloud.CloudTrafficSample{}
}

func (m *CompanyCloudTrafficSample) GetRandInt() uint64 {
	if m != nil {
		return m.RandInt
	}
	return 0
}

func init() {
	proto.RegisterType((*CompanyCloudTrafficSample)(nil), "traffic.CompanyCloudTrafficSample")
}

func init() {
	proto.RegisterFile("queues/topology/cloud/traffic/traffic.proto", fileDescriptor_035463fc1dab67f4)
}

var fileDescriptor_035463fc1dab67f4 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4e, 0xc2, 0x40,
	0x14, 0x86, 0xe7, 0x29, 0x91, 0x74, 0x0c, 0xc6, 0x74, 0x55, 0x88, 0x79, 0x36, 0xae, 0x9a, 0x18,
	0x3b, 0x09, 0xba, 0x72, 0x09, 0xba, 0x60, 0x5b, 0xbd, 0x40, 0x19, 0x4a, 0x25, 0xd0, 0xbe, 0x8a,
	0xd3, 0x05, 0x3b, 0x8f, 0xe0, 0x31, 0x3c, 0x0a, 0x71, 0xc5, 0x92, 0x95, 0x91, 0x61, 0xe3, 0x92,
	0x23, 0x18, 0x67, 0xc0, 0xd0, 0xc4, 0xcd, 0xcc, 0xfb, 0xff, 0x79, 0xff, 0x97, 0x3f, 0xc3, 0x2f,
	0x9f, 0xcb, 0xa4, 0x4c, 0x5e, 0x84, 0xa2, 0x82, 0x26, 0x94, 0xce, 0x84, 0x9c, 0x50, 0x39, 0x10,
	0x6a, 0x1a, 0x0f, 0x87, 0x23, 0xb9, 0xbb, 0xc3, 0x62, 0x4a, 0x8a, 0xdc, 0xfa, 0x56, 0xb6, 0x6e,
	0xd3, 0x91, 0x7a, 0x2a, 0xfb, 0xa1, 0xa4, 0x4c, 0x8c, 0x93, 0x5c, 0x8d, 0xc6, 0x42, 0x52, 0x96,
	0x51, 0x2e, 0xfe, 0xc7, 0x99, 0xd3, 0x42, 0x5a, 0x57, 0x7b, 0xd9, 0x94, 0x52, 0x12, 0xc6, 0xee,
	0x97, 0x43, 0xa3, 0x8c, 0x30, 0x93, 0x5d, 0xbf, 0xf8, 0x00, 0xde, 0xec, 0x52, 0x56, 0xc4, 0xf9,
	0xac, 0xfb, 0x4b, 0x79, 0xb4, 0x15, 0x1e, 0xe2, 0xac, 0x98, 0x24, 0xee, 0x19, 0x77, 0xb6, 0x8f,
	0xbd, 0x3b, 0x0f, 0x7c, 0x08, 0x1a, 0x91, 0x23, 0x77, 0x86, 0x1b, 0x72, 0xc7, 0x66, 0x66, 0x45,
	0xe2, 0x1d, 0xf8, 0x10, 0x9c, 0xb4, 0x4f, 0x43, 0xdb, 0xe5, 0xcf, 0x8f, 0x1c, 0xb9, 0x1b, 0xdd,
	0x7b, 0xde, 0xa8, 0xe0, 0xbd, 0x43, 0x1f, 0x82, 0xe3, 0x76, 0xb3, 0x92, 0xd9, 0x5f, 0xe8, 0xd4,
	0xe6, 0x9f, 0xe7, 0x2c, 0x6a, 0xa8, 0x4a, 0x29, 0x8f, 0xd7, 0xa3, 0x38, 0x1f, 0xf4, 0x72, 0xe5,
	0xd5, 0x7c, 0x08, 0x6a, 0x51, 0x7d, 0x6a, 0x65, 0xe7, 0x66, 0xb1, 0x42, 0xb6, 0x5c, 0x21, 0xdb,
	0xac, 0x10, 0x5e, 0x35, 0xc2, 0xbb, 0x46, 0x98, 0x6b, 0x84, 0x85, 0x46, 0xf8, 0xd2, 0x08, 0xdf,
	0x1a, 0xd9, 0x46, 0x23, 0xbc, 0xad, 0x91, 0x2d, 0xd6, 0xc8, 0x96, 0x6b, 0x64, 0xfd, 0x23, 0xf3,
	0x13, 0xd7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x33, 0xa1, 0x03, 0xac, 0x01, 0x00, 0x00,
}

func (this *CompanyCloudTrafficSample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompanyCloudTrafficSample)
	if !ok {
		that2, ok := that.(CompanyCloudTrafficSample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CompanyID != that1.CompanyID {
		return false
	}
	if this.CloudType != that1.CloudType {
		return false
	}
	if !this.TrafficSample.Equal(&that1.TrafficSample) {
		return false
	}
	if this.RandInt != that1.RandInt {
		return false
	}
	return true
}
func (this *CompanyCloudTrafficSample) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&traffic.CompanyCloudTrafficSample{")
	s = append(s, "CompanyID: "+fmt.Sprintf("%#v", this.CompanyID)+",\n")
	s = append(s, "CloudType: "+fmt.Sprintf("%#v", this.CloudType)+",\n")
	s = append(s, "TrafficSample: "+strings.Replace(this.TrafficSample.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "RandInt: "+fmt.Sprintf("%#v", this.RandInt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTraffic(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CompanyCloudTrafficSample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompanyCloudTrafficSample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompanyCloudTrafficSample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandInt != 0 {
		i = encodeVarintTraffic(dAtA, i, uint64(m.RandInt))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.TrafficSample.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTraffic(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CloudType != 0 {
		i = encodeVarintTraffic(dAtA, i, uint64(m.CloudType))
		i--
		dAtA[i] = 0x10
	}
	if m.CompanyID != 0 {
		i = encodeVarintTraffic(dAtA, i, uint64(m.CompanyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTraffic(dAtA []byte, offset int, v uint64) int {
	offset -= sovTraffic(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CompanyCloudTrafficSample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompanyID != 0 {
		n += 1 + sovTraffic(uint64(m.CompanyID))
	}
	if m.CloudType != 0 {
		n += 1 + sovTraffic(uint64(m.CloudType))
	}
	l = m.TrafficSample.Size()
	n += 1 + l + sovTraffic(uint64(l))
	if m.RandInt != 0 {
		n += 1 + sovTraffic(uint64(m.RandInt))
	}
	return n
}

func sovTraffic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTraffic(x uint64) (n int) {
	return sovTraffic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CompanyCloudTrafficSample) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompanyCloudTrafficSample{`,
		`CompanyID:` + fmt.Sprintf("%v", this.CompanyID) + `,`,
		`CloudType:` + fmt.Sprintf("%v", this.CloudType) + `,`,
		`TrafficSample:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TrafficSample), "CloudTrafficSample", "cloud.CloudTrafficSample", 1), `&`, ``, 1) + `,`,
		`RandInt:` + fmt.Sprintf("%v", this.RandInt) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTraffic(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CompanyCloudTrafficSample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraffic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompanyCloudTrafficSample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompanyCloudTrafficSample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyID", wireType)
			}
			m.CompanyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraffic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudType", wireType)
			}
			m.CloudType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraffic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CloudType |= cloud.CloudType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficSample", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraffic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraffic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTraffic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TrafficSample.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandInt", wireType)
			}
			m.RandInt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraffic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandInt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTraffic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTraffic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTraffic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTraffic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTraffic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTraffic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTraffic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTraffic
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTraffic
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTraffic
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTraffic        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTraffic          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTraffic = fmt.Errorf("proto: unexpected end of group")
)
