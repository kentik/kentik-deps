// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queues/tagging/functest/response/flow_response.proto

package response

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FlowResponse represents a test case for tagging: a test flow that was just tagged
type FlowResponse struct {
	// CompanyID that processed the message
	CompanyID uint32 `protobuf:"varint,1,opt,name=CompanyID,json=companyID,proto3" json:"CompanyID,omitempty"`
	// DeviceID that processed this message
	DeviceID uint32 `protobuf:"varint,2,opt,name=DeviceID,json=deviceID,proto3" json:"DeviceID,omitempty"`
	// Host that processed this flow
	Host string `protobuf:"bytes,3,opt,name=Host,json=host,proto3" json:"Host,omitempty"`
	// ScenarioName holds the test scenario name
	ScenarioName string `protobuf:"bytes,4,opt,name=ScenarioName,json=scenarioName,proto3" json:"ScenarioName,omitempty"`
	// Serialized flow, with tags (github.com/kentik/proto/kflow/CHF)
	SerializedFlow []byte `protobuf:"bytes,5,opt,name=SerializedFlow,json=serializedFlow,proto3" json:"SerializedFlow,omitempty"`
	// FieldID under test (echoed from request)
	FieldID uint32 `protobuf:"varint,6,opt,name=FieldID,json=fieldID,proto3" json:"FieldID,omitempty"`
	// Expected value in this field (converted to string if necessary) (echoed from request)
	ExpectedFieldValue string `protobuf:"bytes,7,opt,name=ExpectedFieldValue,json=expectedFieldValue,proto3" json:"ExpectedFieldValue,omitempty"`
	// the shard number of the device that processed this message
	ShardNumber uint32 `protobuf:"varint,8,opt,name=ShardNumber,json=shardNumber,proto3" json:"ShardNumber,omitempty"`
}

func (m *FlowResponse) Reset()      { *m = FlowResponse{} }
func (*FlowResponse) ProtoMessage() {}
func (*FlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e32ab99150ed3d3, []int{0}
}
func (m *FlowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowResponse.Merge(m, src)
}
func (m *FlowResponse) XXX_Size() int {
	return m.Size()
}
func (m *FlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlowResponse proto.InternalMessageInfo

func (m *FlowResponse) GetCompanyID() uint32 {
	if m != nil {
		return m.CompanyID
	}
	return 0
}

func (m *FlowResponse) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

func (m *FlowResponse) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *FlowResponse) GetScenarioName() string {
	if m != nil {
		return m.ScenarioName
	}
	return ""
}

func (m *FlowResponse) GetSerializedFlow() []byte {
	if m != nil {
		return m.SerializedFlow
	}
	return nil
}

func (m *FlowResponse) GetFieldID() uint32 {
	if m != nil {
		return m.FieldID
	}
	return 0
}

func (m *FlowResponse) GetExpectedFieldValue() string {
	if m != nil {
		return m.ExpectedFieldValue
	}
	return ""
}

func (m *FlowResponse) GetShardNumber() uint32 {
	if m != nil {
		return m.ShardNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*FlowResponse)(nil), "response.FlowResponse")
}

func init() {
	proto.RegisterFile("queues/tagging/functest/response/flow_response.proto", fileDescriptor_0e32ab99150ed3d3)
}

var fileDescriptor_0e32ab99150ed3d3 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbf, 0x6e, 0xea, 0x30,
	0x14, 0xc6, 0x63, 0x2e, 0x17, 0x82, 0xc9, 0x65, 0xf0, 0x64, 0xa1, 0x2b, 0x2b, 0x62, 0xb8, 0x62,
	0xb9, 0x64, 0x28, 0x4f, 0xd0, 0xa6, 0xa8, 0x2c, 0x0c, 0x41, 0xea, 0x5a, 0xe5, 0xcf, 0x49, 0x88,
	0x94, 0xc4, 0x69, 0xec, 0x94, 0xb6, 0x53, 0x1f, 0xa1, 0x43, 0x1f, 0xa2, 0x8f, 0xd2, 0x91, 0x91,
	0xb1, 0x98, 0xa5, 0x23, 0x8f, 0x50, 0xd5, 0x80, 0xda, 0xaa, 0x9b, 0x7f, 0xbf, 0xef, 0x1c, 0x7f,
	0x96, 0xf1, 0xf8, 0xba, 0x86, 0x1a, 0x84, 0x23, 0xfd, 0x24, 0x49, 0x8b, 0xc4, 0x89, 0xeb, 0x22,
	0x94, 0x20, 0xa4, 0x53, 0x81, 0x28, 0x79, 0x21, 0xc0, 0x89, 0x33, 0xbe, 0xbc, 0x3a, 0xd2, 0xa8,
	0xac, 0xb8, 0xe4, 0xc4, 0x3c, 0x72, 0xff, 0x7f, 0x92, 0xca, 0x45, 0x1d, 0x8c, 0x42, 0x9e, 0x3b,
	0x09, 0x4f, 0xb8, 0xa3, 0x07, 0x82, 0x3a, 0xd6, 0xa4, 0x41, 0x9f, 0xf6, 0x8b, 0x83, 0xa7, 0x06,
	0xb6, 0x26, 0x19, 0x5f, 0x7a, 0x87, 0x7d, 0xf2, 0x17, 0x77, 0xce, 0x78, 0x5e, 0xfa, 0xc5, 0xdd,
	0xd4, 0xa5, 0xc8, 0x46, 0xc3, 0x3f, 0x5e, 0x27, 0x3c, 0x0a, 0xd2, 0xc7, 0xa6, 0x0b, 0x37, 0x69,
	0x08, 0x53, 0x97, 0x36, 0x74, 0x68, 0x46, 0x07, 0x26, 0x04, 0x37, 0x2f, 0xb8, 0x90, 0xf4, 0x97,
	0x8d, 0x86, 0x1d, 0xaf, 0xb9, 0xe0, 0x42, 0x92, 0x01, 0xb6, 0xe6, 0x21, 0x14, 0x7e, 0x95, 0xf2,
	0x99, 0x9f, 0x03, 0x6d, 0xea, 0xcc, 0x12, 0x5f, 0x1c, 0xf9, 0x87, 0x7b, 0x73, 0xa8, 0x52, 0x3f,
	0x4b, 0xef, 0x21, 0xfa, 0x78, 0x0b, 0xfd, 0x6d, 0xa3, 0xa1, 0xe5, 0xf5, 0xc4, 0x37, 0x4b, 0x28,
	0x6e, 0x4f, 0x52, 0xc8, 0xa2, 0xa9, 0x4b, 0x5b, 0xba, 0xba, 0x1d, 0xef, 0x91, 0x8c, 0x30, 0x39,
	0xbf, 0x2d, 0x21, 0x94, 0x10, 0xe9, 0x89, 0x4b, 0x3f, 0xab, 0x81, 0xb6, 0x75, 0x17, 0x81, 0x1f,
	0x09, 0xb1, 0x71, 0x77, 0xbe, 0xf0, 0xab, 0x68, 0x56, 0xe7, 0x01, 0x54, 0xd4, 0xd4, 0xb7, 0x75,
	0xc5, 0xa7, 0x3a, 0x1d, 0xaf, 0x36, 0xcc, 0x58, 0x6f, 0x98, 0xb1, 0xdb, 0x30, 0xf4, 0xa0, 0x18,
	0x7a, 0x56, 0x0c, 0xbd, 0x28, 0x86, 0x56, 0x8a, 0xa1, 0x57, 0xc5, 0xd0, 0x9b, 0x62, 0xc6, 0x4e,
	0x31, 0xf4, 0xb8, 0x65, 0xc6, 0x6a, 0xcb, 0x8c, 0xf5, 0x96, 0x19, 0x41, 0x4b, 0xff, 0xe9, 0xc9,
	0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x86, 0x2a, 0x9b, 0xdc, 0xc4, 0x01, 0x00, 0x00,
}

func (this *FlowResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowResponse)
	if !ok {
		that2, ok := that.(FlowResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CompanyID != that1.CompanyID {
		return false
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ScenarioName != that1.ScenarioName {
		return false
	}
	if !bytes.Equal(this.SerializedFlow, that1.SerializedFlow) {
		return false
	}
	if this.FieldID != that1.FieldID {
		return false
	}
	if this.ExpectedFieldValue != that1.ExpectedFieldValue {
		return false
	}
	if this.ShardNumber != that1.ShardNumber {
		return false
	}
	return true
}
func (this *FlowResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&response.FlowResponse{")
	s = append(s, "CompanyID: "+fmt.Sprintf("%#v", this.CompanyID)+",\n")
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ScenarioName: "+fmt.Sprintf("%#v", this.ScenarioName)+",\n")
	s = append(s, "SerializedFlow: "+fmt.Sprintf("%#v", this.SerializedFlow)+",\n")
	s = append(s, "FieldID: "+fmt.Sprintf("%#v", this.FieldID)+",\n")
	s = append(s, "ExpectedFieldValue: "+fmt.Sprintf("%#v", this.ExpectedFieldValue)+",\n")
	s = append(s, "ShardNumber: "+fmt.Sprintf("%#v", this.ShardNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlowResponse(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardNumber != 0 {
		i = encodeVarintFlowResponse(dAtA, i, uint64(m.ShardNumber))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ExpectedFieldValue) > 0 {
		i -= len(m.ExpectedFieldValue)
		copy(dAtA[i:], m.ExpectedFieldValue)
		i = encodeVarintFlowResponse(dAtA, i, uint64(len(m.ExpectedFieldValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FieldID != 0 {
		i = encodeVarintFlowResponse(dAtA, i, uint64(m.FieldID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SerializedFlow) > 0 {
		i -= len(m.SerializedFlow)
		copy(dAtA[i:], m.SerializedFlow)
		i = encodeVarintFlowResponse(dAtA, i, uint64(len(m.SerializedFlow)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ScenarioName) > 0 {
		i -= len(m.ScenarioName)
		copy(dAtA[i:], m.ScenarioName)
		i = encodeVarintFlowResponse(dAtA, i, uint64(len(m.ScenarioName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintFlowResponse(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DeviceID != 0 {
		i = encodeVarintFlowResponse(dAtA, i, uint64(m.DeviceID))
		i--
		dAtA[i] = 0x10
	}
	if m.CompanyID != 0 {
		i = encodeVarintFlowResponse(dAtA, i, uint64(m.CompanyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlowResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlowResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompanyID != 0 {
		n += 1 + sovFlowResponse(uint64(m.CompanyID))
	}
	if m.DeviceID != 0 {
		n += 1 + sovFlowResponse(uint64(m.DeviceID))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovFlowResponse(uint64(l))
	}
	l = len(m.ScenarioName)
	if l > 0 {
		n += 1 + l + sovFlowResponse(uint64(l))
	}
	l = len(m.SerializedFlow)
	if l > 0 {
		n += 1 + l + sovFlowResponse(uint64(l))
	}
	if m.FieldID != 0 {
		n += 1 + sovFlowResponse(uint64(m.FieldID))
	}
	l = len(m.ExpectedFieldValue)
	if l > 0 {
		n += 1 + l + sovFlowResponse(uint64(l))
	}
	if m.ShardNumber != 0 {
		n += 1 + sovFlowResponse(uint64(m.ShardNumber))
	}
	return n
}

func sovFlowResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlowResponse(x uint64) (n int) {
	return sovFlowResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FlowResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowResponse{`,
		`CompanyID:` + fmt.Sprintf("%v", this.CompanyID) + `,`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ScenarioName:` + fmt.Sprintf("%v", this.ScenarioName) + `,`,
		`SerializedFlow:` + fmt.Sprintf("%v", this.SerializedFlow) + `,`,
		`FieldID:` + fmt.Sprintf("%v", this.FieldID) + `,`,
		`ExpectedFieldValue:` + fmt.Sprintf("%v", this.ExpectedFieldValue) + `,`,
		`ShardNumber:` + fmt.Sprintf("%v", this.ShardNumber) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlowResponse(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyID", wireType)
			}
			m.CompanyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			m.DeviceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlowResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlowResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScenarioName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlowResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlowResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScenarioName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedFlow", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlowResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlowResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedFlow = append(m.SerializedFlow[:0], dAtA[iNdEx:postIndex]...)
			if m.SerializedFlow == nil {
				m.SerializedFlow = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldID", wireType)
			}
			m.FieldID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedFieldValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlowResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlowResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedFieldValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardNumber", wireType)
			}
			m.ShardNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlowResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlowResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlowResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlowResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlowResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlowResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlowResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlowResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlowResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlowResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlowResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlowResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlowResponse = fmt.Errorf("proto: unexpected end of group")
)
