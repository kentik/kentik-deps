// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queues/tagging/functest/request/flow_request.proto

package request

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FlowRequest represents a test case for tagging: a flow to be tagged
type FlowRequest struct {
	// CompanyID that should process this message, or 0 for all
	CompanyID uint32 `protobuf:"varint,1,opt,name=CompanyID,json=companyID,proto3" json:"CompanyID,omitempty"`
	// DeviceID that should process this message, or 0 for all
	DeviceID uint32 `protobuf:"varint,2,opt,name=DeviceID,json=deviceID,proto3" json:"DeviceID,omitempty"`
	// Host that should process this message, or "" for all
	Host string `protobuf:"bytes,3,opt,name=Host,json=host,proto3" json:"Host,omitempty"`
	// ScenarioName holds the test scenario name
	ScenarioName string `protobuf:"bytes,4,opt,name=ScenarioName,json=scenarioName,proto3" json:"ScenarioName,omitempty"`
	// Serialized flow (github.com/kentik/proto/kflow/CHF)
	SerializedFlow []byte `protobuf:"bytes,5,opt,name=SerializedFlow,json=serializedFlow,proto3" json:"SerializedFlow,omitempty"`
	// Field we're looking at
	FieldID uint32 `protobuf:"varint,6,opt,name=FieldID,json=fieldID,proto3" json:"FieldID,omitempty"`
	// Expected value in this field (converted to string if necessary)
	ExpectedFieldValue string `protobuf:"bytes,7,opt,name=ExpectedFieldValue,json=expectedFieldValue,proto3" json:"ExpectedFieldValue,omitempty"`
	// the shard number this request is meant for, or -1 for all.
	// - devices with multiple shards have shard numbers (1,N)
	// - devices with one shard have shard number 0
	ShardNumber int32 `protobuf:"varint,8,opt,name=ShardNumber,json=shardNumber,proto3" json:"ShardNumber,omitempty"`
}

func (m *FlowRequest) Reset()      { *m = FlowRequest{} }
func (*FlowRequest) ProtoMessage() {}
func (*FlowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68d3e49ae73dea4a, []int{0}
}
func (m *FlowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRequest.Merge(m, src)
}
func (m *FlowRequest) XXX_Size() int {
	return m.Size()
}
func (m *FlowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRequest proto.InternalMessageInfo

func (m *FlowRequest) GetCompanyID() uint32 {
	if m != nil {
		return m.CompanyID
	}
	return 0
}

func (m *FlowRequest) GetDeviceID() uint32 {
	if m != nil {
		return m.DeviceID
	}
	return 0
}

func (m *FlowRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *FlowRequest) GetScenarioName() string {
	if m != nil {
		return m.ScenarioName
	}
	return ""
}

func (m *FlowRequest) GetSerializedFlow() []byte {
	if m != nil {
		return m.SerializedFlow
	}
	return nil
}

func (m *FlowRequest) GetFieldID() uint32 {
	if m != nil {
		return m.FieldID
	}
	return 0
}

func (m *FlowRequest) GetExpectedFieldValue() string {
	if m != nil {
		return m.ExpectedFieldValue
	}
	return ""
}

func (m *FlowRequest) GetShardNumber() int32 {
	if m != nil {
		return m.ShardNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*FlowRequest)(nil), "request.FlowRequest")
}

func init() {
	proto.RegisterFile("queues/tagging/functest/request/flow_request.proto", fileDescriptor_68d3e49ae73dea4a)
}

var fileDescriptor_68d3e49ae73dea4a = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbf, 0x6e, 0xea, 0x30,
	0x14, 0xc6, 0x63, 0x2e, 0x10, 0x30, 0x5c, 0x06, 0x4f, 0x16, 0xba, 0xb2, 0x22, 0x86, 0xab, 0x2c,
	0x97, 0x48, 0xb7, 0x7d, 0x82, 0x36, 0x45, 0x65, 0x61, 0x08, 0x52, 0xd7, 0x2a, 0x7f, 0x4e, 0x42,
	0xa4, 0x24, 0x86, 0xc4, 0x2e, 0x6d, 0xa7, 0x3e, 0x42, 0xa5, 0xbe, 0x44, 0x1f, 0xa5, 0x23, 0x23,
	0x63, 0x31, 0x4b, 0x47, 0x1e, 0xa1, 0xc2, 0x50, 0xb5, 0x55, 0x27, 0xfb, 0xf7, 0xfd, 0x7c, 0xf4,
	0x59, 0x07, 0xff, 0x5f, 0x48, 0x90, 0x50, 0x39, 0xc2, 0x4f, 0x92, 0xb4, 0x48, 0x9c, 0x58, 0x16,
	0xa1, 0x80, 0x4a, 0x38, 0x25, 0x2c, 0xe4, 0xfe, 0x8c, 0x33, 0xbe, 0xbc, 0x3e, 0xc2, 0x70, 0x5e,
	0x72, 0xc1, 0x89, 0x79, 0xc4, 0xfe, 0xbf, 0x24, 0x15, 0x33, 0x19, 0x0c, 0x43, 0x9e, 0x3b, 0x09,
	0x4f, 0xb8, 0xa3, 0x7d, 0x20, 0x63, 0x4d, 0x1a, 0xf4, 0xed, 0x30, 0x37, 0x78, 0xaa, 0xe1, 0xce,
	0x28, 0xe3, 0x4b, 0xef, 0x30, 0x4e, 0xfe, 0xe0, 0xf6, 0x39, 0xcf, 0xe7, 0x7e, 0x71, 0x37, 0x76,
	0x29, 0xb2, 0x90, 0xfd, 0xdb, 0x6b, 0x87, 0x1f, 0x01, 0xe9, 0xe3, 0x96, 0x0b, 0x37, 0x69, 0x08,
	0x63, 0x97, 0xd6, 0xb4, 0x6c, 0x45, 0x47, 0x26, 0x04, 0xd7, 0x2f, 0x79, 0x25, 0xe8, 0x2f, 0x0b,
	0xd9, 0x6d, 0xaf, 0x3e, 0xe3, 0x95, 0x20, 0x03, 0xdc, 0x9d, 0x86, 0x50, 0xf8, 0x65, 0xca, 0x27,
	0x7e, 0x0e, 0xb4, 0xae, 0x5d, 0xb7, 0xfa, 0x92, 0x91, 0xbf, 0xb8, 0x37, 0x85, 0x32, 0xf5, 0xb3,
	0xf4, 0x1e, 0xa2, 0xfd, 0x57, 0x68, 0xc3, 0x42, 0x76, 0xd7, 0xeb, 0x55, 0xdf, 0x52, 0x42, 0xb1,
	0x39, 0x4a, 0x21, 0x8b, 0xc6, 0x2e, 0x6d, 0xea, 0x6a, 0x33, 0x3e, 0x20, 0x19, 0x62, 0x72, 0x71,
	0x3b, 0x87, 0x50, 0x40, 0xa4, 0x5f, 0x5c, 0xf9, 0x99, 0x04, 0x6a, 0xea, 0x2e, 0x02, 0x3f, 0x0c,
	0xb1, 0x70, 0x67, 0x3a, 0xf3, 0xcb, 0x68, 0x22, 0xf3, 0x00, 0x4a, 0xda, 0xb2, 0x90, 0xdd, 0xf0,
	0x3a, 0xd5, 0x67, 0x74, 0x76, 0xba, 0xda, 0x30, 0x63, 0xbd, 0x61, 0xc6, 0x6e, 0xc3, 0xd0, 0x83,
	0x62, 0xe8, 0x59, 0x31, 0xf4, 0xa2, 0x18, 0x5a, 0x29, 0x86, 0x5e, 0x15, 0x43, 0x6f, 0x8a, 0x19,
	0x3b, 0xc5, 0xd0, 0xe3, 0x96, 0x19, 0xab, 0x2d, 0x33, 0xd6, 0x5b, 0x66, 0x04, 0x4d, 0xbd, 0xd2,
	0x93, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78, 0xc6, 0xa5, 0xf0, 0xc0, 0x01, 0x00, 0x00,
}

func (this *FlowRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowRequest)
	if !ok {
		that2, ok := that.(FlowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CompanyID != that1.CompanyID {
		return false
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.ScenarioName != that1.ScenarioName {
		return false
	}
	if !bytes.Equal(this.SerializedFlow, that1.SerializedFlow) {
		return false
	}
	if this.FieldID != that1.FieldID {
		return false
	}
	if this.ExpectedFieldValue != that1.ExpectedFieldValue {
		return false
	}
	if this.ShardNumber != that1.ShardNumber {
		return false
	}
	return true
}
func (this *FlowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&request.FlowRequest{")
	s = append(s, "CompanyID: "+fmt.Sprintf("%#v", this.CompanyID)+",\n")
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "ScenarioName: "+fmt.Sprintf("%#v", this.ScenarioName)+",\n")
	s = append(s, "SerializedFlow: "+fmt.Sprintf("%#v", this.SerializedFlow)+",\n")
	s = append(s, "FieldID: "+fmt.Sprintf("%#v", this.FieldID)+",\n")
	s = append(s, "ExpectedFieldValue: "+fmt.Sprintf("%#v", this.ExpectedFieldValue)+",\n")
	s = append(s, "ShardNumber: "+fmt.Sprintf("%#v", this.ShardNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlowRequest(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FlowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardNumber != 0 {
		i = encodeVarintFlowRequest(dAtA, i, uint64(m.ShardNumber))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ExpectedFieldValue) > 0 {
		i -= len(m.ExpectedFieldValue)
		copy(dAtA[i:], m.ExpectedFieldValue)
		i = encodeVarintFlowRequest(dAtA, i, uint64(len(m.ExpectedFieldValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FieldID != 0 {
		i = encodeVarintFlowRequest(dAtA, i, uint64(m.FieldID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SerializedFlow) > 0 {
		i -= len(m.SerializedFlow)
		copy(dAtA[i:], m.SerializedFlow)
		i = encodeVarintFlowRequest(dAtA, i, uint64(len(m.SerializedFlow)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ScenarioName) > 0 {
		i -= len(m.ScenarioName)
		copy(dAtA[i:], m.ScenarioName)
		i = encodeVarintFlowRequest(dAtA, i, uint64(len(m.ScenarioName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintFlowRequest(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DeviceID != 0 {
		i = encodeVarintFlowRequest(dAtA, i, uint64(m.DeviceID))
		i--
		dAtA[i] = 0x10
	}
	if m.CompanyID != 0 {
		i = encodeVarintFlowRequest(dAtA, i, uint64(m.CompanyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlowRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlowRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompanyID != 0 {
		n += 1 + sovFlowRequest(uint64(m.CompanyID))
	}
	if m.DeviceID != 0 {
		n += 1 + sovFlowRequest(uint64(m.DeviceID))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovFlowRequest(uint64(l))
	}
	l = len(m.ScenarioName)
	if l > 0 {
		n += 1 + l + sovFlowRequest(uint64(l))
	}
	l = len(m.SerializedFlow)
	if l > 0 {
		n += 1 + l + sovFlowRequest(uint64(l))
	}
	if m.FieldID != 0 {
		n += 1 + sovFlowRequest(uint64(m.FieldID))
	}
	l = len(m.ExpectedFieldValue)
	if l > 0 {
		n += 1 + l + sovFlowRequest(uint64(l))
	}
	if m.ShardNumber != 0 {
		n += 1 + sovFlowRequest(uint64(m.ShardNumber))
	}
	return n
}

func sovFlowRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlowRequest(x uint64) (n int) {
	return sovFlowRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FlowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowRequest{`,
		`CompanyID:` + fmt.Sprintf("%v", this.CompanyID) + `,`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`ScenarioName:` + fmt.Sprintf("%v", this.ScenarioName) + `,`,
		`SerializedFlow:` + fmt.Sprintf("%v", this.SerializedFlow) + `,`,
		`FieldID:` + fmt.Sprintf("%v", this.FieldID) + `,`,
		`ExpectedFieldValue:` + fmt.Sprintf("%v", this.ExpectedFieldValue) + `,`,
		`ShardNumber:` + fmt.Sprintf("%v", this.ShardNumber) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlowRequest(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FlowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyID", wireType)
			}
			m.CompanyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			m.DeviceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlowRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlowRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScenarioName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlowRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlowRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScenarioName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedFlow", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFlowRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFlowRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedFlow = append(m.SerializedFlow[:0], dAtA[iNdEx:postIndex]...)
			if m.SerializedFlow == nil {
				m.SerializedFlow = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldID", wireType)
			}
			m.FieldID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedFieldValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlowRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlowRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedFieldValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardNumber", wireType)
			}
			m.ShardNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlowRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlowRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFlowRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlowRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlowRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlowRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlowRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlowRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlowRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlowRequest = fmt.Errorf("proto: unexpected end of group")
)
