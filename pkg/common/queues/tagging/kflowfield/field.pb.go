// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queues/tagging/kflowfield/field.proto

package kflowfield

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KFlowField_ColumnTypeEnum int32

const (
	UNKNOWN_TYPE KFlowField_ColumnTypeEnum = 0
	STRING       KFlowField_ColumnTypeEnum = 1
	ADDRESS      KFlowField_ColumnTypeEnum = 2
	UINT64       KFlowField_ColumnTypeEnum = 3
	UINT32       KFlowField_ColumnTypeEnum = 4
)

var KFlowField_ColumnTypeEnum_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "STRING",
	2: "ADDRESS",
	3: "UINT64",
	4: "UINT32",
}

var KFlowField_ColumnTypeEnum_value = map[string]int32{
	"UNKNOWN_TYPE": 0,
	"STRING":       1,
	"ADDRESS":      2,
	"UINT64":       3,
	"UINT32":       4,
}

func (KFlowField_ColumnTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ec941041667c4bb1, []int{0, 0}
}

type KFlowField_StatusEnum int32

const (
	UNKNOWN_STATUS KFlowField_StatusEnum = 0
	ACTIVE         KFlowField_StatusEnum = 1
	DELETED        KFlowField_StatusEnum = 2
)

var KFlowField_StatusEnum_name = map[int32]string{
	0: "UNKNOWN_STATUS",
	1: "ACTIVE",
	2: "DELETED",
}

var KFlowField_StatusEnum_value = map[string]int32{
	"UNKNOWN_STATUS": 0,
	"ACTIVE":         1,
	"DELETED":        2,
}

func (KFlowField_StatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ec941041667c4bb1, []int{0, 1}
}

// Device holds the current state of a customer's device
type KFlowField struct {
	ID               uint32                    `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	CompanyID        uint32                    `protobuf:"varint,2,opt,name=CompanyID,json=companyID,proto3" json:"CompanyID,omitempty"`
	Name             string                    `protobuf:"bytes,3,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	ColumnType       KFlowField_ColumnTypeEnum `protobuf:"varint,4,opt,name=ColumnType,json=columnType,proto3,enum=kflowfield.KFlowField_ColumnTypeEnum" json:"ColumnType,omitempty"`
	Status           KFlowField_StatusEnum     `protobuf:"varint,5,opt,name=Status,json=status,proto3,enum=kflowfield.KFlowField_StatusEnum" json:"Status,omitempty"`
	IsPublic         bool                      `protobuf:"varint,6,opt,name=IsPublic,json=isPublic,proto3" json:"IsPublic,omitempty"`
	EditDateUnixNano int64                     `protobuf:"varint,7,opt,name=EditDateUnixNano,json=editDateUnixNano,proto3" json:"EditDateUnixNano,omitempty"`
	Usage            string                    `protobuf:"bytes,8,opt,name=Usage,json=usage,proto3" json:"Usage,omitempty"`
}

func (m *KFlowField) Reset()      { *m = KFlowField{} }
func (*KFlowField) ProtoMessage() {}
func (*KFlowField) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec941041667c4bb1, []int{0}
}
func (m *KFlowField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KFlowField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KFlowField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KFlowField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KFlowField.Merge(m, src)
}
func (m *KFlowField) XXX_Size() int {
	return m.Size()
}
func (m *KFlowField) XXX_DiscardUnknown() {
	xxx_messageInfo_KFlowField.DiscardUnknown(m)
}

var xxx_messageInfo_KFlowField proto.InternalMessageInfo

func (m *KFlowField) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *KFlowField) GetCompanyID() uint32 {
	if m != nil {
		return m.CompanyID
	}
	return 0
}

func (m *KFlowField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KFlowField) GetColumnType() KFlowField_ColumnTypeEnum {
	if m != nil {
		return m.ColumnType
	}
	return UNKNOWN_TYPE
}

func (m *KFlowField) GetStatus() KFlowField_StatusEnum {
	if m != nil {
		return m.Status
	}
	return UNKNOWN_STATUS
}

func (m *KFlowField) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func (m *KFlowField) GetEditDateUnixNano() int64 {
	if m != nil {
		return m.EditDateUnixNano
	}
	return 0
}

func (m *KFlowField) GetUsage() string {
	if m != nil {
		return m.Usage
	}
	return ""
}

func init() {
	proto.RegisterEnum("kflowfield.KFlowField_ColumnTypeEnum", KFlowField_ColumnTypeEnum_name, KFlowField_ColumnTypeEnum_value)
	proto.RegisterEnum("kflowfield.KFlowField_StatusEnum", KFlowField_StatusEnum_name, KFlowField_StatusEnum_value)
	proto.RegisterType((*KFlowField)(nil), "kflowfield.KFlowField")
}

func init() {
	proto.RegisterFile("queues/tagging/kflowfield/field.proto", fileDescriptor_ec941041667c4bb1)
}

var fileDescriptor_ec941041667c4bb1 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x4f, 0x8b, 0xd3, 0x40,
	0x1c, 0xcd, 0xa4, 0x6d, 0xb6, 0xfd, 0xa9, 0x25, 0x0c, 0x1e, 0xc2, 0x22, 0x43, 0x2c, 0x2c, 0x04,
	0xc1, 0x04, 0x76, 0x17, 0x61, 0x8f, 0xb5, 0x99, 0x95, 0xb0, 0x12, 0x97, 0xfc, 0x51, 0x3c, 0x49,
	0xda, 0x9d, 0xc6, 0x60, 0x92, 0xa9, 0x26, 0xc3, 0xba, 0x37, 0x3f, 0x82, 0x1f, 0xc3, 0x4f, 0xe1,
	0xd9, 0x63, 0x8f, 0x7b, 0xb4, 0xe9, 0xc5, 0x63, 0x3f, 0x82, 0x74, 0x6a, 0x0d, 0x0a, 0x7b, 0x19,
	0xde, 0x7b, 0xf3, 0xde, 0x9b, 0xdf, 0x8f, 0x81, 0xa3, 0x8f, 0x82, 0x09, 0x56, 0x39, 0x75, 0x92,
	0xa6, 0x59, 0x99, 0x3a, 0x1f, 0xe6, 0x39, 0xbf, 0x9e, 0x67, 0x2c, 0xbf, 0x72, 0xe4, 0x69, 0x2f,
	0x3e, 0xf1, 0x9a, 0x63, 0x68, 0xf5, 0xc3, 0xa7, 0x69, 0x56, 0xbf, 0x17, 0x53, 0x7b, 0xc6, 0x0b,
	0x27, 0xe5, 0x29, 0x77, 0xa4, 0x65, 0x2a, 0xe6, 0x92, 0x49, 0x22, 0xd1, 0x2e, 0x3a, 0xfa, 0xde,
	0x01, 0xb8, 0x38, 0xcf, 0xf9, 0xf5, 0xf9, 0x36, 0x8d, 0x87, 0xa0, 0x7a, 0xae, 0x81, 0x4c, 0x64,
	0x3d, 0x08, 0xd4, 0xcc, 0xc5, 0x8f, 0x60, 0x30, 0xe1, 0xc5, 0x22, 0x29, 0x6f, 0x3c, 0xd7, 0x50,
	0xa5, 0x3c, 0x98, 0xed, 0x05, 0x8c, 0xa1, 0xeb, 0x27, 0x05, 0x33, 0x3a, 0x26, 0xb2, 0x06, 0x41,
	0xb7, 0x4c, 0x0a, 0x86, 0x29, 0xc0, 0x84, 0xe7, 0xa2, 0x28, 0xa3, 0x9b, 0x05, 0x33, 0xba, 0x26,
	0xb2, 0x86, 0xc7, 0x47, 0x76, 0x3b, 0xa0, 0xdd, 0xbe, 0x66, 0xb7, 0x46, 0x5a, 0x8a, 0x22, 0x80,
	0xd9, 0x5f, 0x8e, 0xcf, 0x40, 0x0b, 0xeb, 0xa4, 0x16, 0x95, 0xd1, 0x93, 0x15, 0x8f, 0xef, 0xa8,
	0xd8, 0x99, 0x64, 0x5c, 0xab, 0x24, 0xc6, 0x87, 0xd0, 0xf7, 0xaa, 0x4b, 0x31, 0xcd, 0xb3, 0x99,
	0xa1, 0x99, 0xc8, 0xea, 0x07, 0xfd, 0xec, 0x0f, 0xc7, 0x4f, 0x40, 0xa7, 0x57, 0x59, 0xed, 0x26,
	0x35, 0x8b, 0xcb, 0xec, 0xb3, 0x9f, 0x94, 0xdc, 0x38, 0x30, 0x91, 0xd5, 0x09, 0x74, 0xf6, 0x9f,
	0x8e, 0x1f, 0x42, 0x2f, 0xae, 0x92, 0x94, 0x19, 0x7d, 0xb9, 0x5e, 0x4f, 0x6c, 0xc9, 0x28, 0x84,
	0xe1, 0xbf, 0x63, 0x63, 0x1d, 0xee, 0xc7, 0xfe, 0x85, 0xff, 0xea, 0x8d, 0xff, 0x2e, 0x7a, 0x7b,
	0x49, 0x75, 0x05, 0x03, 0x68, 0x61, 0x14, 0x78, 0xfe, 0x0b, 0x1d, 0xe1, 0x7b, 0x70, 0x30, 0x76,
	0xdd, 0x80, 0x86, 0xa1, 0xae, 0x6e, 0x2f, 0x62, 0xcf, 0x8f, 0x9e, 0x9d, 0xea, 0x9d, 0x3d, 0x3e,
	0x39, 0xd6, 0xbb, 0xa3, 0x33, 0x80, 0x76, 0x11, 0x8c, 0x61, 0xb8, 0x2f, 0x0c, 0xa3, 0x71, 0x14,
	0x87, 0xbb, 0xca, 0xf1, 0x24, 0xf2, 0x5e, 0xd3, 0x5d, 0xa5, 0x4b, 0x5f, 0xd2, 0x88, 0xba, 0xba,
	0xfa, 0xfc, 0x74, 0xb9, 0x22, 0xca, 0xed, 0x8a, 0x28, 0x9b, 0x15, 0x41, 0x5f, 0x1a, 0x82, 0xbe,
	0x35, 0x04, 0xfd, 0x68, 0x08, 0x5a, 0x36, 0x04, 0xfd, 0x6c, 0x08, 0xfa, 0xd5, 0x10, 0x65, 0xd3,
	0x10, 0xf4, 0x75, 0x4d, 0x94, 0xe5, 0x9a, 0x28, 0xb7, 0x6b, 0xa2, 0x4c, 0x35, 0xf9, 0xfb, 0x27,
	0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xef, 0xe7, 0x8e, 0xbd, 0x61, 0x02, 0x00, 0x00,
}

func (x KFlowField_ColumnTypeEnum) String() string {
	s, ok := KFlowField_ColumnTypeEnum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x KFlowField_StatusEnum) String() string {
	s, ok := KFlowField_StatusEnum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *KFlowField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KFlowField)
	if !ok {
		that2, ok := that.(KFlowField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.CompanyID != that1.CompanyID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ColumnType != that1.ColumnType {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.IsPublic != that1.IsPublic {
		return false
	}
	if this.EditDateUnixNano != that1.EditDateUnixNano {
		return false
	}
	if this.Usage != that1.Usage {
		return false
	}
	return true
}
func (this *KFlowField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&kflowfield.KFlowField{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "CompanyID: "+fmt.Sprintf("%#v", this.CompanyID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ColumnType: "+fmt.Sprintf("%#v", this.ColumnType)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "IsPublic: "+fmt.Sprintf("%#v", this.IsPublic)+",\n")
	s = append(s, "EditDateUnixNano: "+fmt.Sprintf("%#v", this.EditDateUnixNano)+",\n")
	s = append(s, "Usage: "+fmt.Sprintf("%#v", this.Usage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringField(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *KFlowField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KFlowField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KFlowField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Usage) > 0 {
		i -= len(m.Usage)
		copy(dAtA[i:], m.Usage)
		i = encodeVarintField(dAtA, i, uint64(len(m.Usage)))
		i--
		dAtA[i] = 0x42
	}
	if m.EditDateUnixNano != 0 {
		i = encodeVarintField(dAtA, i, uint64(m.EditDateUnixNano))
		i--
		dAtA[i] = 0x38
	}
	if m.IsPublic {
		i--
		if m.IsPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintField(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.ColumnType != 0 {
		i = encodeVarintField(dAtA, i, uint64(m.ColumnType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintField(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CompanyID != 0 {
		i = encodeVarintField(dAtA, i, uint64(m.CompanyID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintField(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintField(dAtA []byte, offset int, v uint64) int {
	offset -= sovField(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KFlowField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovField(uint64(m.ID))
	}
	if m.CompanyID != 0 {
		n += 1 + sovField(uint64(m.CompanyID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovField(uint64(l))
	}
	if m.ColumnType != 0 {
		n += 1 + sovField(uint64(m.ColumnType))
	}
	if m.Status != 0 {
		n += 1 + sovField(uint64(m.Status))
	}
	if m.IsPublic {
		n += 2
	}
	if m.EditDateUnixNano != 0 {
		n += 1 + sovField(uint64(m.EditDateUnixNano))
	}
	l = len(m.Usage)
	if l > 0 {
		n += 1 + l + sovField(uint64(l))
	}
	return n
}

func sovField(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozField(x uint64) (n int) {
	return sovField(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *KFlowField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KFlowField{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`CompanyID:` + fmt.Sprintf("%v", this.CompanyID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ColumnType:` + fmt.Sprintf("%v", this.ColumnType) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`IsPublic:` + fmt.Sprintf("%v", this.IsPublic) + `,`,
		`EditDateUnixNano:` + fmt.Sprintf("%v", this.EditDateUnixNano) + `,`,
		`Usage:` + fmt.Sprintf("%v", this.Usage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringField(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *KFlowField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowField
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KFlowField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KFlowField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowField
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyID", wireType)
			}
			m.CompanyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowField
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowField
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthField
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthField
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnType", wireType)
			}
			m.ColumnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowField
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnType |= KFlowField_ColumnTypeEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowField
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= KFlowField_StatusEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowField
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditDateUnixNano", wireType)
			}
			m.EditDateUnixNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowField
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditDateUnixNano |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowField
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthField
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthField
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipField(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthField
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthField
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipField(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowField
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowField
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowField
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthField
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupField
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthField
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthField        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowField          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupField = fmt.Errorf("proto: unexpected end of group")
)
