// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queues/device/device.proto

package device

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Device holds the current state of a customer's device
type Device struct {
	ID                uint32 `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	CompanyID         uint32 `protobuf:"varint,2,opt,name=CompanyID,json=companyID,proto3" json:"CompanyID,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Type              string `protobuf:"bytes,4,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	Subtype           string `protobuf:"bytes,5,opt,name=Subtype,json=subtype,proto3" json:"Subtype,omitempty"`
	Description       string `protobuf:"bytes,6,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	SNMPIP            string `protobuf:"bytes,7,opt,name=SNMPIP,json=sNMPIP,proto3" json:"SNMPIP,omitempty"`
	SNMPCommunity     string `protobuf:"bytes,8,opt,name=SNMPCommunity,json=sNMPCommunity,proto3" json:"SNMPCommunity,omitempty"`
	FlowType          string `protobuf:"bytes,9,opt,name=FlowType,json=flowType,proto3" json:"FlowType,omitempty"`
	MinimizeSNMP      bool   `protobuf:"varint,10,opt,name=MinimizeSNMP,json=minimizeSNMP,proto3" json:"MinimizeSNMP,omitempty"`
	CompanyStatus     string `protobuf:"bytes,11,opt,name=CompanyStatus,json=companyStatus,proto3" json:"CompanyStatus,omitempty"`
	Alert             string `protobuf:"bytes,12,opt,name=Alert,json=alert,proto3" json:"Alert,omitempty"`
	Tee               string `protobuf:"bytes,13,opt,name=Tee,json=tee,proto3" json:"Tee,omitempty"`
	ShardNumber       uint32 `protobuf:"varint,14,opt,name=ShardNumber,json=shardNumber,proto3" json:"ShardNumber,omitempty"`
	SampleRate        uint32 `protobuf:"varint,15,opt,name=SampleRate,json=sampleRate,proto3" json:"SampleRate,omitempty"`
	Status            string `protobuf:"bytes,16,opt,name=Status,json=status,proto3" json:"Status,omitempty"`
	MaxInterface      uint32 `protobuf:"varint,17,opt,name=MaxInterface,json=maxInterface,proto3" json:"MaxInterface,omitempty"`
	MaxInterfaceCheck uint32 `protobuf:"varint,18,opt,name=MaxInterfaceCheck,json=maxInterfaceCheck,proto3" json:"MaxInterfaceCheck,omitempty"`
	DNSTag            string `protobuf:"bytes,19,opt,name=DNSTag,json=dNSTag,proto3" json:"DNSTag,omitempty"`
	SNMPV3ConfigJSON  string `protobuf:"bytes,20,opt,name=SNMPV3ConfigJSON,json=sNMPV3ConfigJSON,proto3" json:"SNMPV3ConfigJSON,omitempty"`
	GNMIV1ConfJSON    string `protobuf:"bytes,21,opt,name=GNMIV1ConfJSON,json=gNMIV1ConfJSON,proto3" json:"GNMIV1ConfJSON,omitempty"`
	EditDateUnixNano  int64  `protobuf:"varint,22,opt,name=EditDateUnixNano,json=editDateUnixNano,proto3" json:"EditDateUnixNano,omitempty"`
	Site              Site   `protobuf:"bytes,23,opt,name=Site,json=site,proto3" json:"Site"`
	Plan              Plan   `protobuf:"bytes,24,opt,name=Plan,json=plan,proto3" json:"Plan"`
	Manufacturer      string `protobuf:"bytes,25,opt,name=Manufacturer,json=manufacturer,proto3" json:"Manufacturer,omitempty"`
	Role              string `protobuf:"bytes,26,opt,name=Role,json=role,proto3" json:"Role,omitempty"`
	CloudRegion       string `protobuf:"bytes,27,opt,name=CloudRegion,json=cloudRegion,proto3" json:"CloudRegion,omitempty"`
	SysName           string `protobuf:"bytes,28,opt,name=SysName,json=sysName,proto3" json:"SysName,omitempty"`
	SysContact        string `protobuf:"bytes,29,opt,name=SysContact,json=sysContact,proto3" json:"SysContact,omitempty"`
	SysLocation       string `protobuf:"bytes,30,opt,name=SysLocation,json=sysLocation,proto3" json:"SysLocation,omitempty"`
	SysServices       string `protobuf:"bytes,31,opt,name=SysServices,json=sysServices,proto3" json:"SysServices,omitempty"`
	SysObjectID       string `protobuf:"bytes,32,opt,name=SysObjectID,json=sysObjectID,proto3" json:"SysObjectID,omitempty"`
}

func (m *Device) Reset()      { *m = Device{} }
func (*Device) ProtoMessage() {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fdca17c9eac0927, []int{0}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Device.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return m.Size()
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Device) GetCompanyID() uint32 {
	if m != nil {
		return m.CompanyID
	}
	return 0
}

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Device) GetSubtype() string {
	if m != nil {
		return m.Subtype
	}
	return ""
}

func (m *Device) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device) GetSNMPIP() string {
	if m != nil {
		return m.SNMPIP
	}
	return ""
}

func (m *Device) GetSNMPCommunity() string {
	if m != nil {
		return m.SNMPCommunity
	}
	return ""
}

func (m *Device) GetFlowType() string {
	if m != nil {
		return m.FlowType
	}
	return ""
}

func (m *Device) GetMinimizeSNMP() bool {
	if m != nil {
		return m.MinimizeSNMP
	}
	return false
}

func (m *Device) GetCompanyStatus() string {
	if m != nil {
		return m.CompanyStatus
	}
	return ""
}

func (m *Device) GetAlert() string {
	if m != nil {
		return m.Alert
	}
	return ""
}

func (m *Device) GetTee() string {
	if m != nil {
		return m.Tee
	}
	return ""
}

func (m *Device) GetShardNumber() uint32 {
	if m != nil {
		return m.ShardNumber
	}
	return 0
}

func (m *Device) GetSampleRate() uint32 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *Device) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Device) GetMaxInterface() uint32 {
	if m != nil {
		return m.MaxInterface
	}
	return 0
}

func (m *Device) GetMaxInterfaceCheck() uint32 {
	if m != nil {
		return m.MaxInterfaceCheck
	}
	return 0
}

func (m *Device) GetDNSTag() string {
	if m != nil {
		return m.DNSTag
	}
	return ""
}

func (m *Device) GetSNMPV3ConfigJSON() string {
	if m != nil {
		return m.SNMPV3ConfigJSON
	}
	return ""
}

func (m *Device) GetGNMIV1ConfJSON() string {
	if m != nil {
		return m.GNMIV1ConfJSON
	}
	return ""
}

func (m *Device) GetEditDateUnixNano() int64 {
	if m != nil {
		return m.EditDateUnixNano
	}
	return 0
}

func (m *Device) GetSite() Site {
	if m != nil {
		return m.Site
	}
	return Site{}
}

func (m *Device) GetPlan() Plan {
	if m != nil {
		return m.Plan
	}
	return Plan{}
}

func (m *Device) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Device) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *Device) GetCloudRegion() string {
	if m != nil {
		return m.CloudRegion
	}
	return ""
}

func (m *Device) GetSysName() string {
	if m != nil {
		return m.SysName
	}
	return ""
}

func (m *Device) GetSysContact() string {
	if m != nil {
		return m.SysContact
	}
	return ""
}

func (m *Device) GetSysLocation() string {
	if m != nil {
		return m.SysLocation
	}
	return ""
}

func (m *Device) GetSysServices() string {
	if m != nil {
		return m.SysServices
	}
	return ""
}

func (m *Device) GetSysObjectID() string {
	if m != nil {
		return m.SysObjectID
	}
	return ""
}

// Site holds Site info about a customer's device
type Site struct {
	ID           uint32             `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Name         string             `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Country      string             `protobuf:"bytes,3,opt,name=Country,json=country,proto3" json:"Country,omitempty"`
	Type         string             `protobuf:"bytes,4,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	Architecture []SiteArchitecture `protobuf:"bytes,6,rep,name=Architecture,json=architecture,proto3" json:"Architecture"`
}

func (m *Site) Reset()      { *m = Site{} }
func (*Site) ProtoMessage() {}
func (*Site) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fdca17c9eac0927, []int{1}
}
func (m *Site) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Site) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Site.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Site) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Site.Merge(m, src)
}
func (m *Site) XXX_Size() int {
	return m.Size()
}
func (m *Site) XXX_DiscardUnknown() {
	xxx_messageInfo_Site.DiscardUnknown(m)
}

var xxx_messageInfo_Site proto.InternalMessageInfo

func (m *Site) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Site) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Site) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Site) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Site) GetArchitecture() []SiteArchitecture {
	if m != nil {
		return m.Architecture
	}
	return nil
}

// SiteArchitecture holds the architecture for a site
type SiteArchitecture struct {
	Sublayers []Sublayer `protobuf:"bytes,1,rep,name=Sublayers,json=sublayers,proto3" json:"Sublayers"`
}

func (m *SiteArchitecture) Reset()      { *m = SiteArchitecture{} }
func (*SiteArchitecture) ProtoMessage() {}
func (*SiteArchitecture) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fdca17c9eac0927, []int{2}
}
func (m *SiteArchitecture) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteArchitecture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SiteArchitecture.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SiteArchitecture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteArchitecture.Merge(m, src)
}
func (m *SiteArchitecture) XXX_Size() int {
	return m.Size()
}
func (m *SiteArchitecture) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteArchitecture.DiscardUnknown(m)
}

var xxx_messageInfo_SiteArchitecture proto.InternalMessageInfo

func (m *SiteArchitecture) GetSublayers() []Sublayer {
	if m != nil {
		return m.Sublayers
	}
	return nil
}

// Sublayer for a site architecture
type Sublayer struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
}

func (m *Sublayer) Reset()      { *m = Sublayer{} }
func (*Sublayer) ProtoMessage() {}
func (*Sublayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fdca17c9eac0927, []int{3}
}
func (m *Sublayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sublayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sublayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sublayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sublayer.Merge(m, src)
}
func (m *Sublayer) XXX_Size() int {
	return m.Size()
}
func (m *Sublayer) XXX_DiscardUnknown() {
	xxx_messageInfo_Sublayer.DiscardUnknown(m)
}

var xxx_messageInfo_Sublayer proto.InternalMessageInfo

func (m *Sublayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Plan holds Plan info about a customer's device
type Plan struct {
	ID                uint32 `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	MaxFPS            uint32 `protobuf:"varint,2,opt,name=MaxFPS,json=maxFPS,proto3" json:"MaxFPS,omitempty"`
	MaxBigDataFPS     uint32 `protobuf:"varint,3,opt,name=MaxBigDataFPS,json=maxBigDataFPS,proto3" json:"MaxBigDataFPS,omitempty"`
	MaxActive         uint32 `protobuf:"varint,4,opt,name=MaxActive,json=maxActive,proto3" json:"MaxActive,omitempty"`
	Active            bool   `protobuf:"varint,5,opt,name=Active,json=active,proto3" json:"Active,omitempty"`
	BGP               bool   `protobuf:"varint,6,opt,name=BGP,json=bGP,proto3" json:"BGP,omitempty"`
	MaxDevices        uint32 `protobuf:"varint,7,opt,name=MaxDevices,json=maxDevices,proto3" json:"MaxDevices,omitempty"`
	FastRetentionDays uint32 `protobuf:"varint,8,opt,name=FastRetentionDays,json=fastRetentionDays,proto3" json:"FastRetentionDays,omitempty"`
	FullRetentionDays uint32 `protobuf:"varint,9,opt,name=FullRetentionDays,json=fullRetentionDays,proto3" json:"FullRetentionDays,omitempty"`
	EditDateUnixNano  int64  `protobuf:"varint,10,opt,name=EditDateUnixNano,json=editDateUnixNano,proto3" json:"EditDateUnixNano,omitempty"`
}

func (m *Plan) Reset()      { *m = Plan{} }
func (*Plan) ProtoMessage() {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fdca17c9eac0927, []int{4}
}
func (m *Plan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(m, src)
}
func (m *Plan) XXX_Size() int {
	return m.Size()
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

func (m *Plan) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Plan) GetMaxFPS() uint32 {
	if m != nil {
		return m.MaxFPS
	}
	return 0
}

func (m *Plan) GetMaxBigDataFPS() uint32 {
	if m != nil {
		return m.MaxBigDataFPS
	}
	return 0
}

func (m *Plan) GetMaxActive() uint32 {
	if m != nil {
		return m.MaxActive
	}
	return 0
}

func (m *Plan) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Plan) GetBGP() bool {
	if m != nil {
		return m.BGP
	}
	return false
}

func (m *Plan) GetMaxDevices() uint32 {
	if m != nil {
		return m.MaxDevices
	}
	return 0
}

func (m *Plan) GetFastRetentionDays() uint32 {
	if m != nil {
		return m.FastRetentionDays
	}
	return 0
}

func (m *Plan) GetFullRetentionDays() uint32 {
	if m != nil {
		return m.FullRetentionDays
	}
	return 0
}

func (m *Plan) GetEditDateUnixNano() int64 {
	if m != nil {
		return m.EditDateUnixNano
	}
	return 0
}

func init() {
	proto.RegisterType((*Device)(nil), "device.Device")
	proto.RegisterType((*Site)(nil), "device.Site")
	proto.RegisterType((*SiteArchitecture)(nil), "device.SiteArchitecture")
	proto.RegisterType((*Sublayer)(nil), "device.Sublayer")
	proto.RegisterType((*Plan)(nil), "device.Plan")
}

func init() { proto.RegisterFile("queues/device/device.proto", fileDescriptor_6fdca17c9eac0927) }

var fileDescriptor_6fdca17c9eac0927 = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x95, 0xcd, 0x72, 0xe3, 0x44,
	0x10, 0xc7, 0x2d, 0x7f, 0xc8, 0xf6, 0xd8, 0x0e, 0xce, 0xb0, 0x84, 0x21, 0x2c, 0x5a, 0x97, 0x8b,
	0xda, 0x72, 0x51, 0x90, 0x14, 0xbb, 0xfb, 0x02, 0xb1, 0x45, 0x82, 0xb7, 0xb0, 0xd7, 0x25, 0x85,
	0xbd, 0x8f, 0xe5, 0xb1, 0x23, 0x90, 0x34, 0x46, 0x33, 0x5a, 0x2c, 0x4e, 0x3c, 0x02, 0xcf, 0xc0,
	0x89, 0x07, 0xe1, 0xb0, 0xc7, 0x1c, 0xf7, 0x44, 0x11, 0xe7, 0xc2, 0x71, 0x0f, 0x3c, 0xc0, 0xd6,
	0xf4, 0xc8, 0xb6, 0xe2, 0xe4, 0x14, 0xf7, 0xef, 0xff, 0xd7, 0x7c, 0xf4, 0x74, 0x77, 0xd0, 0xf1,
	0x2f, 0x09, 0x4b, 0x98, 0x38, 0x9d, 0xb1, 0x37, 0xbe, 0xc7, 0xb2, 0x3f, 0x27, 0xcb, 0x98, 0x4b,
	0x8e, 0x4d, 0x1d, 0x1d, 0x7f, 0xb3, 0xf0, 0xe5, 0x55, 0x32, 0x3d, 0xf1, 0x78, 0x78, 0xba, 0xe0,
	0x0b, 0x7e, 0x0a, 0xf2, 0x34, 0x99, 0x43, 0x04, 0x01, 0xfc, 0xd2, 0x9f, 0x75, 0xff, 0xaf, 0x22,
	0xd3, 0x86, 0x2f, 0xf1, 0x01, 0x2a, 0x0e, 0x6d, 0x62, 0x74, 0x8c, 0x5e, 0xcb, 0x29, 0xfa, 0x36,
	0x7e, 0x8c, 0xea, 0x03, 0x1e, 0x2e, 0x69, 0x94, 0x0e, 0x6d, 0x52, 0x04, 0x5c, 0xf7, 0x36, 0x00,
	0x63, 0x54, 0x1e, 0xd3, 0x90, 0x91, 0x52, 0xc7, 0xe8, 0xd5, 0x9d, 0x72, 0x44, 0x43, 0xa6, 0xd8,
	0x65, 0xba, 0x64, 0xa4, 0xac, 0x99, 0x4c, 0x97, 0x0c, 0x13, 0x54, 0x75, 0x93, 0xa9, 0xfa, 0x49,
	0x2a, 0x80, 0xab, 0x42, 0x87, 0xb8, 0x83, 0x1a, 0x36, 0x13, 0x5e, 0xec, 0x2f, 0xa5, 0xcf, 0x23,
	0x62, 0x82, 0xda, 0x98, 0xed, 0x10, 0x3e, 0x42, 0xa6, 0x3b, 0x1e, 0x4d, 0x86, 0x13, 0x52, 0x05,
	0xd1, 0x14, 0x10, 0xe1, 0x2f, 0x51, 0x4b, 0xf1, 0x01, 0x0f, 0xc3, 0x24, 0xf2, 0x65, 0x4a, 0x6a,
	0x20, 0xb7, 0x44, 0x1e, 0xe2, 0x63, 0x54, 0x3b, 0x0f, 0xf8, 0xaf, 0x70, 0xa2, 0x3a, 0x18, 0x6a,
	0xf3, 0x2c, 0xc6, 0x5d, 0xd4, 0x1c, 0xf9, 0x91, 0x1f, 0xfa, 0xbf, 0x31, 0xb5, 0x12, 0x41, 0x1d,
	0xa3, 0x57, 0x73, 0x9a, 0x61, 0x8e, 0xa9, 0x5d, 0xb2, 0xfb, 0xbb, 0x92, 0xca, 0x44, 0x90, 0x86,
	0xde, 0xc5, 0xcb, 0x43, 0xfc, 0x08, 0x55, 0xce, 0x02, 0x16, 0x4b, 0xd2, 0x04, 0xb5, 0x42, 0x55,
	0x80, 0xdb, 0xa8, 0x74, 0xc9, 0x18, 0x69, 0x01, 0x2b, 0x49, 0x06, 0xb7, 0x75, 0xaf, 0x68, 0x3c,
	0x1b, 0x27, 0xe1, 0x94, 0xc5, 0xe4, 0x00, 0xf2, 0xd9, 0x10, 0x3b, 0x84, 0x2d, 0x84, 0x5c, 0x1a,
	0x2e, 0x03, 0xe6, 0x50, 0xc9, 0xc8, 0x47, 0x60, 0x40, 0x62, 0x4b, 0x20, 0x1b, 0xfa, 0x20, 0xed,
	0x2c, 0x1b, 0xfa, 0x04, 0xea, 0x2e, 0x74, 0x35, 0x8c, 0x24, 0x8b, 0xe7, 0xd4, 0x63, 0xe4, 0x10,
	0xbe, 0x6c, 0x86, 0x39, 0x86, 0xbf, 0x46, 0x87, 0x79, 0xcf, 0xe0, 0x8a, 0x79, 0x3f, 0x13, 0x0c,
	0xc6, 0xc3, 0x70, 0x5f, 0x50, 0x3b, 0xd9, 0x63, 0xf7, 0x92, 0x2e, 0xc8, 0xc7, 0x7a, 0xa7, 0x19,
	0x44, 0xf8, 0x2b, 0xd4, 0x56, 0x99, 0x79, 0xfd, 0x7c, 0xc0, 0xa3, 0xb9, 0xbf, 0x78, 0xe9, 0xbe,
	0x1a, 0x93, 0x47, 0xe0, 0x68, 0x8b, 0x3d, 0x8e, 0x9f, 0xa2, 0x83, 0x8b, 0xf1, 0x68, 0xf8, 0xfa,
	0x5b, 0xc5, 0xc0, 0xf9, 0x09, 0x38, 0x0f, 0x16, 0x77, 0xa8, 0x5a, 0xf3, 0xbb, 0x99, 0x2f, 0x6d,
	0x2a, 0xd9, 0x8f, 0x91, 0xbf, 0x1a, 0xd3, 0x88, 0x93, 0xa3, 0x8e, 0xd1, 0x2b, 0x39, 0x6d, 0xb6,
	0xc7, 0xf1, 0x53, 0x54, 0x76, 0x7d, 0xc9, 0xc8, 0xa7, 0x1d, 0xa3, 0xd7, 0x78, 0xd6, 0x3c, 0xc9,
	0x1a, 0x40, 0xb1, 0x7e, 0xf9, 0xed, 0x3f, 0x4f, 0x0a, 0x4e, 0x59, 0xf8, 0x92, 0x29, 0xdf, 0x24,
	0xa0, 0x11, 0x21, 0x77, 0x7d, 0x8a, 0x6d, 0x7c, 0xcb, 0x80, 0x46, 0x3a, 0x73, 0x51, 0x32, 0xa7,
	0x9e, 0x4c, 0x62, 0x16, 0x93, 0xcf, 0xe0, 0x84, 0xcd, 0x30, 0xc7, 0x54, 0x4d, 0x3b, 0x3c, 0x60,
	0xe4, 0x58, 0xd7, 0x74, 0xcc, 0x03, 0x78, 0xcb, 0x41, 0xc0, 0x93, 0x99, 0xc3, 0x16, 0xaa, 0x72,
	0x3f, 0xd7, 0x95, 0xeb, 0xed, 0x10, 0x54, 0x7d, 0x2a, 0xa0, 0x41, 0x1e, 0x67, 0x55, 0xaf, 0x43,
	0x78, 0xe5, 0x54, 0x0c, 0x78, 0x24, 0xa9, 0x27, 0xc9, 0x17, 0x20, 0x22, 0xb1, 0x25, 0x50, 0x27,
	0xa9, 0xf8, 0x81, 0x7b, 0x14, 0xba, 0xc2, 0xd2, 0x6b, 0x8b, 0x1d, 0xca, 0x1c, 0x2e, 0x8b, 0xd5,
	0xa5, 0x04, 0x79, 0xb2, 0x75, 0x6c, 0x50, 0xe6, 0x78, 0x35, 0xfd, 0x89, 0x79, 0x72, 0x68, 0x93,
	0xce, 0xd6, 0xb1, 0x41, 0xdd, 0x3f, 0x0d, 0x9d, 0xca, 0x7b, 0x4d, 0xbf, 0x69, 0xeb, 0x62, 0xae,
	0xad, 0x09, 0xaa, 0x0e, 0x78, 0x12, 0xc9, 0x38, 0xcd, 0xba, 0xbd, 0xea, 0xe9, 0xf0, 0xc1, 0x86,
	0xef, 0xa3, 0xe6, 0x59, 0xec, 0x5d, 0xf9, 0x92, 0x41, 0x06, 0x89, 0xd9, 0x29, 0xf5, 0x1a, 0xcf,
	0x48, 0xfe, 0xb1, 0xf2, 0x7a, 0xf6, 0x20, 0x4d, 0x9a, 0x63, 0x2f, 0xcb, 0xb5, 0x4a, 0xdb, 0xec,
	0x7e, 0x8f, 0xda, 0xfb, 0x6e, 0xfc, 0x02, 0xd5, 0xdd, 0x64, 0x1a, 0xd0, 0x94, 0xc5, 0x82, 0x18,
	0xb0, 0x74, 0x7b, 0xbb, 0x74, 0x26, 0x64, 0x4b, 0xd6, 0xc5, 0xc6, 0xd8, 0xb5, 0x50, 0x6d, 0x23,
	0x6e, 0x6f, 0x68, 0xec, 0x6e, 0xd8, 0xfd, 0xbb, 0xa8, 0x2b, 0xe6, 0x5e, 0x3a, 0x8e, 0x90, 0x39,
	0xa2, 0xab, 0xf3, 0x89, 0x9b, 0x0d, 0x40, 0x33, 0x84, 0x48, 0xcd, 0x86, 0x11, 0x5d, 0xf5, 0xfd,
	0x85, 0x4d, 0x25, 0x55, 0x72, 0x09, 0xe4, 0x56, 0x98, 0x87, 0x6a, 0x82, 0x8e, 0xe8, 0xea, 0xcc,
	0x93, 0xfe, 0x1b, 0x9d, 0xa3, 0x96, 0x53, 0x0f, 0x37, 0x40, 0xad, 0x9d, 0x49, 0x15, 0x98, 0x3e,
	0x26, 0xd5, 0xbc, 0x8d, 0x4a, 0xfd, 0x8b, 0x09, 0xcc, 0xc3, 0x9a, 0x53, 0x9a, 0x5e, 0x4c, 0x54,
	0xcd, 0x8c, 0xe8, 0x4a, 0x8f, 0x69, 0x01, 0xb3, 0xb0, 0xe5, 0xa0, 0x70, 0x4b, 0x54, 0x77, 0x9f,
	0x53, 0x21, 0x1d, 0x26, 0x59, 0xa4, 0x4a, 0xc4, 0xa6, 0xa9, 0x80, 0x99, 0xd8, 0x72, 0x0e, 0xe7,
	0xfb, 0x02, 0xb8, 0x93, 0x20, 0xb8, 0xeb, 0xae, 0x67, 0xee, 0x7d, 0xe1, 0xc1, 0xfe, 0x44, 0x0f,
	0xf7, 0x67, 0xff, 0xc5, 0xf5, 0x8d, 0x55, 0x78, 0x77, 0x63, 0x15, 0xde, 0xdf, 0x58, 0xc6, 0xef,
	0x6b, 0xcb, 0xf8, 0x6b, 0x6d, 0x19, 0x6f, 0xd7, 0x96, 0x71, 0xbd, 0xb6, 0x8c, 0x7f, 0xd7, 0x96,
	0xf1, 0xdf, 0xda, 0x2a, 0xbc, 0x5f, 0x5b, 0xc6, 0x1f, 0xb7, 0x56, 0xe1, 0xfa, 0xd6, 0x2a, 0xbc,
	0xbb, 0xb5, 0x0a, 0x53, 0x13, 0xfe, 0x13, 0x3d, 0xff, 0x10, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xc6,
	0xdd, 0x9a, 0xde, 0x06, 0x00, 0x00,
}

func (this *Device) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Device)
	if !ok {
		that2, ok := that.(Device)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.CompanyID != that1.CompanyID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Subtype != that1.Subtype {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.SNMPIP != that1.SNMPIP {
		return false
	}
	if this.SNMPCommunity != that1.SNMPCommunity {
		return false
	}
	if this.FlowType != that1.FlowType {
		return false
	}
	if this.MinimizeSNMP != that1.MinimizeSNMP {
		return false
	}
	if this.CompanyStatus != that1.CompanyStatus {
		return false
	}
	if this.Alert != that1.Alert {
		return false
	}
	if this.Tee != that1.Tee {
		return false
	}
	if this.ShardNumber != that1.ShardNumber {
		return false
	}
	if this.SampleRate != that1.SampleRate {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.MaxInterface != that1.MaxInterface {
		return false
	}
	if this.MaxInterfaceCheck != that1.MaxInterfaceCheck {
		return false
	}
	if this.DNSTag != that1.DNSTag {
		return false
	}
	if this.SNMPV3ConfigJSON != that1.SNMPV3ConfigJSON {
		return false
	}
	if this.GNMIV1ConfJSON != that1.GNMIV1ConfJSON {
		return false
	}
	if this.EditDateUnixNano != that1.EditDateUnixNano {
		return false
	}
	if !this.Site.Equal(&that1.Site) {
		return false
	}
	if !this.Plan.Equal(&that1.Plan) {
		return false
	}
	if this.Manufacturer != that1.Manufacturer {
		return false
	}
	if this.Role != that1.Role {
		return false
	}
	if this.CloudRegion != that1.CloudRegion {
		return false
	}
	if this.SysName != that1.SysName {
		return false
	}
	if this.SysContact != that1.SysContact {
		return false
	}
	if this.SysLocation != that1.SysLocation {
		return false
	}
	if this.SysServices != that1.SysServices {
		return false
	}
	if this.SysObjectID != that1.SysObjectID {
		return false
	}
	return true
}
func (this *Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Site)
	if !ok {
		that2, ok := that.(Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Architecture) != len(that1.Architecture) {
		return false
	}
	for i := range this.Architecture {
		if !this.Architecture[i].Equal(&that1.Architecture[i]) {
			return false
		}
	}
	return true
}
func (this *SiteArchitecture) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteArchitecture)
	if !ok {
		that2, ok := that.(SiteArchitecture)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sublayers) != len(that1.Sublayers) {
		return false
	}
	for i := range this.Sublayers {
		if !this.Sublayers[i].Equal(&that1.Sublayers[i]) {
			return false
		}
	}
	return true
}
func (this *Sublayer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Sublayer)
	if !ok {
		that2, ok := that.(Sublayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Plan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Plan)
	if !ok {
		that2, ok := that.(Plan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.MaxFPS != that1.MaxFPS {
		return false
	}
	if this.MaxBigDataFPS != that1.MaxBigDataFPS {
		return false
	}
	if this.MaxActive != that1.MaxActive {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	if this.BGP != that1.BGP {
		return false
	}
	if this.MaxDevices != that1.MaxDevices {
		return false
	}
	if this.FastRetentionDays != that1.FastRetentionDays {
		return false
	}
	if this.FullRetentionDays != that1.FullRetentionDays {
		return false
	}
	if this.EditDateUnixNano != that1.EditDateUnixNano {
		return false
	}
	return true
}
func (this *Device) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 36)
	s = append(s, "&device.Device{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "CompanyID: "+fmt.Sprintf("%#v", this.CompanyID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Subtype: "+fmt.Sprintf("%#v", this.Subtype)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "SNMPIP: "+fmt.Sprintf("%#v", this.SNMPIP)+",\n")
	s = append(s, "SNMPCommunity: "+fmt.Sprintf("%#v", this.SNMPCommunity)+",\n")
	s = append(s, "FlowType: "+fmt.Sprintf("%#v", this.FlowType)+",\n")
	s = append(s, "MinimizeSNMP: "+fmt.Sprintf("%#v", this.MinimizeSNMP)+",\n")
	s = append(s, "CompanyStatus: "+fmt.Sprintf("%#v", this.CompanyStatus)+",\n")
	s = append(s, "Alert: "+fmt.Sprintf("%#v", this.Alert)+",\n")
	s = append(s, "Tee: "+fmt.Sprintf("%#v", this.Tee)+",\n")
	s = append(s, "ShardNumber: "+fmt.Sprintf("%#v", this.ShardNumber)+",\n")
	s = append(s, "SampleRate: "+fmt.Sprintf("%#v", this.SampleRate)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "MaxInterface: "+fmt.Sprintf("%#v", this.MaxInterface)+",\n")
	s = append(s, "MaxInterfaceCheck: "+fmt.Sprintf("%#v", this.MaxInterfaceCheck)+",\n")
	s = append(s, "DNSTag: "+fmt.Sprintf("%#v", this.DNSTag)+",\n")
	s = append(s, "SNMPV3ConfigJSON: "+fmt.Sprintf("%#v", this.SNMPV3ConfigJSON)+",\n")
	s = append(s, "GNMIV1ConfJSON: "+fmt.Sprintf("%#v", this.GNMIV1ConfJSON)+",\n")
	s = append(s, "EditDateUnixNano: "+fmt.Sprintf("%#v", this.EditDateUnixNano)+",\n")
	s = append(s, "Site: "+strings.Replace(this.Site.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Plan: "+strings.Replace(this.Plan.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Manufacturer: "+fmt.Sprintf("%#v", this.Manufacturer)+",\n")
	s = append(s, "Role: "+fmt.Sprintf("%#v", this.Role)+",\n")
	s = append(s, "CloudRegion: "+fmt.Sprintf("%#v", this.CloudRegion)+",\n")
	s = append(s, "SysName: "+fmt.Sprintf("%#v", this.SysName)+",\n")
	s = append(s, "SysContact: "+fmt.Sprintf("%#v", this.SysContact)+",\n")
	s = append(s, "SysLocation: "+fmt.Sprintf("%#v", this.SysLocation)+",\n")
	s = append(s, "SysServices: "+fmt.Sprintf("%#v", this.SysServices)+",\n")
	s = append(s, "SysObjectID: "+fmt.Sprintf("%#v", this.SysObjectID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&device.Site{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Architecture != nil {
		vs := make([]SiteArchitecture, len(this.Architecture))
		for i := range vs {
			vs[i] = this.Architecture[i]
		}
		s = append(s, "Architecture: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteArchitecture) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&device.SiteArchitecture{")
	if this.Sublayers != nil {
		vs := make([]Sublayer, len(this.Sublayers))
		for i := range vs {
			vs[i] = this.Sublayers[i]
		}
		s = append(s, "Sublayers: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Sublayer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&device.Sublayer{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Plan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&device.Plan{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "MaxFPS: "+fmt.Sprintf("%#v", this.MaxFPS)+",\n")
	s = append(s, "MaxBigDataFPS: "+fmt.Sprintf("%#v", this.MaxBigDataFPS)+",\n")
	s = append(s, "MaxActive: "+fmt.Sprintf("%#v", this.MaxActive)+",\n")
	s = append(s, "Active: "+fmt.Sprintf("%#v", this.Active)+",\n")
	s = append(s, "BGP: "+fmt.Sprintf("%#v", this.BGP)+",\n")
	s = append(s, "MaxDevices: "+fmt.Sprintf("%#v", this.MaxDevices)+",\n")
	s = append(s, "FastRetentionDays: "+fmt.Sprintf("%#v", this.FastRetentionDays)+",\n")
	s = append(s, "FullRetentionDays: "+fmt.Sprintf("%#v", this.FullRetentionDays)+",\n")
	s = append(s, "EditDateUnixNano: "+fmt.Sprintf("%#v", this.EditDateUnixNano)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDevice(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Device) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SysObjectID) > 0 {
		i -= len(m.SysObjectID)
		copy(dAtA[i:], m.SysObjectID)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.SysObjectID)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if len(m.SysServices) > 0 {
		i -= len(m.SysServices)
		copy(dAtA[i:], m.SysServices)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.SysServices)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.SysLocation) > 0 {
		i -= len(m.SysLocation)
		copy(dAtA[i:], m.SysLocation)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.SysLocation)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.SysContact) > 0 {
		i -= len(m.SysContact)
		copy(dAtA[i:], m.SysContact)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.SysContact)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.SysName) > 0 {
		i -= len(m.SysName)
		copy(dAtA[i:], m.SysName)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.SysName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.CloudRegion) > 0 {
		i -= len(m.CloudRegion)
		copy(dAtA[i:], m.CloudRegion)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.CloudRegion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Manufacturer) > 0 {
		i -= len(m.Manufacturer)
		copy(dAtA[i:], m.Manufacturer)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Manufacturer)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	{
		size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDevice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	{
		size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDevice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	if m.EditDateUnixNano != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.EditDateUnixNano))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.GNMIV1ConfJSON) > 0 {
		i -= len(m.GNMIV1ConfJSON)
		copy(dAtA[i:], m.GNMIV1ConfJSON)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.GNMIV1ConfJSON)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.SNMPV3ConfigJSON) > 0 {
		i -= len(m.SNMPV3ConfigJSON)
		copy(dAtA[i:], m.SNMPV3ConfigJSON)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.SNMPV3ConfigJSON)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.DNSTag) > 0 {
		i -= len(m.DNSTag)
		copy(dAtA[i:], m.DNSTag)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DNSTag)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.MaxInterfaceCheck != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.MaxInterfaceCheck))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.MaxInterface != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.MaxInterface))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.SampleRate != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.SampleRate))
		i--
		dAtA[i] = 0x78
	}
	if m.ShardNumber != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.ShardNumber))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Tee) > 0 {
		i -= len(m.Tee)
		copy(dAtA[i:], m.Tee)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Tee)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Alert) > 0 {
		i -= len(m.Alert)
		copy(dAtA[i:], m.Alert)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Alert)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CompanyStatus) > 0 {
		i -= len(m.CompanyStatus)
		copy(dAtA[i:], m.CompanyStatus)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.CompanyStatus)))
		i--
		dAtA[i] = 0x5a
	}
	if m.MinimizeSNMP {
		i--
		if m.MinimizeSNMP {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.FlowType) > 0 {
		i -= len(m.FlowType)
		copy(dAtA[i:], m.FlowType)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.FlowType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SNMPCommunity) > 0 {
		i -= len(m.SNMPCommunity)
		copy(dAtA[i:], m.SNMPCommunity)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.SNMPCommunity)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SNMPIP) > 0 {
		i -= len(m.SNMPIP)
		copy(dAtA[i:], m.SNMPIP)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.SNMPIP)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Subtype) > 0 {
		i -= len(m.Subtype)
		copy(dAtA[i:], m.Subtype)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Subtype)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CompanyID != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.CompanyID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Site) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Site) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Site) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Architecture) > 0 {
		for iNdEx := len(m.Architecture) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Architecture[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SiteArchitecture) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteArchitecture) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteArchitecture) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sublayers) > 0 {
		for iNdEx := len(m.Sublayers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sublayers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Sublayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sublayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sublayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Plan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EditDateUnixNano != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.EditDateUnixNano))
		i--
		dAtA[i] = 0x50
	}
	if m.FullRetentionDays != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.FullRetentionDays))
		i--
		dAtA[i] = 0x48
	}
	if m.FastRetentionDays != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.FastRetentionDays))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxDevices != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.MaxDevices))
		i--
		dAtA[i] = 0x38
	}
	if m.BGP {
		i--
		if m.BGP {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MaxActive != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.MaxActive))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxBigDataFPS != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.MaxBigDataFPS))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxFPS != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.MaxFPS))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDevice(dAtA []byte, offset int, v uint64) int {
	offset -= sovDevice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Device) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDevice(uint64(m.ID))
	}
	if m.CompanyID != 0 {
		n += 1 + sovDevice(uint64(m.CompanyID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Subtype)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.SNMPIP)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.SNMPCommunity)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.FlowType)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.MinimizeSNMP {
		n += 2
	}
	l = len(m.CompanyStatus)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Alert)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Tee)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.ShardNumber != 0 {
		n += 1 + sovDevice(uint64(m.ShardNumber))
	}
	if m.SampleRate != 0 {
		n += 1 + sovDevice(uint64(m.SampleRate))
	}
	l = len(m.Status)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	if m.MaxInterface != 0 {
		n += 2 + sovDevice(uint64(m.MaxInterface))
	}
	if m.MaxInterfaceCheck != 0 {
		n += 2 + sovDevice(uint64(m.MaxInterfaceCheck))
	}
	l = len(m.DNSTag)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.SNMPV3ConfigJSON)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.GNMIV1ConfJSON)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	if m.EditDateUnixNano != 0 {
		n += 2 + sovDevice(uint64(m.EditDateUnixNano))
	}
	l = m.Site.Size()
	n += 2 + l + sovDevice(uint64(l))
	l = m.Plan.Size()
	n += 2 + l + sovDevice(uint64(l))
	l = len(m.Manufacturer)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.CloudRegion)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.SysName)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.SysContact)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.SysLocation)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.SysServices)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	l = len(m.SysObjectID)
	if l > 0 {
		n += 2 + l + sovDevice(uint64(l))
	}
	return n
}

func (m *Site) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDevice(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if len(m.Architecture) > 0 {
		for _, e := range m.Architecture {
			l = e.Size()
			n += 1 + l + sovDevice(uint64(l))
		}
	}
	return n
}

func (m *SiteArchitecture) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sublayers) > 0 {
		for _, e := range m.Sublayers {
			l = e.Size()
			n += 1 + l + sovDevice(uint64(l))
		}
	}
	return n
}

func (m *Sublayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	return n
}

func (m *Plan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDevice(uint64(m.ID))
	}
	if m.MaxFPS != 0 {
		n += 1 + sovDevice(uint64(m.MaxFPS))
	}
	if m.MaxBigDataFPS != 0 {
		n += 1 + sovDevice(uint64(m.MaxBigDataFPS))
	}
	if m.MaxActive != 0 {
		n += 1 + sovDevice(uint64(m.MaxActive))
	}
	if m.Active {
		n += 2
	}
	if m.BGP {
		n += 2
	}
	if m.MaxDevices != 0 {
		n += 1 + sovDevice(uint64(m.MaxDevices))
	}
	if m.FastRetentionDays != 0 {
		n += 1 + sovDevice(uint64(m.FastRetentionDays))
	}
	if m.FullRetentionDays != 0 {
		n += 1 + sovDevice(uint64(m.FullRetentionDays))
	}
	if m.EditDateUnixNano != 0 {
		n += 1 + sovDevice(uint64(m.EditDateUnixNano))
	}
	return n
}

func sovDevice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDevice(x uint64) (n int) {
	return sovDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Device) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Device{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`CompanyID:` + fmt.Sprintf("%v", this.CompanyID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Subtype:` + fmt.Sprintf("%v", this.Subtype) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`SNMPIP:` + fmt.Sprintf("%v", this.SNMPIP) + `,`,
		`SNMPCommunity:` + fmt.Sprintf("%v", this.SNMPCommunity) + `,`,
		`FlowType:` + fmt.Sprintf("%v", this.FlowType) + `,`,
		`MinimizeSNMP:` + fmt.Sprintf("%v", this.MinimizeSNMP) + `,`,
		`CompanyStatus:` + fmt.Sprintf("%v", this.CompanyStatus) + `,`,
		`Alert:` + fmt.Sprintf("%v", this.Alert) + `,`,
		`Tee:` + fmt.Sprintf("%v", this.Tee) + `,`,
		`ShardNumber:` + fmt.Sprintf("%v", this.ShardNumber) + `,`,
		`SampleRate:` + fmt.Sprintf("%v", this.SampleRate) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`MaxInterface:` + fmt.Sprintf("%v", this.MaxInterface) + `,`,
		`MaxInterfaceCheck:` + fmt.Sprintf("%v", this.MaxInterfaceCheck) + `,`,
		`DNSTag:` + fmt.Sprintf("%v", this.DNSTag) + `,`,
		`SNMPV3ConfigJSON:` + fmt.Sprintf("%v", this.SNMPV3ConfigJSON) + `,`,
		`GNMIV1ConfJSON:` + fmt.Sprintf("%v", this.GNMIV1ConfJSON) + `,`,
		`EditDateUnixNano:` + fmt.Sprintf("%v", this.EditDateUnixNano) + `,`,
		`Site:` + strings.Replace(strings.Replace(this.Site.String(), "Site", "Site", 1), `&`, ``, 1) + `,`,
		`Plan:` + strings.Replace(strings.Replace(this.Plan.String(), "Plan", "Plan", 1), `&`, ``, 1) + `,`,
		`Manufacturer:` + fmt.Sprintf("%v", this.Manufacturer) + `,`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`CloudRegion:` + fmt.Sprintf("%v", this.CloudRegion) + `,`,
		`SysName:` + fmt.Sprintf("%v", this.SysName) + `,`,
		`SysContact:` + fmt.Sprintf("%v", this.SysContact) + `,`,
		`SysLocation:` + fmt.Sprintf("%v", this.SysLocation) + `,`,
		`SysServices:` + fmt.Sprintf("%v", this.SysServices) + `,`,
		`SysObjectID:` + fmt.Sprintf("%v", this.SysObjectID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Site) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArchitecture := "[]SiteArchitecture{"
	for _, f := range this.Architecture {
		repeatedStringForArchitecture += strings.Replace(strings.Replace(f.String(), "SiteArchitecture", "SiteArchitecture", 1), `&`, ``, 1) + ","
	}
	repeatedStringForArchitecture += "}"
	s := strings.Join([]string{`&Site{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Architecture:` + repeatedStringForArchitecture + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteArchitecture) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSublayers := "[]Sublayer{"
	for _, f := range this.Sublayers {
		repeatedStringForSublayers += strings.Replace(strings.Replace(f.String(), "Sublayer", "Sublayer", 1), `&`, ``, 1) + ","
	}
	repeatedStringForSublayers += "}"
	s := strings.Join([]string{`&SiteArchitecture{`,
		`Sublayers:` + repeatedStringForSublayers + `,`,
		`}`,
	}, "")
	return s
}
func (this *Sublayer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Sublayer{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Plan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Plan{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`MaxFPS:` + fmt.Sprintf("%v", this.MaxFPS) + `,`,
		`MaxBigDataFPS:` + fmt.Sprintf("%v", this.MaxBigDataFPS) + `,`,
		`MaxActive:` + fmt.Sprintf("%v", this.MaxActive) + `,`,
		`Active:` + fmt.Sprintf("%v", this.Active) + `,`,
		`BGP:` + fmt.Sprintf("%v", this.BGP) + `,`,
		`MaxDevices:` + fmt.Sprintf("%v", this.MaxDevices) + `,`,
		`FastRetentionDays:` + fmt.Sprintf("%v", this.FastRetentionDays) + `,`,
		`FullRetentionDays:` + fmt.Sprintf("%v", this.FullRetentionDays) + `,`,
		`EditDateUnixNano:` + fmt.Sprintf("%v", this.EditDateUnixNano) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDevice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyID", wireType)
			}
			m.CompanyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNMPIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SNMPIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNMPCommunity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SNMPCommunity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimizeSNMP", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinimizeSNMP = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardNumber", wireType)
			}
			m.ShardNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleRate", wireType)
			}
			m.SampleRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInterface", wireType)
			}
			m.MaxInterface = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxInterface |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInterfaceCheck", wireType)
			}
			m.MaxInterfaceCheck = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxInterfaceCheck |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNSTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DNSTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNMPV3ConfigJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SNMPV3ConfigJSON = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GNMIV1ConfJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GNMIV1ConfJSON = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditDateUnixNano", wireType)
			}
			m.EditDateUnixNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditDateUnixNano |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Site.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manufacturer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manufacturer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SysName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SysContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SysLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysServices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SysServices = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysObjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SysObjectID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Site) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Site: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Site: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Architecture", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Architecture = append(m.Architecture, SiteArchitecture{})
			if err := m.Architecture[len(m.Architecture)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteArchitecture) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteArchitecture: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteArchitecture: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sublayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sublayers = append(m.Sublayers, Sublayer{})
			if err := m.Sublayers[len(m.Sublayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sublayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sublayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sublayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFPS", wireType)
			}
			m.MaxFPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFPS |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBigDataFPS", wireType)
			}
			m.MaxBigDataFPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBigDataFPS |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxActive", wireType)
			}
			m.MaxActive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxActive |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BGP", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BGP = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDevices", wireType)
			}
			m.MaxDevices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDevices |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastRetentionDays", wireType)
			}
			m.FastRetentionDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FastRetentionDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullRetentionDays", wireType)
			}
			m.FullRetentionDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullRetentionDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditDateUnixNano", wireType)
			}
			m.EditDateUnixNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditDateUnixNano |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDevice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDevice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDevice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDevice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDevice = fmt.Errorf("proto: unexpected end of group")
)
