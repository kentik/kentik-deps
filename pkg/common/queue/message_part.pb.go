// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queue/message_part.proto

package queue

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MessagePart holds part of a serialized model that has been split to keep messages small
type MessagePart struct {
	CompanyID  uint32 `protobuf:"varint,1,opt,name=CompanyID,json=companyID,proto3" json:"company_id"`
	GUID       string `protobuf:"bytes,2,opt,name=GUID,json=gUID,proto3" json:"guid"`
	PartNumber uint32 `protobuf:"varint,3,opt,name=PartNumber,json=partNumber,proto3" json:"part_number"`
	PartCount  uint32 `protobuf:"varint,4,opt,name=PartCount,json=partCount,proto3" json:"part_count"`
	Data       []byte `protobuf:"bytes,5,opt,name=Data,json=data,proto3" json:"data"`
}

func (m *MessagePart) Reset()      { *m = MessagePart{} }
func (*MessagePart) ProtoMessage() {}
func (*MessagePart) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b65ecfaee7ca72, []int{0}
}
func (m *MessagePart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePart.Merge(m, src)
}
func (m *MessagePart) XXX_Size() int {
	return m.Size()
}
func (m *MessagePart) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePart.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePart proto.InternalMessageInfo

func (m *MessagePart) GetCompanyID() uint32 {
	if m != nil {
		return m.CompanyID
	}
	return 0
}

func (m *MessagePart) GetGUID() string {
	if m != nil {
		return m.GUID
	}
	return ""
}

func (m *MessagePart) GetPartNumber() uint32 {
	if m != nil {
		return m.PartNumber
	}
	return 0
}

func (m *MessagePart) GetPartCount() uint32 {
	if m != nil {
		return m.PartCount
	}
	return 0
}

func (m *MessagePart) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*MessagePart)(nil), "queue.MessagePart")
}

func init() { proto.RegisterFile("queue/message_part.proto", fileDescriptor_31b65ecfaee7ca72) }

var fileDescriptor_31b65ecfaee7ca72 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0x7d, 0xbf, 0x2f, 0x45, 0xc4, 0xe5, 0x8f, 0x94, 0xc9, 0x42, 0xe8, 0xb6, 0x62, 0xea,
	0x00, 0xcd, 0x00, 0x4f, 0xd0, 0x46, 0x42, 0x1d, 0x40, 0x28, 0x52, 0xe7, 0xca, 0x49, 0x83, 0xe9,
	0x90, 0x3a, 0xa4, 0xf6, 0xc0, 0xc6, 0x23, 0xf0, 0x18, 0x3c, 0x0a, 0x63, 0x27, 0xd4, 0xa9, 0x22,
	0xce, 0x82, 0x32, 0xf5, 0x11, 0x90, 0x1d, 0x15, 0x16, 0xcb, 0xf7, 0xdc, 0x73, 0xce, 0xcf, 0x32,
	0x65, 0xcf, 0x3a, 0xd3, 0x59, 0x98, 0x67, 0xab, 0x15, 0x17, 0xd9, 0xac, 0xe0, 0xa5, 0x1a, 0x16,
	0xa5, 0x54, 0x32, 0xe8, 0xb8, 0xcd, 0xd9, 0x95, 0x58, 0xa8, 0x27, 0x9d, 0x0c, 0x53, 0x99, 0x87,
	0x42, 0x0a, 0x19, 0xba, 0x6d, 0xa2, 0x1f, 0xdd, 0xe4, 0x06, 0x77, 0x6b, 0x53, 0x17, 0x9f, 0x40,
	0xbb, 0x77, 0x6d, 0xd9, 0x03, 0x2f, 0x55, 0x70, 0x49, 0xfd, 0xb1, 0xcc, 0x0b, 0xbe, 0x7c, 0x99,
	0x44, 0x0c, 0xfa, 0x30, 0x38, 0x1e, 0x9d, 0x34, 0xdb, 0x1e, 0x4d, 0x5b, 0x71, 0xb6, 0x98, 0xc7,
	0x7e, 0xba, 0x37, 0x04, 0xe7, 0xd4, 0xbb, 0x9d, 0x4e, 0x22, 0xf6, 0xaf, 0x0f, 0x03, 0x7f, 0x74,
	0xd8, 0x6c, 0x7b, 0x9e, 0xd0, 0x8b, 0x79, 0xec, 0x89, 0xe9, 0x24, 0x0a, 0x42, 0x4a, 0x6d, 0xe7,
	0xbd, 0xce, 0x93, 0xac, 0x64, 0xff, 0x5d, 0xd9, 0x69, 0xb3, 0xed, 0x75, 0xed, 0xab, 0x67, 0x4b,
	0x27, 0xc7, 0xb4, 0xf8, 0xb5, 0x58, 0xb8, 0x0d, 0x8c, 0xa5, 0x5e, 0x2a, 0xe6, 0xfd, 0xc1, 0x9d,
	0x3f, 0xb5, 0x6a, 0xec, 0x17, 0x7b, 0x83, 0x85, 0x47, 0x5c, 0x71, 0xd6, 0xe9, 0xc3, 0xe0, 0xa8,
	0x85, 0xcf, 0xb9, 0xe2, 0xb1, 0x3b, 0x47, 0x37, 0xeb, 0x0a, 0xc9, 0xa6, 0x42, 0xb2, 0xab, 0x10,
	0x5e, 0x0d, 0xc2, 0xbb, 0x41, 0xf8, 0x30, 0x08, 0x6b, 0x83, 0xf0, 0x65, 0x10, 0xbe, 0x0d, 0x92,
	0x9d, 0x41, 0x78, 0xab, 0x91, 0xac, 0x6b, 0x24, 0x9b, 0x1a, 0x49, 0x72, 0xe0, 0x7e, 0xe5, 0xfa,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xb3, 0x04, 0x29, 0x67, 0x01, 0x00, 0x00,
}

func (this *MessagePart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessagePart)
	if !ok {
		that2, ok := that.(MessagePart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CompanyID != that1.CompanyID {
		return false
	}
	if this.GUID != that1.GUID {
		return false
	}
	if this.PartNumber != that1.PartNumber {
		return false
	}
	if this.PartCount != that1.PartCount {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *MessagePart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&queue.MessagePart{")
	s = append(s, "CompanyID: "+fmt.Sprintf("%#v", this.CompanyID)+",\n")
	s = append(s, "GUID: "+fmt.Sprintf("%#v", this.GUID)+",\n")
	s = append(s, "PartNumber: "+fmt.Sprintf("%#v", this.PartNumber)+",\n")
	s = append(s, "PartCount: "+fmt.Sprintf("%#v", this.PartCount)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessagePart(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MessagePart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMessagePart(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PartCount != 0 {
		i = encodeVarintMessagePart(dAtA, i, uint64(m.PartCount))
		i--
		dAtA[i] = 0x20
	}
	if m.PartNumber != 0 {
		i = encodeVarintMessagePart(dAtA, i, uint64(m.PartNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GUID) > 0 {
		i -= len(m.GUID)
		copy(dAtA[i:], m.GUID)
		i = encodeVarintMessagePart(dAtA, i, uint64(len(m.GUID)))
		i--
		dAtA[i] = 0x12
	}
	if m.CompanyID != 0 {
		i = encodeVarintMessagePart(dAtA, i, uint64(m.CompanyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessagePart(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessagePart(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessagePart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompanyID != 0 {
		n += 1 + sovMessagePart(uint64(m.CompanyID))
	}
	l = len(m.GUID)
	if l > 0 {
		n += 1 + l + sovMessagePart(uint64(l))
	}
	if m.PartNumber != 0 {
		n += 1 + sovMessagePart(uint64(m.PartNumber))
	}
	if m.PartCount != 0 {
		n += 1 + sovMessagePart(uint64(m.PartCount))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessagePart(uint64(l))
	}
	return n
}

func sovMessagePart(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessagePart(x uint64) (n int) {
	return sovMessagePart(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MessagePart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessagePart{`,
		`CompanyID:` + fmt.Sprintf("%v", this.CompanyID) + `,`,
		`GUID:` + fmt.Sprintf("%v", this.GUID) + `,`,
		`PartNumber:` + fmt.Sprintf("%v", this.PartNumber) + `,`,
		`PartCount:` + fmt.Sprintf("%v", this.PartCount) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessagePart(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MessagePart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagePart
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyID", wireType)
			}
			m.CompanyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagePart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagePart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessagePart
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessagePart
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartNumber", wireType)
			}
			m.PartNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagePart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartCount", wireType)
			}
			m.PartCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagePart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagePart
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessagePart
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessagePart
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagePart(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagePart
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessagePart
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessagePart(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessagePart
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessagePart
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessagePart
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessagePart
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessagePart
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessagePart
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessagePart        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessagePart          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessagePart = fmt.Errorf("proto: unexpected end of group")
)
